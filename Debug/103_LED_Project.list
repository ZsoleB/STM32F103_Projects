
103_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ba4  08000ba4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000000  08000bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000090  08000c3c  00020090  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000b4  08000c3c  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002915  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b70  00000000  00000000  000229ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000218  00000000  00000000  00023540  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00023758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001659  00000000  00000000  000238b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f52  00000000  00000000  00024f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00025e63  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000560  00000000  00000000  00025ee0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08000b8c 	.word	0x08000b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08000b8c 	.word	0x08000b8c

0800014c <GPIO_Driver_Init>:
#include "GPIO_Driver_Cfg.h"


/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 800014c:	b4f0      	push	{r4, r5, r6, r7}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 800015a:	4a9e      	ldr	r2, [pc, #632]	; (80003d4 <GPIO_Driver_Init+0x288>)
 800015c:	4b9d      	ldr	r3, [pc, #628]	; (80003d4 <GPIO_Driver_Init+0x288>)
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	f043 0304 	orr.w	r3, r3, #4
 8000164:	6193      	str	r3, [r2, #24]
	#endif
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 8000166:	2300      	movs	r3, #0
 8000168:	80fb      	strh	r3, [r7, #6]
 800016a:	e129      	b.n	80003c0 <GPIO_Driver_Init+0x274>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 800016c:	2300      	movs	r3, #0
 800016e:	80bb      	strh	r3, [r7, #4]
 8000170:	e117      	b.n	80003a2 <GPIO_Driver_Init+0x256>
		{
			if((GPIO_SETUP[index].GPIO_Pins[index1])<0x08)
 8000172:	4b99      	ldr	r3, [pc, #612]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000174:	681a      	ldr	r2, [r3, #0]
 8000176:	88fb      	ldrh	r3, [r7, #6]
 8000178:	2168      	movs	r1, #104	; 0x68
 800017a:	fb01 f303 	mul.w	r3, r1, r3
 800017e:	441a      	add	r2, r3
 8000180:	88bb      	ldrh	r3, [r7, #4]
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	4413      	add	r3, r2
 8000186:	88db      	ldrh	r3, [r3, #6]
 8000188:	2b07      	cmp	r3, #7
 800018a:	f200 8082 	bhi.w	8000292 <GPIO_Driver_Init+0x146>
			{
				/*The first step is to clear the default setting*/
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 800018e:	4b92      	ldr	r3, [pc, #584]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	88fb      	ldrh	r3, [r7, #6]
 8000194:	2168      	movs	r1, #104	; 0x68
 8000196:	fb01 f303 	mul.w	r3, r1, r3
 800019a:	4413      	add	r3, r2
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	4b8e      	ldr	r3, [pc, #568]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80001a0:	6819      	ldr	r1, [r3, #0]
 80001a2:	88fb      	ldrh	r3, [r7, #6]
 80001a4:	2068      	movs	r0, #104	; 0x68
 80001a6:	fb00 f303 	mul.w	r3, r0, r3
 80001aa:	440b      	add	r3, r1
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	6819      	ldr	r1, [r3, #0]
 80001b0:	4b89      	ldr	r3, [pc, #548]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80001b2:	6818      	ldr	r0, [r3, #0]
 80001b4:	88fb      	ldrh	r3, [r7, #6]
 80001b6:	2468      	movs	r4, #104	; 0x68
 80001b8:	fb04 f303 	mul.w	r3, r4, r3
 80001bc:	4418      	add	r0, r3
 80001be:	88bb      	ldrh	r3, [r7, #4]
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	4403      	add	r3, r0
 80001c4:	88db      	ldrh	r3, [r3, #6]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	2003      	movs	r0, #3
 80001ca:	fa00 f303 	lsl.w	r3, r0, r3
 80001ce:	461d      	mov	r5, r3
							  	  	  	  	  	  	  ((uint32)(0x03 <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))))));
 80001d0:	4b81      	ldr	r3, [pc, #516]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80001d2:	6818      	ldr	r0, [r3, #0]
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	2468      	movs	r4, #104	; 0x68
 80001d8:	fb04 f303 	mul.w	r3, r4, r3
 80001dc:	4418      	add	r0, r3
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	005b      	lsls	r3, r3, #1
 80001e2:	4403      	add	r3, r0
 80001e4:	88db      	ldrh	r3, [r3, #6]
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	3302      	adds	r3, #2
 80001ea:	2003      	movs	r0, #3
 80001ec:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80001f0:	432b      	orrs	r3, r5
 80001f2:	43db      	mvns	r3, r3
 80001f4:	400b      	ands	r3, r1
 80001f6:	6013      	str	r3, [r2, #0]
				/*Set the GPIO configuration*/
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80001f8:	4b77      	ldr	r3, [pc, #476]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	2168      	movs	r1, #104	; 0x68
 8000200:	fb01 f303 	mul.w	r3, r1, r3
 8000204:	4413      	add	r3, r2
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b73      	ldr	r3, [pc, #460]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 800020a:	6819      	ldr	r1, [r3, #0]
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	2068      	movs	r0, #104	; 0x68
 8000210:	fb00 f303 	mul.w	r3, r0, r3
 8000214:	440b      	add	r3, r1
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	6819      	ldr	r1, [r3, #0]
 800021a:	4b6f      	ldr	r3, [pc, #444]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	2468      	movs	r4, #104	; 0x68
 8000222:	fb04 f303 	mul.w	r3, r4, r3
 8000226:	4418      	add	r0, r3
 8000228:	88bb      	ldrh	r3, [r7, #4]
 800022a:	3310      	adds	r3, #16
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	4403      	add	r3, r0
 8000230:	88db      	ldrh	r3, [r3, #6]
 8000232:	461d      	mov	r5, r3
 8000234:	4b68      	ldr	r3, [pc, #416]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000236:	6818      	ldr	r0, [r3, #0]
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	2468      	movs	r4, #104	; 0x68
 800023c:	fb04 f303 	mul.w	r3, r4, r3
 8000240:	4418      	add	r0, r3
 8000242:	88bb      	ldrh	r3, [r7, #4]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	4403      	add	r3, r0
 8000248:	88db      	ldrh	r3, [r3, #6]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	fa05 f303 	lsl.w	r3, r5, r3
 8000250:	461d      	mov	r5, r3
													((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))));
 8000252:	4b61      	ldr	r3, [pc, #388]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000254:	6818      	ldr	r0, [r3, #0]
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2468      	movs	r4, #104	; 0x68
 800025a:	fb04 f303 	mul.w	r3, r4, r3
 800025e:	4418      	add	r0, r3
 8000260:	88bb      	ldrh	r3, [r7, #4]
 8000262:	3320      	adds	r3, #32
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	4403      	add	r3, r0
 8000268:	88db      	ldrh	r3, [r3, #6]
 800026a:	461e      	mov	r6, r3
 800026c:	4b5a      	ldr	r3, [pc, #360]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 800026e:	6818      	ldr	r0, [r3, #0]
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	2468      	movs	r4, #104	; 0x68
 8000274:	fb04 f303 	mul.w	r3, r4, r3
 8000278:	4418      	add	r0, r3
 800027a:	88bb      	ldrh	r3, [r7, #4]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	4403      	add	r3, r0
 8000280:	88db      	ldrh	r3, [r3, #6]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	3302      	adds	r3, #2
 8000286:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 800028a:	432b      	orrs	r3, r5
 800028c:	430b      	orrs	r3, r1
 800028e:	6013      	str	r3, [r2, #0]
 8000290:	e084      	b.n	800039c <GPIO_Driver_Init+0x250>
			}
			else
			{
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000292:	4b51      	ldr	r3, [pc, #324]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	2168      	movs	r1, #104	; 0x68
 800029a:	fb01 f303 	mul.w	r3, r1, r3
 800029e:	4413      	add	r3, r2
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b4d      	ldr	r3, [pc, #308]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80002a4:	6819      	ldr	r1, [r3, #0]
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	2068      	movs	r0, #104	; 0x68
 80002aa:	fb00 f303 	mul.w	r3, r0, r3
 80002ae:	440b      	add	r3, r1
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	6859      	ldr	r1, [r3, #4]
 80002b4:	4b48      	ldr	r3, [pc, #288]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	2468      	movs	r4, #104	; 0x68
 80002bc:	fb04 f303 	mul.w	r3, r4, r3
 80002c0:	4418      	add	r0, r3
 80002c2:	88bb      	ldrh	r3, [r7, #4]
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	4403      	add	r3, r0
 80002c8:	88db      	ldrh	r3, [r3, #6]
 80002ca:	3b08      	subs	r3, #8
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	2003      	movs	r0, #3
 80002d0:	fa00 f303 	lsl.w	r3, r0, r3
 80002d4:	461d      	mov	r5, r3
				              	  	  	  	  	  	((uint32)(0x03 <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))))));
 80002d6:	4b40      	ldr	r3, [pc, #256]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80002d8:	6818      	ldr	r0, [r3, #0]
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	2468      	movs	r4, #104	; 0x68
 80002de:	fb04 f303 	mul.w	r3, r4, r3
 80002e2:	4418      	add	r0, r3
 80002e4:	88bb      	ldrh	r3, [r7, #4]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4403      	add	r3, r0
 80002ea:	88db      	ldrh	r3, [r3, #6]
 80002ec:	3b08      	subs	r3, #8
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	3302      	adds	r3, #2
 80002f2:	2003      	movs	r0, #3
 80002f4:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80002f8:	432b      	orrs	r3, r5
 80002fa:	43db      	mvns	r3, r3
 80002fc:	400b      	ands	r3, r1
 80002fe:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000300:	4b35      	ldr	r3, [pc, #212]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	2168      	movs	r1, #104	; 0x68
 8000308:	fb01 f303 	mul.w	r3, r1, r3
 800030c:	4413      	add	r3, r2
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b31      	ldr	r3, [pc, #196]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000312:	6819      	ldr	r1, [r3, #0]
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	2068      	movs	r0, #104	; 0x68
 8000318:	fb00 f303 	mul.w	r3, r0, r3
 800031c:	440b      	add	r3, r1
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	6859      	ldr	r1, [r3, #4]
 8000322:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2468      	movs	r4, #104	; 0x68
 800032a:	fb04 f303 	mul.w	r3, r4, r3
 800032e:	4418      	add	r0, r3
 8000330:	88bb      	ldrh	r3, [r7, #4]
 8000332:	3310      	adds	r3, #16
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	4403      	add	r3, r0
 8000338:	88db      	ldrh	r3, [r3, #6]
 800033a:	461d      	mov	r5, r3
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 800033e:	6818      	ldr	r0, [r3, #0]
 8000340:	88fb      	ldrh	r3, [r7, #6]
 8000342:	2468      	movs	r4, #104	; 0x68
 8000344:	fb04 f303 	mul.w	r3, r4, r3
 8000348:	4418      	add	r0, r3
 800034a:	88bb      	ldrh	r3, [r7, #4]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	4403      	add	r3, r0
 8000350:	88db      	ldrh	r3, [r3, #6]
 8000352:	3b08      	subs	r3, #8
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	fa05 f303 	lsl.w	r3, r5, r3
 800035a:	461d      	mov	r5, r3
							  	  	  	  	  	    ((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))));
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	88fb      	ldrh	r3, [r7, #6]
 8000362:	2468      	movs	r4, #104	; 0x68
 8000364:	fb04 f303 	mul.w	r3, r4, r3
 8000368:	4418      	add	r0, r3
 800036a:	88bb      	ldrh	r3, [r7, #4]
 800036c:	3320      	adds	r3, #32
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	4403      	add	r3, r0
 8000372:	88db      	ldrh	r3, [r3, #6]
 8000374:	461e      	mov	r6, r3
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 8000378:	6818      	ldr	r0, [r3, #0]
 800037a:	88fb      	ldrh	r3, [r7, #6]
 800037c:	2468      	movs	r4, #104	; 0x68
 800037e:	fb04 f303 	mul.w	r3, r4, r3
 8000382:	4418      	add	r0, r3
 8000384:	88bb      	ldrh	r3, [r7, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	4403      	add	r3, r0
 800038a:	88db      	ldrh	r3, [r3, #6]
 800038c:	3b08      	subs	r3, #8
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	3302      	adds	r3, #2
 8000392:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000396:	432b      	orrs	r3, r5
 8000398:	430b      	orrs	r3, r1
 800039a:	6053      	str	r3, [r2, #4]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 800039c:	88bb      	ldrh	r3, [r7, #4]
 800039e:	3301      	adds	r3, #1
 80003a0:	80bb      	strh	r3, [r7, #4]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <GPIO_Driver_Init+0x28c>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	2168      	movs	r1, #104	; 0x68
 80003aa:	fb01 f303 	mul.w	r3, r1, r3
 80003ae:	4413      	add	r3, r2
 80003b0:	889b      	ldrh	r3, [r3, #4]
 80003b2:	88ba      	ldrh	r2, [r7, #4]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	f4ff aedc 	bcc.w	8000172 <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	3301      	adds	r3, #1
 80003be:	80fb      	strh	r3, [r7, #6]
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f43f aed2 	beq.w	800016c <GPIO_Driver_Init+0x20>
			}
		}
	}
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bcf0      	pop	{r4, r5, r6, r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	20000068 	.word	0x20000068

080003dc <HWENCODER_Driver_Init>:
 *      Author: Zsole
 */
#include "HWENCODER_Driver_Cfg.h"

void HWENCODER_Driver_Init()
{
 80003dc:	b4b0      	push	{r4, r5, r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 80003e2:	2300      	movs	r3, #0
 80003e4:	80fb      	strh	r3, [r7, #6]

	for(index=0x00;index<HWENCODER_DRIVER_INSTANCE_NUM;index++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	80fb      	strh	r3, [r7, #6]
 80003ea:	e10f      	b.n	800060c <HWENCODER_Driver_Init+0x230>
	{
		if (HWENCODER_SETUP[index].HWENCODER_Driver_selected_timer_input == HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_1)
 80003ec:	4b8c      	ldr	r3, [pc, #560]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	88fa      	ldrh	r2, [r7, #6]
 80003f2:	4613      	mov	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	4413      	add	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	791b      	ldrb	r3, [r3, #4]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d118      	bne.n	8000434 <HWENCODER_Driver_Init+0x58>
		{

			HWENCODER_SETUP[index].Timer_Source->SMCR |= HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_1;
 8000402:	4b87      	ldr	r3, [pc, #540]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000404:	6819      	ldr	r1, [r3, #0]
 8000406:	88fa      	ldrh	r2, [r7, #6]
 8000408:	4613      	mov	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	4413      	add	r3, r2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	440b      	add	r3, r1
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	4b82      	ldr	r3, [pc, #520]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000416:	6818      	ldr	r0, [r3, #0]
 8000418:	88fa      	ldrh	r2, [r7, #6]
 800041a:	4613      	mov	r3, r2
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	4413      	add	r3, r2
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	4403      	add	r3, r0
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	891b      	ldrh	r3, [r3, #8]
 8000428:	b29b      	uxth	r3, r3
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	b29b      	uxth	r3, r3
 8000430:	810b      	strh	r3, [r1, #8]
 8000432:	e046      	b.n	80004c2 <HWENCODER_Driver_Init+0xe6>
		}
		else if (HWENCODER_SETUP[index].HWENCODER_Driver_selected_timer_input == HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_2)
 8000434:	4b7a      	ldr	r3, [pc, #488]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000436:	6819      	ldr	r1, [r3, #0]
 8000438:	88fa      	ldrh	r2, [r7, #6]
 800043a:	4613      	mov	r3, r2
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	4413      	add	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	440b      	add	r3, r1
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d118      	bne.n	800047c <HWENCODER_Driver_Init+0xa0>
		{

			HWENCODER_SETUP[index].Timer_Source->SMCR |= HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_2;
 800044a:	4b75      	ldr	r3, [pc, #468]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800044c:	6819      	ldr	r1, [r3, #0]
 800044e:	88fa      	ldrh	r2, [r7, #6]
 8000450:	4613      	mov	r3, r2
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	4413      	add	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	440b      	add	r3, r1
 800045a:	6819      	ldr	r1, [r3, #0]
 800045c:	4b70      	ldr	r3, [pc, #448]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800045e:	6818      	ldr	r0, [r3, #0]
 8000460:	88fa      	ldrh	r2, [r7, #6]
 8000462:	4613      	mov	r3, r2
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	4413      	add	r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4403      	add	r3, r0
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	891b      	ldrh	r3, [r3, #8]
 8000470:	b29b      	uxth	r3, r3
 8000472:	f043 0302 	orr.w	r3, r3, #2
 8000476:	b29b      	uxth	r3, r3
 8000478:	810b      	strh	r3, [r1, #8]
 800047a:	e022      	b.n	80004c2 <HWENCODER_Driver_Init+0xe6>
		}

		else if (HWENCODER_SETUP[index].HWENCODER_Driver_selected_timer_input == HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_1_AND_2)
 800047c:	4b68      	ldr	r3, [pc, #416]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800047e:	6819      	ldr	r1, [r3, #0]
 8000480:	88fa      	ldrh	r2, [r7, #6]
 8000482:	4613      	mov	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	4413      	add	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	440b      	add	r3, r1
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d117      	bne.n	80004c2 <HWENCODER_Driver_Init+0xe6>
		{

			HWENCODER_SETUP[index].Timer_Source->SMCR |= HWENCODER_DRIVER_COUNT_ON_TIMER_INPUT_1_AND_2;
 8000492:	4b63      	ldr	r3, [pc, #396]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	88fa      	ldrh	r2, [r7, #6]
 8000498:	4613      	mov	r3, r2
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4413      	add	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	440b      	add	r3, r1
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	4b5e      	ldr	r3, [pc, #376]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	88fa      	ldrh	r2, [r7, #6]
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4403      	add	r3, r0
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	891b      	ldrh	r3, [r3, #8]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	f043 0303 	orr.w	r3, r3, #3
 80004be:	b29b      	uxth	r3, r3
 80004c0:	810b      	strh	r3, [r1, #8]
		{
			/*Nothing to do*/
		}


		if (HWENCODER_SETUP[index].HWENCODER_Driver_Channel_pair == HWENCODER_DRIVER_CHANNEL_1_AND_2)
 80004c2:	4b57      	ldr	r3, [pc, #348]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80004c4:	6819      	ldr	r1, [r3, #0]
 80004c6:	88fa      	ldrh	r2, [r7, #6]
 80004c8:	4613      	mov	r3, r2
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	4413      	add	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	440b      	add	r3, r1
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d12f      	bne.n	8000538 <HWENCODER_Driver_Init+0x15c>
		{
			HWENCODER_SETUP[index].Timer_Source->CCMR1 |= HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_primary
 80004d8:	4b51      	ldr	r3, [pc, #324]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80004da:	6819      	ldr	r1, [r3, #0]
 80004dc:	88fa      	ldrh	r2, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	4413      	add	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	440b      	add	r3, r1
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	4b4d      	ldr	r3, [pc, #308]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	88fa      	ldrh	r2, [r7, #6]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4403      	add	r3, r0
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	8b1b      	ldrh	r3, [r3, #24]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	b218      	sxth	r0, r3
 8000502:	4b47      	ldr	r3, [pc, #284]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000504:	681c      	ldr	r4, [r3, #0]
 8000506:	88fa      	ldrh	r2, [r7, #6]
 8000508:	4613      	mov	r3, r2
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4413      	add	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	4423      	add	r3, r4
 8000512:	79db      	ldrb	r3, [r3, #7]
 8000514:	b29c      	uxth	r4, r3
					| HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_secondary;
 8000516:	4b42      	ldr	r3, [pc, #264]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000518:	681d      	ldr	r5, [r3, #0]
 800051a:	88fa      	ldrh	r2, [r7, #6]
 800051c:	4613      	mov	r3, r2
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	4413      	add	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	442b      	add	r3, r5
 8000526:	891b      	ldrh	r3, [r3, #8]
 8000528:	4323      	orrs	r3, r4
 800052a:	b29b      	uxth	r3, r3
 800052c:	b21b      	sxth	r3, r3
			HWENCODER_SETUP[index].Timer_Source->CCMR1 |= HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_primary
 800052e:	4303      	orrs	r3, r0
 8000530:	b21b      	sxth	r3, r3
 8000532:	b29b      	uxth	r3, r3
 8000534:	830b      	strh	r3, [r1, #24]
 8000536:	e039      	b.n	80005ac <HWENCODER_Driver_Init+0x1d0>
		}
		else if (HWENCODER_SETUP[index].HWENCODER_Driver_Channel_pair == HWENCODER_DRIVER_CHANNEL_3_AND_4)
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800053a:	6819      	ldr	r1, [r3, #0]
 800053c:	88fa      	ldrh	r2, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	4413      	add	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	440b      	add	r3, r1
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d12e      	bne.n	80005ac <HWENCODER_Driver_Init+0x1d0>
		{
			HWENCODER_SETUP[index].Timer_Source->CCMR2 |= HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_primary
 800054e:	4b34      	ldr	r3, [pc, #208]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	88fa      	ldrh	r2, [r7, #6]
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	440b      	add	r3, r1
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	88fa      	ldrh	r2, [r7, #6]
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4403      	add	r3, r0
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	8b9b      	ldrh	r3, [r3, #28]
 8000574:	b29b      	uxth	r3, r3
 8000576:	b218      	sxth	r0, r3
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	88fa      	ldrh	r2, [r7, #6]
 800057e:	4613      	mov	r3, r2
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	4413      	add	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4423      	add	r3, r4
 8000588:	79db      	ldrb	r3, [r3, #7]
 800058a:	b29c      	uxth	r4, r3
					| HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_secondary;
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 800058e:	681d      	ldr	r5, [r3, #0]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	4613      	mov	r3, r2
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	4413      	add	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	442b      	add	r3, r5
 800059c:	891b      	ldrh	r3, [r3, #8]
 800059e:	4323      	orrs	r3, r4
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	b21b      	sxth	r3, r3
			HWENCODER_SETUP[index].Timer_Source->CCMR2 |= HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_selection_primary
 80005a4:	4303      	orrs	r3, r0
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	838b      	strh	r3, [r1, #28]
		}
		else
		{
			/*Nothing to do*/
		}
		HWENCODER_SETUP[index].Timer_Source->CCER |= HWENCODER_SETUP[index].HWENCODER_Driver_Capture_Compare_outputs;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	88fa      	ldrh	r2, [r7, #6]
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	6819      	ldr	r1, [r3, #0]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80005c0:	6818      	ldr	r0, [r3, #0]
 80005c2:	88fa      	ldrh	r2, [r7, #6]
 80005c4:	4613      	mov	r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4403      	add	r3, r0
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	8c1b      	ldrh	r3, [r3, #32]
 80005d2:	b298      	uxth	r0, r3
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80005d6:	681c      	ldr	r4, [r3, #0]
 80005d8:	88fa      	ldrh	r2, [r7, #6]
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4423      	add	r3, r4
 80005e4:	799b      	ldrb	r3, [r3, #6]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4303      	orrs	r3, r0
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	840b      	strh	r3, [r1, #32]
		HWENCODER_SETUP[index].Timer_Source->CNT = (MAX16 - 1);
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HWENCODER_Driver_Init+0x244>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000604:	849a      	strh	r2, [r3, #36]	; 0x24
	for(index=0x00;index<HWENCODER_DRIVER_INSTANCE_NUM;index++)
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	3301      	adds	r3, #1
 800060a:	80fb      	strh	r3, [r7, #6]
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	2b00      	cmp	r3, #0
 8000610:	f43f aeec 	beq.w	80003ec <HWENCODER_Driver_Init+0x10>
	}
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bcb0      	pop	{r4, r5, r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000078 	.word	0x20000078

08000624 <HWENCODER_Driver_Get_Count_Value>:
uint32 HWENCODER_Driver_Get_Count_Value(uint8 HWENCODER_setup_nr)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	return (uint32) (HWENCODER_SETUP[HWENCODER_setup_nr].Timer_Source->CNT);
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HWENCODER_Driver_Get_Count_Value+0x2c>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000642:	b29b      	uxth	r3, r3
}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000078 	.word	0x20000078

08000654 <NVIC_Driver_SetInterrupt>:
 */

#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 800066a:	2300      	movs	r3, #0
 800066c:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 800066e:	230f      	movs	r3, #15
 8000670:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 8000672:	2300      	movs	r3, #0
 8000674:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 8000676:	230f      	movs	r3, #15
 8000678:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <NVIC_Driver_SetInterrupt+0xb8>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	43db      	mvns	r3, r3
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 0307 	and.w	r3, r3, #7
 800068c:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 800068e:	7b7a      	ldrb	r2, [r7, #13]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	fa42 f303 	asr.w	r3, r2, r3
 8000696:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	f1c3 0304 	rsb	r3, r3, #4
 800069e:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 80006a0:	79ba      	ldrb	r2, [r7, #6]
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 80006aa:	797a      	ldrb	r2, [r7, #5]
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	4013      	ands	r3, r2
 80006b0:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 80006b2:	7b3a      	ldrb	r2, [r7, #12]
 80006b4:	7afb      	ldrb	r3, [r7, #11]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	011b      	lsls	r3, r3, #4
 80006bc:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	da08      	bge.n	80006d8 <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <NVIC_Driver_SetInterrupt+0xb8>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	4413      	add	r3, r2
 80006d2:	7aba      	ldrb	r2, [r7, #10]
 80006d4:	761a      	strb	r2, [r3, #24]
 80006d6:	e006      	b.n	80006e6 <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <NVIC_Driver_SetInterrupt+0xbc>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	4413      	add	r3, r2
 80006e0:	7aba      	ldrb	r2, [r7, #10]
 80006e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <NVIC_Driver_SetInterrupt+0xbc>)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	115b      	asrs	r3, r3, #5
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	2101      	movs	r1, #1
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 80006fe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e000e100 	.word	0xe000e100

08000714 <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4313      	orrs	r3, r2
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <NVIC_Driver_PriorityGroupConfig+0x48>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_Driver_Set_SYSTICK_Interrupt>:
	}
#endif

#if (NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE == OK)
	void NVIC_Driver_Set_SYSTICK_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
		/*Enable the Systick interrupt */
		SysTick->CTRL|=(0x01<<0x01);
 8000770:	4a08      	ldr	r2, [pc, #32]	; (8000794 <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6013      	str	r3, [r2, #0]
		NVIC_Driver_SetInterrupt(SysTick_IRQn,Preemption_priority,Sub_priority);
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4619      	mov	r1, r3
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	f7ff ff65 	bl	8000654 <NVIC_Driver_SetInterrupt>
	}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <SysTick_Handler+0x20>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d004      	beq.n	80007ae <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Handler+0x20>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <SysTick_Handler+0x20>)
 80007ac:	6013      	str	r3, [r2, #0]
	}
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000ac 	.word	0x200000ac

080007bc <SYSTICK_Driver_Init>:

void SYSTICK_Driver_Init()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	/*Set the processor clock as the clock source */
	SysTick->CTRL|=(0x01<<0x02);
 80007c0:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <SYSTICK_Driver_Init+0x34>)
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <SYSTICK_Driver_Init+0x34>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6013      	str	r3, [r2, #0]
	#if(SYSTICK_DRIVER_ENABLE_INTERRUPT == OK)
		/*Set the timer interrupt and its priority and sub-priority*/
		NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff ffa1 	bl	8000714 <NVIC_Driver_PriorityGroupConfig>
		NVIC_Driver_Set_SYSTICK_Interrupt(0x0F,0x00);
 80007d2:	2100      	movs	r1, #0
 80007d4:	200f      	movs	r0, #15
 80007d6:	f7ff ffc3 	bl	8000760 <NVIC_Driver_Set_SYSTICK_Interrupt>
	#endif
	/*Init the Systick current value register*/
	SysTick->VAL = 0x00;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SYSTICK_Driver_Init+0x34>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
	/*Set the load register with the configured value*/
	SysTick->LOAD = ((SYSTICK_DRIVER_LOAD & 0xFFFFFFUL)-1);
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <SYSTICK_Driver_Init+0x34>)
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <SYSTICK_Driver_Init+0x38>)
 80007e4:	605a      	str	r2, [r3, #4]

	SYSTICK_Driver_Start();
 80007e6:	f000 f807 	bl	80007f8 <SYSTICK_Driver_Start>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010
 80007f4:	0001193f 	.word	0x0001193f

080007f8 <SYSTICK_Driver_Start>:

void SYSTICK_Driver_Start()
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	/*Enable the systick timer*/
	SysTick->CTRL|=0x01;
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <SYSTICK_Driver_Start+0x18>)
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SYSTICK_Driver_Start+0x18>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e010 	.word	0xe000e010

08000814 <TCNT_Driver_Init>:
}

#endif
#endif

void TCNT_Driver_Init() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	80fb      	strh	r3, [r7, #6]

#if ((TCNT_DRIVER_TIMER_4)==OK)
	RCC->APB1ENR|=RCC_APB1ENR_TIM4EN;
 800081e:	4a25      	ldr	r2, [pc, #148]	; (80008b4 <TCNT_Driver_Init+0xa0>)
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <TCNT_Driver_Init+0xa0>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	61d3      	str	r3, [r2, #28]
	NVIC_Driver_PriorityGroupConfig(TCNT_DRIVER_SELECTED_PRIORITY_GRUP);
	NVIC_Driver_SetTimer_Update_Interrupt(TCNT_DRIVER_SELECTED_PREEMPTION_PRIORITY,
			TCNT_DRIVER_SELECTED_SUB_PRIORITY);
#endif

	for (index = 0x00; index < TCNT_DRIVER_INSTANCE_NUM; index++) {
 800082a:	2300      	movs	r3, #0
 800082c:	80fb      	strh	r3, [r7, #6]
 800082e:	e039      	b.n	80008a4 <TCNT_Driver_Init+0x90>
		TCNT_SETUP[index].Timer->CR1 |= TCNT_DRIVER_DIRECTION;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	88fb      	ldrh	r3, [r7, #6]
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 800083e:	6811      	ldr	r1, [r2, #0]
 8000840:	88fa      	ldrh	r2, [r7, #6]
 8000842:	0112      	lsls	r2, r2, #4
 8000844:	440a      	add	r2, r1
 8000846:	6812      	ldr	r2, [r2, #0]
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	b292      	uxth	r2, r2
 800084c:	801a      	strh	r2, [r3, #0]
		TCNT_SETUP[index].Timer->EGR |= TCNT_DRIVER_UPDATE_GENERATION;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 800085c:	6811      	ldr	r1, [r2, #0]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	440a      	add	r2, r1
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	8a92      	ldrh	r2, [r2, #20]
 8000868:	b292      	uxth	r2, r2
 800086a:	f042 0201 	orr.w	r2, r2, #1
 800086e:	b292      	uxth	r2, r2
 8000870:	829a      	strh	r2, [r3, #20]
		TCNT_Driver_SetPrescale(index, TCNT_SETUP[index].TimerPrescaler);
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	b2d8      	uxtb	r0, r3
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4413      	add	r3, r2
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	4619      	mov	r1, r3
 8000884:	f000 f830 	bl	80008e8 <TCNT_Driver_SetPrescale>
		TCNT_Driver_SetPeriod(index, TCNT_SETUP[index].TimerPeriod);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <TCNT_Driver_Init+0xa4>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	4413      	add	r3, r2
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4619      	mov	r1, r3
 800089a:	f000 f80f 	bl	80008bc <TCNT_Driver_SetPeriod>
	for (index = 0x00; index < TCNT_DRIVER_INSTANCE_NUM; index++) {
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	3301      	adds	r3, #1
 80008a2:	80fb      	strh	r3, [r7, #6]
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0c2      	beq.n	8000830 <TCNT_Driver_Init+0x1c>
	}
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	2000008c 	.word	0x2000008c

080008bc <TCNT_Driver_SetPeriod>:

void TCNT_Driver_SetPeriod(uint8 TCNT_setup_nr, uint32 PeriodValue) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
	TCNT_SETUP[TCNT_setup_nr].Timer->ARR = PeriodValue;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <TCNT_Driver_SetPeriod+0x28>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4413      	add	r3, r2
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	683a      	ldr	r2, [r7, #0]
 80008d6:	b292      	uxth	r2, r2
 80008d8:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <TCNT_Driver_SetPrescale>:

void TCNT_Driver_SetPrescale(uint8 TCNT_setup_nr, uint32 PrescaleValue) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	6039      	str	r1, [r7, #0]
 80008f2:	71fb      	strb	r3, [r7, #7]
	TCNT_SETUP[TCNT_setup_nr].Timer->PSC = PrescaleValue;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <TCNT_Driver_SetPrescale+0x28>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	4413      	add	r3, r2
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	b292      	uxth	r2, r2
 8000904:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	2000008c 	.word	0x2000008c

08000914 <TCNT_Driver_Start>:

void TCNT_Driver_Start(uint8 TCNT_setup_nr) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	TCNT_SETUP[TCNT_setup_nr].Timer->CR1 |= TCNT_DRIVER_COUNTER_ENABLE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <TCNT_Driver_Start+0x38>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <TCNT_Driver_Start+0x38>)
 800092c:	6811      	ldr	r1, [r2, #0]
 800092e:	79fa      	ldrb	r2, [r7, #7]
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	440a      	add	r2, r1
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	8812      	ldrh	r2, [r2, #0]
 8000938:	b292      	uxth	r2, r2
 800093a:	f042 0201 	orr.w	r2, r2, #1
 800093e:	b292      	uxth	r2, r2
 8000940:	801a      	strh	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	2000008c 	.word	0x2000008c

08000950 <main>:
#include "HWENCODER_Driver_Cfg.h"

uint32 dummy_value = 0x00;

int main()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	SYSTICK_Driver_Init();
 8000954:	f7ff ff32 	bl	80007bc <SYSTICK_Driver_Init>
	GPIO_Driver_Init();
 8000958:	f7ff fbf8 	bl	800014c <GPIO_Driver_Init>
	TCNT_Driver_Init();
 800095c:	f7ff ff5a 	bl	8000814 <TCNT_Driver_Init>
	HWENCODER_Driver_Init();
 8000960:	f7ff fd3c 	bl	80003dc <HWENCODER_Driver_Init>
	TCNT_Driver_Start(TCNT_DRIVER_TIM4);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ffd5 	bl	8000914 <TCNT_Driver_Start>
	while (1)
	{
	 dummy_value = HWENCODER_Driver_Get_Count_Value(HWENCODER_DRIVER_1);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fe5a 	bl	8000624 <HWENCODER_Driver_Get_Count_Value>
 8000970:	4602      	mov	r2, r0
 8000972:	4b01      	ldr	r3, [pc, #4]	; (8000978 <main+0x28>)
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	e7f8      	b.n	800096a <main+0x1a>
 8000978:	200000b0 	.word	0x200000b0

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000980:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000982:	e003      	b.n	800098c <LoopCopyDataInit>

08000984 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000986:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000988:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800098a:	3104      	adds	r1, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000990:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000992:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000994:	d3f6      	bcc.n	8000984 <CopyDataInit>
	ldr	r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000998:	e002      	b.n	80009a0 <LoopFillZerobss>

0800099a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800099a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800099c:	f842 3b04 	str.w	r3, [r2], #4

080009a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80009a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009a4:	d3f9      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a6:	f000 f813 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f000 f8cb 	bl	8000b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff ffcf 	bl	8000950 <main>
	bx	lr
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80009b8:	08000bac 	.word	0x08000bac
	ldr	r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009c0:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80009c4:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 80009c8:	200000b4 	.word	0x200000b4

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <SystemInit+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SystemInit+0x5c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80009e0:	4912      	ldr	r1, [pc, #72]	; (8000a2c <SystemInit+0x5c>)
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemInit+0x5c>)
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <SystemInit+0x60>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <SystemInit+0x5c>)
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <SystemInit+0x5c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <SystemInit+0x5c>)
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <SystemInit+0x5c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <SystemInit+0x5c>)
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SystemInit+0x5c>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SystemInit+0x5c>)
 8000a16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a1a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a1c:	f000 f80c 	bl	8000a38 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <SystemInit+0x64>)
 8000a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a26:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	f8ff0000 	.word	0xf8ff0000
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000a3c:	f000 f802 	bl	8000a44 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a52:	4a3a      	ldr	r2, [pc, #232]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d103      	bne.n	8000a7c <SetSysClockTo72+0x38>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a7a:	d1f0      	bne.n	8000a5e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	e001      	b.n	8000a92 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d14b      	bne.n	8000b30 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000a98:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f023 0303 	bic.w	r3, r3, #3
 8000aae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <SetSysClockTo72+0xfc>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ad8:	4a18      	ldr	r2, [pc, #96]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ae2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000aee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000af0:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000afa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000afc:	bf00      	nop
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f9      	beq.n	8000afe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f023 0303 	bic.w	r3, r3, #3
 8000b14:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b16:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b22:	bf00      	nop
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SetSysClockTo72+0xf8>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d1f9      	bne.n	8000b24 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40022000 	.word	0x40022000

08000b44 <__libc_init_array>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2500      	movs	r5, #0
 8000b48:	4e0c      	ldr	r6, [pc, #48]	; (8000b7c <__libc_init_array+0x38>)
 8000b4a:	4c0d      	ldr	r4, [pc, #52]	; (8000b80 <__libc_init_array+0x3c>)
 8000b4c:	1ba4      	subs	r4, r4, r6
 8000b4e:	10a4      	asrs	r4, r4, #2
 8000b50:	42a5      	cmp	r5, r4
 8000b52:	d109      	bne.n	8000b68 <__libc_init_array+0x24>
 8000b54:	f000 f81a 	bl	8000b8c <_init>
 8000b58:	2500      	movs	r5, #0
 8000b5a:	4e0a      	ldr	r6, [pc, #40]	; (8000b84 <__libc_init_array+0x40>)
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <__libc_init_array+0x44>)
 8000b5e:	1ba4      	subs	r4, r4, r6
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	d105      	bne.n	8000b72 <__libc_init_array+0x2e>
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b6c:	4798      	blx	r3
 8000b6e:	3501      	adds	r5, #1
 8000b70:	e7ee      	b.n	8000b50 <__libc_init_array+0xc>
 8000b72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b76:	4798      	blx	r3
 8000b78:	3501      	adds	r5, #1
 8000b7a:	e7f2      	b.n	8000b62 <__libc_init_array+0x1e>
 8000b7c:	08000ba4 	.word	0x08000ba4
 8000b80:	08000ba4 	.word	0x08000ba4
 8000b84:	08000ba4 	.word	0x08000ba4
 8000b88:	08000ba8 	.word	0x08000ba8

08000b8c <_init>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr

08000b98 <_fini>:
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	bf00      	nop
 8000b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9e:	bc08      	pop	{r3}
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	4770      	bx	lr
