
103_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f88  08000f88  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08000f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000044  2000007c  0800100c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000c0  0800100c  000200c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001d9d  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009e9  00000000  00000000  00021e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000220  00000000  00000000  00022830  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00022a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000113c  00000000  00000000  00022bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f38  00000000  00000000  00023d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024c6c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000688  00000000  00000000  00024ce8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000f70 	.word	0x08000f70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08000f70 	.word	0x08000f70

0800014c <CAN_Driver_DebugFreeze>:
static CAN_Driver_Set_State CAN_Driver_StateSetters[] = {
		CAN_Driver_Enter_InitMode, CAN_Driver_Enter_NormalMode,
		CAN_Driver_Enter_SleepMode };

void CAN_Driver_DebugFreeze(uint8 option)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	if (option == NOK)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d106      	bne.n	800016a <CAN_Driver_DebugFreeze+0x1e>
	{
		CAN1->MCR &= (~CAN_DRIVER_DEBUG_FREEZE);
 800015c:	4a0a      	ldr	r2, [pc, #40]	; (8000188 <CAN_Driver_DebugFreeze+0x3c>)
 800015e:	4b0a      	ldr	r3, [pc, #40]	; (8000188 <CAN_Driver_DebugFreeze+0x3c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000166:	6013      	str	r3, [r2, #0]
	else
	{
		/*Nothing to do*/
	}

}
 8000168:	e008      	b.n	800017c <CAN_Driver_DebugFreeze+0x30>
	else if (option == OK)
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d105      	bne.n	800017c <CAN_Driver_DebugFreeze+0x30>
		CAN1->MCR |= CAN_DRIVER_DEBUG_FREEZE;
 8000170:	4a05      	ldr	r2, [pc, #20]	; (8000188 <CAN_Driver_DebugFreeze+0x3c>)
 8000172:	4b05      	ldr	r3, [pc, #20]	; (8000188 <CAN_Driver_DebugFreeze+0x3c>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017a:	6013      	str	r3, [r2, #0]
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40006400 	.word	0x40006400

0800018c <CAN_Driver_Enter_NormalMode>:

void CAN_Driver_Enter_NormalMode()
{
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
	/*Exit from Initialization mode, and enter normal mode*/
	CAN1->MCR &= (~CAN_DRIVER_INIT_REQUEST);
 8000190:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <CAN_Driver_Enter_NormalMode+0x28>)
 8000192:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <CAN_Driver_Enter_NormalMode+0x28>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f023 0301 	bic.w	r3, r3, #1
 800019a:	6013      	str	r3, [r2, #0]

	/*Wait until change confirmed, 11 recessive bits are detected and the line is idle*/
	while (!(CAN1->MSR & CAN_DRIVER_INIT_ACKNOWLEDGE) != 0x00)
 800019c:	bf00      	nop
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <CAN_Driver_Enter_NormalMode+0x28>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	f003 0301 	and.w	r3, r3, #1
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d0f9      	beq.n	800019e <CAN_Driver_Enter_NormalMode+0x12>
	{
	}
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	40006400 	.word	0x40006400

080001b8 <CAN_Driver_Enter_SleepMode>:

void CAN_Driver_Enter_SleepMode()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	/*Exit from Initialization mode*/
	CAN1->MCR &= (~CAN_DRIVER_INIT_REQUEST);
 80001bc:	4a0e      	ldr	r2, [pc, #56]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	f023 0301 	bic.w	r3, r3, #1
 80001c6:	6013      	str	r3, [r2, #0]

	/*Enter into Sleep mode*/
	CAN1->MCR |= CAN_DRIVER_SLEEP_MODE_REQUEST;
 80001c8:	4a0b      	ldr	r2, [pc, #44]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001ca:	4b0b      	ldr	r3, [pc, #44]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]

	/*Wait until change confirmed*/
	while (!((CAN1->MSR & CAN_DRIVER_SLEEP_ACKNOWLEDGE) != 0x00)
 80001d4:	bf00      	nop
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001d8:	685b      	ldr	r3, [r3, #4]
 80001da:	f003 0302 	and.w	r3, r3, #2
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d105      	bne.n	80001ee <CAN_Driver_Enter_SleepMode+0x36>
			&& ((CAN1->MSR & CAN_DRIVER_INIT_ACKNOWLEDGE) == 0x00))
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <CAN_Driver_Enter_SleepMode+0x40>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	f003 0301 	and.w	r3, r3, #1
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f3      	beq.n	80001d6 <CAN_Driver_Enter_SleepMode+0x1e>
	{
	}
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40006400 	.word	0x40006400

080001fc <CAN_Driver_Init>:

void CAN_Driver_Init()
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	/*STM32F103C8 has only one can peripheral, so only CAN1 will be used */
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000200:	4a27      	ldr	r2, [pc, #156]	; (80002a0 <CAN_Driver_Init+0xa4>)
 8000202:	4b27      	ldr	r3, [pc, #156]	; (80002a0 <CAN_Driver_Init+0xa4>)
 8000204:	69db      	ldr	r3, [r3, #28]
 8000206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800020a:	61d3      	str	r3, [r2, #28]
	 Erroneous access to certain configuration registers can cause the hardware to temporarily
	 disturb the whole CAN network. Therefore the CAN_BTR register can be modified by
	 software only while the CAN hardware is in initialization mode.

	 */
	CAN_Driver_ModeChange(CAN_DRIVER_OPERATING_MODE_INIT);
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f8ad 	bl	800036c <CAN_Driver_ModeChange>

	/*Set up the CAN option registers*/
#if(CAN_DRIVER_RUN_ON_DEBUG_MODE == OK)
	/*Can-debug configuration*/
	CAN_Driver_DebugFreeze(NOK);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ff9a 	bl	800014c <CAN_Driver_DebugFreeze>
	CAN_Driver_DebugFreeze(OK);
#endif

	/*Can Transmit priority*/
#if(CAN_DRIVER_TRANSMIT_PRIORITY == CAN_DRIVER_TRANSMIT_PRIORITY_BY_ID)
	CAN1->MCR |= CAN_DRIVER_TRANSMIT_PRIORITY_BY_ID;
 8000218:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800021a:	4b22      	ldr	r3, [pc, #136]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_DRIVER_TRANSMIT_PRIORITY_BY_TX_REQ_ORDER;
#endif

	/*Can Transmission mode*/
#if(CAN_DRIVER_TRANSMISSION_MODE == CAN_DRIVER_NON_AUTOMATIC_TRANSMISSION_MODE)
	CAN1->MCR |= CAN_DRIVER_NON_AUTOMATIC_TRANSMISSION_MODE;
 8000220:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000222:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0310 	orr.w	r3, r3, #16
 800022a:	6013      	str	r3, [r2, #0]

	/*Can Rx overwrite or retain the old values*/
#if(CAN_DRIVER_RX_OVERWRITE_ENABLE == OK)
	/*Receive FIFO not locked on overrun. Once a receive FIFO is full the next incoming
	 message will overwrite the previous one */
	CAN1->MCR &= (~CAN_DRIVER_RX_FIFO_LOCKED_MODE);
 800022c:	4a1d      	ldr	r2, [pc, #116]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800022e:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 0308 	bic.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]

	/*Can Time-Triggered transmission*/
#if(CAN_DRIVER_TIME_TRIGGERED_TRANSMISSION == OK)
	CAN1->MCR |= CAN_DRIVER_TIME_TRIGGERED_COMMUNICATION_MODE;
#else
	CAN1->MCR &= (~CAN_DRIVER_TIME_TRIGGERED_COMMUNICATION_MODE);
 8000238:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000242:	6013      	str	r3, [r2, #0]

	/*Can auto bus off management*/
#if(CAN_DRIVER_AUTOMATIC_BUS_OFF_MANAGEMENT == OK)
	CAN1->MCR |= CAN_DRIVER_AUTOMATIC_BUS_OFF;
#else
	CAN1->MCR &= (~CAN_DRIVER_AUTOMATIC_BUS_OFF);
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800024e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_DRIVER_AUTOMATIC_WAKE_UP;
#else
	/*The Bus-Off state is left on software request, once 128 occurrences of 11 recessive bits
	 have been monitored and the software has first set and cleared the INRQ bit of the
	 CAN_MCR register.  */
	CAN1->MCR &= (~CAN_DRIVER_AUTOMATIC_WAKE_UP);
 8000250:	4a14      	ldr	r2, [pc, #80]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f023 0320 	bic.w	r3, r3, #32
 800025a:	6013      	str	r3, [r2, #0]
#endif

	/*Set up the CAN bit timing registers*/
	CAN1->BTR &= CAN_DRIVER_BIT_TIMING_CLEAR_MASK;
 800025c:	4911      	ldr	r1, [pc, #68]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000260:	69da      	ldr	r2, [r3, #28]
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <CAN_Driver_Init+0xac>)
 8000264:	4013      	ands	r3, r2
 8000266:	61cb      	str	r3, [r1, #28]
	/*set TSEG1*/
	CAN1->BTR |= ((((CAN_DRIVER_BIT_SEGMENT1 - 1) & 0x0F) << 16));
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800026c:	69db      	ldr	r3, [r3, #28]
 800026e:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8000272:	61d3      	str	r3, [r2, #28]
	/*set TSEG2*/
	CAN1->BTR |= ((((CAN_DRIVER_BIT_SEGMENT2 - 1) & 0x07) << 20));
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000278:	69db      	ldr	r3, [r3, #28]
 800027a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800027e:	61d3      	str	r3, [r2, #28]
	/*set SJW*/
	CAN1->BTR |=
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800028a:	61d3      	str	r3, [r2, #28]
			((((CAN_DRIVER_RESYNCHRONIZATION_JUMP_WIDTH - 1) & 0x03) << 24));
	/*set CAN pescaler*/
	CAN1->BTR |= (((CAN_BAUD_RATE_PRESCALER - 1) & 0x3FF));
 800028c:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <CAN_Driver_Init+0xa8>)
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <CAN_Driver_Init+0xa8>)
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	f043 0303 	orr.w	r3, r3, #3
 8000296:	61d3      	str	r3, [r2, #28]

	/*Set up additional functionalities, ex. TestModes*/
#if (CAN_DRIVER_TEST_MODE_ENABLE == OK)
	CAN_Driver_SetTestMode();
 8000298:	f000 fa48 	bl	800072c <CAN_Driver_SetTestMode>
#endif
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40006400 	.word	0x40006400
 80002a8:	fc80fc00 	.word	0xfc80fc00

080002ac <CAN_Driver_InitBuffer>:

void CAN_Driver_InitBuffer(CAN_Driver_Message *CAN_MSG)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	uint8_t index = 0x00;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]

	for (index = 0x00; index < 8; index++)
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e007      	b.n	80002ce <CAN_Driver_InitBuffer+0x22>
	{
		CAN_MSG->Payload[index] = 0x00;
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	711a      	strb	r2, [r3, #4]
	for (index = 0x00; index < 8; index++)
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	3301      	adds	r3, #1
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	2b07      	cmp	r3, #7
 80002d2:	d9f4      	bls.n	80002be <CAN_Driver_InitBuffer+0x12>
	}
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr

080002de <CAN_Driver_SetBuffer>:

void CAN_Driver_SetBuffer(CAN_Driver_Message* arg, uint8 len, uint8* message)
{
 80002de:	b480      	push	{r7}
 80002e0:	b087      	sub	sp, #28
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	460b      	mov	r3, r1
 80002e8:	607a      	str	r2, [r7, #4]
 80002ea:	72fb      	strb	r3, [r7, #11]
   uint8_t ind = 0x00;
 80002ec:	2300      	movs	r3, #0
 80002ee:	75fb      	strb	r3, [r7, #23]
   arg->Length = len;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	7afa      	ldrb	r2, [r7, #11]
 80002f4:	731a      	strb	r2, [r3, #12]

   for(ind=0x00;ind<len;ind++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	75fb      	strb	r3, [r7, #23]
 80002fa:	e00b      	b.n	8000314 <CAN_Driver_SetBuffer+0x36>
   {
      arg->Payload[ind] = message[ind];
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	7dfa      	ldrb	r2, [r7, #23]
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	440a      	add	r2, r1
 8000304:	7811      	ldrb	r1, [r2, #0]
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4413      	add	r3, r2
 800030a:	460a      	mov	r2, r1
 800030c:	711a      	strb	r2, [r3, #4]
   for(ind=0x00;ind<len;ind++)
 800030e:	7dfb      	ldrb	r3, [r7, #23]
 8000310:	3301      	adds	r3, #1
 8000312:	75fb      	strb	r3, [r7, #23]
 8000314:	7dfa      	ldrb	r2, [r7, #23]
 8000316:	7afb      	ldrb	r3, [r7, #11]
 8000318:	429a      	cmp	r2, r3
 800031a:	d3ef      	bcc.n	80002fc <CAN_Driver_SetBuffer+0x1e>
   }
}
 800031c:	bf00      	nop
 800031e:	371c      	adds	r7, #28
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
	...

08000328 <CAN_Driver_Enter_InitMode>:

void CAN_Driver_Enter_InitMode()
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	/*Exit from Sleep mode*/
	CAN1->MCR &= (~CAN_DRIVER_SLEEP_MODE_REQUEST);
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f023 0302 	bic.w	r3, r3, #2
 8000336:	6013      	str	r3, [r2, #0]

	/*Enter into Initialization mode*/
	CAN1->MCR |= CAN_DRIVER_INIT_REQUEST;
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 800033a:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]

	/*Wait until change confirmed, INAK is set and SLAK is cleared*/
	while (!((CAN1->MSR & CAN_DRIVER_INIT_ACKNOWLEDGE) != 0x00)
 8000344:	bf00      	nop
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	2b00      	cmp	r3, #0
 8000350:	d105      	bne.n	800035e <CAN_Driver_Enter_InitMode+0x36>
			&& ((CAN1->MSR & CAN_DRIVER_SLEEP_ACKNOWLEDGE) == 0x00))
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <CAN_Driver_Enter_InitMode+0x40>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f3      	beq.n	8000346 <CAN_Driver_Enter_InitMode+0x1e>
	{
	}
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40006400 	.word	0x40006400

0800036c <CAN_Driver_ModeChange>:

void CAN_Driver_ModeChange(CAN_Driver_Operating_Modes Mode)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	CAN_Driver_StateSetters[Mode]();
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	4a03      	ldr	r2, [pc, #12]	; (8000388 <CAN_Driver_ModeChange+0x1c>)
 800037a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037e:	4798      	blx	r3
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000000 	.word	0x20000000

0800038c <CAN_Driver_ReceiveMessage>:

void CAN_Driver_ReceiveMessage(CAN_Driver_Message *msg, uint8 MailBox_Number, uint8 FIFO_Number)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	70fb      	strb	r3, [r7, #3]
 8000398:	4613      	mov	r3, r2
 800039a:	70bb      	strb	r3, [r7, #2]
	/*Read the message identifiers*/
	if ((CAN1->sFIFOMailBox[FIFO_Number].RIR & (CAN_DRIVER_ID_STANDARD << 2)) == 0x00)
 800039c:	4a45      	ldr	r2, [pc, #276]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 800039e:	78bb      	ldrb	r3, [r7, #2]
 80003a0:	331b      	adds	r3, #27
 80003a2:	011b      	lsls	r3, r3, #4
 80003a4:	4413      	add	r3, r2
 80003a6:	681b      	ldr	r3, [r3, #0]
	{
		msg->Format = CAN_DRIVER_ID_STANDARD;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	739a      	strb	r2, [r3, #14]
		msg->ID = (uint32_t) (0x000007FF) & (CAN1->sFIFOMailBox[FIFO_Number].RIR >> 21);
 80003ae:	4a41      	ldr	r2, [pc, #260]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 80003b0:	78bb      	ldrb	r3, [r7, #2]
 80003b2:	331b      	adds	r3, #27
 80003b4:	011b      	lsls	r3, r3, #4
 80003b6:	4413      	add	r3, r2
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	0d5b      	lsrs	r3, r3, #21
 80003bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	601a      	str	r2, [r3, #0]
		msg->Format = CAN_DRIVER_ID_EXTENDED;
		msg->ID = (uint32_t) (0x0003FFFF) & (CAN1->sFIFOMailBox[FIFO_Number].RIR >> 3);
	}

	/*Read the message format*/
	if ((CAN1->sFIFOMailBox[FIFO_Number].RIR & (CAN_DRIVER_DATA_FRAME << 1)) == 0x00)
 80003c4:	4a3b      	ldr	r2, [pc, #236]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 80003c6:	78bb      	ldrb	r3, [r7, #2]
 80003c8:	331b      	adds	r3, #27
 80003ca:	011b      	lsls	r3, r3, #4
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
	{
		msg->Payload_Type = CAN_DRIVER_DATA_FRAME;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2200      	movs	r2, #0
 80003d4:	735a      	strb	r2, [r3, #13]
	{
		msg->Payload_Type = CAN_DRIVER_REMOTE_FRAME;
	}

	/*Get message length*/
	msg->Length = (uint8_t) ((0x0000000F) & (CAN1->sFIFOMailBox[FIFO_Number].RDTR));
 80003d6:	4a37      	ldr	r2, [pc, #220]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 80003d8:	78bb      	ldrb	r3, [r7, #2]
 80003da:	331b      	adds	r3, #27
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	4413      	add	r3, r2
 80003e0:	3304      	adds	r3, #4
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f003 030f 	and.w	r3, r3, #15
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	731a      	strb	r2, [r3, #12]

	/*Get message lower part*/
	msg->Payload[0] = (uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDLR));
 80003f0:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 80003f2:	78bb      	ldrb	r3, [r7, #2]
 80003f4:	011b      	lsls	r3, r3, #4
 80003f6:	4413      	add	r3, r2
 80003f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	711a      	strb	r2, [r3, #4]
	msg->Payload[1] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDLR >> 8));
 8000404:	4a2b      	ldr	r2, [pc, #172]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 8000406:	78bb      	ldrb	r3, [r7, #2]
 8000408:	011b      	lsls	r3, r3, #4
 800040a:	4413      	add	r3, r2
 800040c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	b2da      	uxtb	r2, r3
	msg->Payload[1] =
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	715a      	strb	r2, [r3, #5]
	msg->Payload[2] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDLR >> 16));
 800041a:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 800041c:	78bb      	ldrb	r3, [r7, #2]
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	4413      	add	r3, r2
 8000422:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	0c1b      	lsrs	r3, r3, #16
 800042a:	b2da      	uxtb	r2, r3
	msg->Payload[2] =
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	719a      	strb	r2, [r3, #6]
	msg->Payload[3] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDLR >> 24));
 8000430:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 8000432:	78bb      	ldrb	r3, [r7, #2]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	0e1b      	lsrs	r3, r3, #24
 8000440:	b2da      	uxtb	r2, r3
	msg->Payload[3] =
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	71da      	strb	r2, [r3, #7]

	/*Get message higher part*/
	msg->Payload[4] = (uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDHR));
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 8000448:	78bb      	ldrb	r3, [r7, #2]
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	4413      	add	r3, r2
 800044e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	721a      	strb	r2, [r3, #8]
	msg->Payload[5] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDHR >> 8));
 800045a:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 800045c:	78bb      	ldrb	r3, [r7, #2]
 800045e:	011b      	lsls	r3, r3, #4
 8000460:	4413      	add	r3, r2
 8000462:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	0a1b      	lsrs	r3, r3, #8
 800046a:	b2da      	uxtb	r2, r3
	msg->Payload[5] =
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	725a      	strb	r2, [r3, #9]
	msg->Payload[6] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDHR >> 16));
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 8000472:	78bb      	ldrb	r3, [r7, #2]
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	4413      	add	r3, r2
 8000478:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	b2da      	uxtb	r2, r3
	msg->Payload[6] =
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	729a      	strb	r2, [r3, #10]
	msg->Payload[7] =
			(uint8_t) (0x000000FF & (CAN1->sFIFOMailBox[FIFO_Number].RDHR >> 24));
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <CAN_Driver_ReceiveMessage+0x128>)
 8000488:	78bb      	ldrb	r3, [r7, #2]
 800048a:	011b      	lsls	r3, r3, #4
 800048c:	4413      	add	r3, r2
 800048e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	0e1b      	lsrs	r3, r3, #24
 8000496:	b2da      	uxtb	r2, r3
	msg->Payload[7] =
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	72da      	strb	r2, [r3, #11]

	CAN_Driver_Release_Rx_MailBox(FIFO_Number);
 800049c:	78bb      	ldrb	r3, [r7, #2]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f962 	bl	8000768 <CAN_Driver_Release_Rx_MailBox>

	CAN_Driver_Clear_Request_Completed_Flag(MailBox_Number);
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f97a 	bl	80007a0 <CAN_Driver_Clear_Request_Completed_Flag>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40006400 	.word	0x40006400

080004b8 <CAN_Driver_SendMessage>:
	/*Reset master, enter to sleep mode. Bit is reseted to 0 by hardware*/
	CAN1->MCR |= CAN_DRIVER_RESET;
}

void CAN_Driver_SendMessage(CAN_Driver_Message *msg,uint8 MailBox_Number)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	/*Reset the transmission identifier register*/
	CAN1->sTxMailBox[MailBox_Number].TIR = (uint32_t) 0x00;
 80004c4:	4a5a      	ldr	r2, [pc, #360]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	3318      	adds	r3, #24
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]

	/*Set message ID and the IDE (identifier extension)*/
	if (msg->Format == CAN_DRIVER_ID_STANDARD)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	7b9b      	ldrb	r3, [r3, #14]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d110      	bne.n	80004fc <CAN_Driver_SendMessage+0x44>
	{
		CAN1->sTxMailBox[MailBox_Number].TIR |= (uint32_t) ((msg->ID << 21));
 80004da:	4855      	ldr	r0, [pc, #340]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	4954      	ldr	r1, [pc, #336]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	3218      	adds	r2, #24
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	440a      	add	r2, r1
 80004e8:	6811      	ldr	r1, [r2, #0]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	0552      	lsls	r2, r2, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	3318      	adds	r3, #24
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4403      	add	r3, r0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e015      	b.n	8000528 <CAN_Driver_SendMessage+0x70>
	}
	else if (msg->Format == CAN_DRIVER_ID_EXTENDED)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	7b9b      	ldrb	r3, [r3, #14]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d111      	bne.n	8000528 <CAN_Driver_SendMessage+0x70>
	{
		CAN1->sTxMailBox[MailBox_Number].TIR |= (uint32_t) ((msg->ID << 3)
 8000504:	484a      	ldr	r0, [pc, #296]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	4949      	ldr	r1, [pc, #292]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 800050a:	78fa      	ldrb	r2, [r7, #3]
 800050c:	3218      	adds	r2, #24
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	440a      	add	r2, r1
 8000512:	6811      	ldr	r1, [r2, #0]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	00d2      	lsls	r2, r2, #3
 800051a:	430a      	orrs	r2, r1
 800051c:	f042 0204 	orr.w	r2, r2, #4
 8000520:	3318      	adds	r3, #24
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	4403      	add	r3, r0
 8000526:	601a      	str	r2, [r3, #0]
				| (CAN_DRIVER_ID_EXTENDED << 2));
	}

	/*Set message type (Data or Remote frame)*/
	if (msg->Payload_Type == CAN_DRIVER_DATA_FRAME)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7b5b      	ldrb	r3, [r3, #13]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10c      	bne.n	800054a <CAN_Driver_SendMessage+0x92>
	{
		CAN1->sTxMailBox[MailBox_Number].TIR |= (CAN_DRIVER_DATA_FRAME << 1);
 8000530:	493f      	ldr	r1, [pc, #252]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	483e      	ldr	r0, [pc, #248]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000536:	78fa      	ldrb	r2, [r7, #3]
 8000538:	3218      	adds	r2, #24
 800053a:	0112      	lsls	r2, r2, #4
 800053c:	4402      	add	r2, r0
 800053e:	6812      	ldr	r2, [r2, #0]
 8000540:	3318      	adds	r3, #24
 8000542:	011b      	lsls	r3, r3, #4
 8000544:	440b      	add	r3, r1
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	e011      	b.n	800056e <CAN_Driver_SendMessage+0xb6>
	}
	else if (msg->Payload_Type == CAN_DRIVER_REMOTE_FRAME)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7b5b      	ldrb	r3, [r3, #13]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10d      	bne.n	800056e <CAN_Driver_SendMessage+0xb6>
	{
		CAN1->sTxMailBox[MailBox_Number].TIR |= (CAN_DRIVER_REMOTE_FRAME << 1);
 8000552:	4937      	ldr	r1, [pc, #220]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	4836      	ldr	r0, [pc, #216]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000558:	78fa      	ldrb	r2, [r7, #3]
 800055a:	3218      	adds	r2, #24
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	4402      	add	r2, r0
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	f042 0202 	orr.w	r2, r2, #2
 8000566:	3318      	adds	r3, #24
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	440b      	add	r3, r1
 800056c:	601a      	str	r2, [r3, #0]
	}

	/*Set the payload (lower part)*/

	CAN1->sTxMailBox[MailBox_Number].TDLR = (((uint32_t) msg->Payload[3] << 24)
 800056e:	4830      	ldr	r0, [pc, #192]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	79d2      	ldrb	r2, [r2, #7]
 8000576:	0611      	lsls	r1, r2, #24
			| ((uint32_t) msg->Payload[2] << 16)
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7992      	ldrb	r2, [r2, #6]
 800057c:	0412      	lsls	r2, r2, #16
 800057e:	4311      	orrs	r1, r2
			| ((uint32_t) msg->Payload[1] << 8) | (uint32_t) msg->Payload[0]);
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	7952      	ldrb	r2, [r2, #5]
 8000584:	0212      	lsls	r2, r2, #8
 8000586:	430a      	orrs	r2, r1
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	7909      	ldrb	r1, [r1, #4]
 800058c:	430a      	orrs	r2, r1
	CAN1->sTxMailBox[MailBox_Number].TDLR = (((uint32_t) msg->Payload[3] << 24)
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	4403      	add	r3, r0
 8000592:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000596:	601a      	str	r2, [r3, #0]

	/*Set the payload (upper part)*/

	CAN1->sTxMailBox[MailBox_Number].TDHR = (((uint32_t) msg->Payload[7] << 24)
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7ad2      	ldrb	r2, [r2, #11]
 80005a0:	0611      	lsls	r1, r2, #24
			| ((uint32_t) msg->Payload[6] << 16)
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7a92      	ldrb	r2, [r2, #10]
 80005a6:	0412      	lsls	r2, r2, #16
 80005a8:	4311      	orrs	r1, r2
			| ((uint32_t) msg->Payload[5] << 8) | (uint32_t) msg->Payload[4]);
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	7a52      	ldrb	r2, [r2, #9]
 80005ae:	0212      	lsls	r2, r2, #8
 80005b0:	430a      	orrs	r2, r1
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	7a09      	ldrb	r1, [r1, #8]
 80005b6:	430a      	orrs	r2, r1
	CAN1->sTxMailBox[MailBox_Number].TDHR = (((uint32_t) msg->Payload[7] << 24)
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	4403      	add	r3, r0
 80005bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80005c0:	601a      	str	r2, [r3, #0]

	/*Clear the message Length*/
	CAN1->sTxMailBox[MailBox_Number].TDTR &= ~((uint32) 0x0F);
 80005c2:	491b      	ldr	r1, [pc, #108]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80005c4:	78fb      	ldrb	r3, [r7, #3]
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80005c8:	78fa      	ldrb	r2, [r7, #3]
 80005ca:	3218      	adds	r2, #24
 80005cc:	0112      	lsls	r2, r2, #4
 80005ce:	4402      	add	r2, r0
 80005d0:	3204      	adds	r2, #4
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	f022 020f 	bic.w	r2, r2, #15
 80005d8:	3318      	adds	r3, #24
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	440b      	add	r3, r1
 80005de:	3304      	adds	r3, #4
 80005e0:	601a      	str	r2, [r3, #0]

	/*Set the message Length*/
	CAN1->sTxMailBox[MailBox_Number].TDTR |= (msg->Length & ((uint32) 0x0F));
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	4912      	ldr	r1, [pc, #72]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 80005e8:	78fa      	ldrb	r2, [r7, #3]
 80005ea:	3218      	adds	r2, #24
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	440a      	add	r2, r1
 80005f0:	3204      	adds	r2, #4
 80005f2:	6811      	ldr	r1, [r2, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	7b12      	ldrb	r2, [r2, #12]
 80005f8:	f002 020f 	and.w	r2, r2, #15
 80005fc:	430a      	orrs	r2, r1
 80005fe:	3318      	adds	r3, #24
 8000600:	011b      	lsls	r3, r3, #4
 8000602:	4403      	add	r3, r0
 8000604:	3304      	adds	r3, #4
 8000606:	601a      	str	r2, [r3, #0]

	/*Set the Transmit Mailbox Empty interrupt*/
	/*CANx->IER|=(CAN_IER_TMEIE);*/

	/*Request the transmission of the data*/
	CAN1->sTxMailBox[MailBox_Number].TIR |= CAN_TI0R_TXRQ;
 8000608:	4909      	ldr	r1, [pc, #36]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <CAN_Driver_SendMessage+0x178>)
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	3218      	adds	r2, #24
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	4402      	add	r2, r0
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	f042 0201 	orr.w	r2, r2, #1
 800061c:	3318      	adds	r3, #24
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	440b      	add	r3, r1
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40006400 	.word	0x40006400

08000634 <CAN_Driver_SetFilter>:

void CAN_Driver_SetFilter(uint32 ID)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	static uint8 CAN_ID_index = 0x00;
	uint32_t CAN_Msg_ID = 0x00;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

	/*Bits 27:14 are available in connectivity line devices only and are reserved otherwise.*/
	/*Because the MCU is not a connectivity line device if a greater value then 13 is requested the function will stop
	 the configuration here.*/
	if (CAN_ID_index > 13)
 8000640:	4b38      	ldr	r3, [pc, #224]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d868      	bhi.n	800071a <CAN_Driver_SetFilter+0xe6>
		return;
	}

	/*Set the ID's after the  mailbox identifier registers format*/
#if(CAN_DRIVER_SELECTED_ID_FORMAT==CAN_DRIVER_ID_STANDARD)
	CAN_Msg_ID |= (uint32_t) (ID << 21);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	055b      	lsls	r3, r3, #21
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	4313      	orrs	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
	CAN_Msg_ID|=(uint32_t)((ID<<3)|(0x01<<2));

#endif

	/*Set Filter banks in Initialization mode*/
	CAN1->FMR |= CAN_DRIVER_FILTER_BANK_INITIALIZATION_MODE;
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Deactivate filter bank*/
	CAN1->FA1R &= (~((uint32_t) (1 << CAN_ID_index)));
 8000662:	4931      	ldr	r1, [pc, #196]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000664:	4b30      	ldr	r3, [pc, #192]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000666:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	2301      	movs	r3, #1
 8000672:	4083      	lsls	r3, r0
 8000674:	43db      	mvns	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	/*Set filter bank in list mode (each bit must match)*/
	CAN1->FM1R |= (uint32_t) (1 << CAN_ID_index);
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000680:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000684:	4927      	ldr	r1, [pc, #156]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 8000686:	7809      	ldrb	r1, [r1, #0]
 8000688:	4608      	mov	r0, r1
 800068a:	2101      	movs	r1, #1
 800068c:	4081      	lsls	r1, r0
 800068e:	430b      	orrs	r3, r1
 8000690:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	/*Set the filter bank to single 32-bit scale configuration*/
	CAN1->FS1R |= (uint32_t) (1 << CAN_ID_index);
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000698:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800069c:	4921      	ldr	r1, [pc, #132]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 800069e:	7809      	ldrb	r1, [r1, #0]
 80006a0:	4608      	mov	r0, r1
 80006a2:	2101      	movs	r1, #1
 80006a4:	4081      	lsls	r1, r0
 80006a6:	430b      	orrs	r3, r1
 80006a8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	/*Set the ID in the filter bank and in the mask to (in list mode the mask register can be used to)*/
	CAN1->sFilterRegister[CAN_ID_index].FR1 = CAN_Msg_ID;
 80006ac:	491e      	ldr	r1, [pc, #120]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3348      	adds	r3, #72	; 0x48
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	CAN1->sFilterRegister[CAN_ID_index].FR2 = 0x00;
 80006ba:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3348      	adds	r3, #72	; 0x48
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4413      	add	r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]

	/*Assign to FIFO0-0, FIFO1-1 (FIFO0 in our case) */
	CAN1->FFA1R &= ~(uint32_t) (1 << CAN_ID_index);
 80006ca:	4917      	ldr	r1, [pc, #92]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	2301      	movs	r3, #1
 80006da:	4083      	lsls	r3, r0
 80006dc:	43db      	mvns	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214

	/*Activate Filter Bank*/
	CAN1->FA1R |= ((uint32_t) (1 << CAN_ID_index));
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006e8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80006ec:	490d      	ldr	r1, [pc, #52]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 80006ee:	7809      	ldrb	r1, [r1, #0]
 80006f0:	4608      	mov	r0, r1
 80006f2:	2101      	movs	r1, #1
 80006f4:	4081      	lsls	r1, r0
 80006f6:	430b      	orrs	r3, r1
 80006f8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/*Set Filter banks in Active mode*/
	CAN1->FMR &= CAN_DRIVER_FILTER_BANK_ACTIVE_MODE;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <CAN_Driver_SetFilter+0xf4>)
 8000700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000704:	f023 0301 	bic.w	r3, r3, #1
 8000708:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Increase filter index*/
	CAN_ID_index++;
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <CAN_Driver_SetFilter+0xf0>)
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e000      	b.n	800071c <CAN_Driver_SetFilter+0xe8>
		return;
 800071a:	bf00      	nop
}
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000098 	.word	0x20000098
 8000728:	40006400 	.word	0x40006400

0800072c <CAN_Driver_SetTestMode>:

void CAN_Driver_SetTestMode()
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	CAN1->BTR &= ~(CAN_DRIVER_DEBUG_SILENT_MODE
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <CAN_Driver_SetTestMode+0x24>)
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <CAN_Driver_SetTestMode+0x24>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800073a:	61d3      	str	r3, [r2, #28]
#if (CAN_DRIVER_TEST_MODE_SILENT == OK)
	CAN1->BTR|=CAN_DRIVER_DEBUG_SILENT_MODE;
#endif

#if (CAN_DRIVER_TEST_MODE_LOOP_BACK == OK)
	CAN1->BTR |= CAN_DRIVER_DEBUG_LOOP_BACK_MODE;
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <CAN_Driver_SetTestMode+0x24>)
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <CAN_Driver_SetTestMode+0x24>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000746:	61d3      	str	r3, [r2, #28]
#endif

#if(CAN_DRIVER_TEST_MODE_SILENT_AND_LOOP_BACK == OK)
	CAN1->BTR|=(CAN_DRIVER_DEBUG_SILENT_MODE|CAN_DRIVER_DEBUG_LOOP_BACK_MODE);
#endif
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40006400 	.word	0x40006400

08000754 <CAN_Driver_Start>:

void CAN_Driver_Start()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	CAN_Driver_StateSetters[CAN_DRIVER_OPERATING_MODE_NORMAL]();
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <CAN_Driver_Start+0x10>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4798      	blx	r3
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000000 	.word	0x20000000

08000768 <CAN_Driver_Release_Rx_MailBox>:

void CAN_Driver_Release_Rx_MailBox(uint8 FIFO_Number)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if (FIFO_Number == CAN_Driver_FIFO_0)
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d106      	bne.n	8000786 <CAN_Driver_Release_Rx_MailBox+0x1e>
	{
		/*Release FIFO 0 output mailbox*/
		CAN1->RF0R |= CAN_DRIVER_RELEASE_FIFO_MAILBOX;
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <CAN_Driver_Release_Rx_MailBox+0x34>)
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <CAN_Driver_Release_Rx_MailBox+0x34>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	60d3      	str	r3, [r2, #12]
	else
	{
		/*Release FIFO 1 output mailbox*/
		CAN1->RF1R |= CAN_DRIVER_RELEASE_FIFO_MAILBOX;
	}
}
 8000784:	e005      	b.n	8000792 <CAN_Driver_Release_Rx_MailBox+0x2a>
		CAN1->RF1R |= CAN_DRIVER_RELEASE_FIFO_MAILBOX;
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <CAN_Driver_Release_Rx_MailBox+0x34>)
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <CAN_Driver_Release_Rx_MailBox+0x34>)
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	6113      	str	r3, [r2, #16]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40006400 	.word	0x40006400

080007a0 <CAN_Driver_Clear_Request_Completed_Flag>:

void CAN_Driver_Clear_Request_Completed_Flag(uint8 MailBox_Number)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	if (MailBox_Number == CAN_Driver_MailBox_0)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <CAN_Driver_Clear_Request_Completed_Flag+0x1e>
	{
		/*Clear Request completed flag in MailBox 0*/
		CAN1->TSR |= CAN_TSR_RQCP0;
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6093      	str	r3, [r2, #8]
	{
		/*Clear Request completed flag in MailBox 2*/
		CAN1->TSR |= CAN_TSR_RQCP2;
	}

}
 80007bc:	e00f      	b.n	80007de <CAN_Driver_Clear_Request_Completed_Flag+0x3e>
	else if (MailBox_Number == CAN_Driver_MailBox_1)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d106      	bne.n	80007d2 <CAN_Driver_Clear_Request_Completed_Flag+0x32>
		CAN1->TSR |= CAN_TSR_RQCP1;
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ce:	6093      	str	r3, [r2, #8]
}
 80007d0:	e005      	b.n	80007de <CAN_Driver_Clear_Request_Completed_Flag+0x3e>
		CAN1->TSR |= CAN_TSR_RQCP2;
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <CAN_Driver_Clear_Request_Completed_Flag+0x48>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	6093      	str	r3, [r2, #8]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40006400 	.word	0x40006400

080007ec <CAN_Driver_Check_Message_Pending>:

uint8 CAN_Driver_Check_Message_Pending(uint8 FIFO_Number)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	uint8 result = 0x00;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

	switch (FIFO_Number)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <CAN_Driver_Check_Message_Pending+0x1a>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d00c      	beq.n	800081e <CAN_Driver_Check_Message_Pending+0x32>
 8000804:	e017      	b.n	8000836 <CAN_Driver_Check_Message_Pending+0x4a>
	{
	case CAN_Driver_FIFO_0:
		if ((CAN1->RF0R & 0x03) != NOK)
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <CAN_Driver_Check_Message_Pending+0x5c>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d002      	beq.n	8000818 <CAN_Driver_Check_Message_Pending+0x2c>
		{
			result = SUCCES;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
		}
		else
		{
			result = FAILED;
		}
		break;
 8000816:	e011      	b.n	800083c <CAN_Driver_Check_Message_Pending+0x50>
			result = FAILED;
 8000818:	2301      	movs	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
		break;
 800081c:	e00e      	b.n	800083c <CAN_Driver_Check_Message_Pending+0x50>
	case CAN_Driver_FIFO_1:
		if ((CAN1->RF1R & 0x03) != NOK)
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <CAN_Driver_Check_Message_Pending+0x5c>)
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	f003 0303 	and.w	r3, r3, #3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <CAN_Driver_Check_Message_Pending+0x44>
		{
			result = SUCCES;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
		}
		else
		{
			result = FAILED;
		}
		break;
 800082e:	e005      	b.n	800083c <CAN_Driver_Check_Message_Pending+0x50>
			result = FAILED;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
		break;
 8000834:	e002      	b.n	800083c <CAN_Driver_Check_Message_Pending+0x50>
	default:
		result = FAILED;
 8000836:	2301      	movs	r3, #1
 8000838:	73fb      	strb	r3, [r7, #15]
		break;
 800083a:	bf00      	nop
	}

	return result;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40006400 	.word	0x40006400

0800084c <CAN_Driver_Wait_for_Ready>:

void CAN_Driver_Wait_for_Ready()
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
#if (CAN_DRIVER_USE_MAILBOX_0 == OK)
	/*This bit is set by hardware when no transmit request is pending for mailbox */
	while ((CAN1->TSR & CAN_DRIVER_TRANSMIT_MAILBOX0_EMPTY) == 0x00)
 8000850:	bf00      	nop
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <CAN_Driver_Wait_for_Ready+0x1c>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <CAN_Driver_Wait_for_Ready+0x6>
	while((CAN1->TSR & CAN_DRIVER_TRANSMIT_MAILBOX2_EMPTY)==0x00)
	{}
	CAN_Driver_Tx_global_status->CAN_Driver_Tx2_Ready = 0x01;
#endif

}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40006400 	.word	0x40006400

0800086c <GPIO_Driver_Init>:
#include "GPIO_Driver_Cfg.h"


/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 800086c:	b4f0      	push	{r4, r5, r6, r7}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 8000872:	2300      	movs	r3, #0
 8000874:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 8000876:	2300      	movs	r3, #0
 8000878:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 800087a:	4a9e      	ldr	r2, [pc, #632]	; (8000af4 <GPIO_Driver_Init+0x288>)
 800087c:	4b9d      	ldr	r3, [pc, #628]	; (8000af4 <GPIO_Driver_Init+0x288>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6193      	str	r3, [r2, #24]
	#endif
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 8000886:	2300      	movs	r3, #0
 8000888:	80fb      	strh	r3, [r7, #6]
 800088a:	e129      	b.n	8000ae0 <GPIO_Driver_Init+0x274>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 800088c:	2300      	movs	r3, #0
 800088e:	80bb      	strh	r3, [r7, #4]
 8000890:	e117      	b.n	8000ac2 <GPIO_Driver_Init+0x256>
		{
			if((GPIO_SETUP[index].GPIO_Pins[index1])<0x08)
 8000892:	4b99      	ldr	r3, [pc, #612]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	441a      	add	r2, r3
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	88db      	ldrh	r3, [r3, #6]
 80008a8:	2b07      	cmp	r3, #7
 80008aa:	f200 8082 	bhi.w	80009b2 <GPIO_Driver_Init+0x146>
			{
				/*The first step is to clear the default setting*/
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80008ae:	4b92      	ldr	r3, [pc, #584]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	2168      	movs	r1, #104	; 0x68
 80008b6:	fb01 f303 	mul.w	r3, r1, r3
 80008ba:	4413      	add	r3, r2
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b8e      	ldr	r3, [pc, #568]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	2068      	movs	r0, #104	; 0x68
 80008c6:	fb00 f303 	mul.w	r3, r0, r3
 80008ca:	440b      	add	r3, r1
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6819      	ldr	r1, [r3, #0]
 80008d0:	4b89      	ldr	r3, [pc, #548]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	2468      	movs	r4, #104	; 0x68
 80008d8:	fb04 f303 	mul.w	r3, r4, r3
 80008dc:	4418      	add	r0, r3
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	4403      	add	r3, r0
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	2003      	movs	r0, #3
 80008ea:	fa00 f303 	lsl.w	r3, r0, r3
 80008ee:	461d      	mov	r5, r3
							  	  	  	  	  	  	  ((uint32)(0x03 <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))))));
 80008f0:	4b81      	ldr	r3, [pc, #516]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	88fb      	ldrh	r3, [r7, #6]
 80008f6:	2468      	movs	r4, #104	; 0x68
 80008f8:	fb04 f303 	mul.w	r3, r4, r3
 80008fc:	4418      	add	r0, r3
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4403      	add	r3, r0
 8000904:	88db      	ldrh	r3, [r3, #6]
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	3302      	adds	r3, #2
 800090a:	2003      	movs	r0, #3
 800090c:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000910:	432b      	orrs	r3, r5
 8000912:	43db      	mvns	r3, r3
 8000914:	400b      	ands	r3, r1
 8000916:	6013      	str	r3, [r2, #0]
				/*Set the GPIO configuration*/
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000918:	4b77      	ldr	r3, [pc, #476]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	2168      	movs	r1, #104	; 0x68
 8000920:	fb01 f303 	mul.w	r3, r1, r3
 8000924:	4413      	add	r3, r2
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b73      	ldr	r3, [pc, #460]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	2068      	movs	r0, #104	; 0x68
 8000930:	fb00 f303 	mul.w	r3, r0, r3
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2468      	movs	r4, #104	; 0x68
 8000942:	fb04 f303 	mul.w	r3, r4, r3
 8000946:	4418      	add	r0, r3
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	3310      	adds	r3, #16
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4403      	add	r3, r0
 8000950:	88db      	ldrh	r3, [r3, #6]
 8000952:	461d      	mov	r5, r3
 8000954:	4b68      	ldr	r3, [pc, #416]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2468      	movs	r4, #104	; 0x68
 800095c:	fb04 f303 	mul.w	r3, r4, r3
 8000960:	4418      	add	r0, r3
 8000962:	88bb      	ldrh	r3, [r7, #4]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4403      	add	r3, r0
 8000968:	88db      	ldrh	r3, [r3, #6]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	fa05 f303 	lsl.w	r3, r5, r3
 8000970:	461d      	mov	r5, r3
													((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))));
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	2468      	movs	r4, #104	; 0x68
 800097a:	fb04 f303 	mul.w	r3, r4, r3
 800097e:	4418      	add	r0, r3
 8000980:	88bb      	ldrh	r3, [r7, #4]
 8000982:	3320      	adds	r3, #32
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4403      	add	r3, r0
 8000988:	88db      	ldrh	r3, [r3, #6]
 800098a:	461e      	mov	r6, r3
 800098c:	4b5a      	ldr	r3, [pc, #360]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	88fb      	ldrh	r3, [r7, #6]
 8000992:	2468      	movs	r4, #104	; 0x68
 8000994:	fb04 f303 	mul.w	r3, r4, r3
 8000998:	4418      	add	r0, r3
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4403      	add	r3, r0
 80009a0:	88db      	ldrh	r3, [r3, #6]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	3302      	adds	r3, #2
 80009a6:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80009aa:	432b      	orrs	r3, r5
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	e084      	b.n	8000abc <GPIO_Driver_Init+0x250>
			}
			else
			{
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80009b2:	4b51      	ldr	r3, [pc, #324]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	2168      	movs	r1, #104	; 0x68
 80009ba:	fb01 f303 	mul.w	r3, r1, r3
 80009be:	4413      	add	r3, r2
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	4b4d      	ldr	r3, [pc, #308]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80009c4:	6819      	ldr	r1, [r3, #0]
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2068      	movs	r0, #104	; 0x68
 80009ca:	fb00 f303 	mul.w	r3, r0, r3
 80009ce:	440b      	add	r3, r1
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6859      	ldr	r1, [r3, #4]
 80009d4:	4b48      	ldr	r3, [pc, #288]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	2468      	movs	r4, #104	; 0x68
 80009dc:	fb04 f303 	mul.w	r3, r4, r3
 80009e0:	4418      	add	r0, r3
 80009e2:	88bb      	ldrh	r3, [r7, #4]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4403      	add	r3, r0
 80009e8:	88db      	ldrh	r3, [r3, #6]
 80009ea:	3b08      	subs	r3, #8
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	2003      	movs	r0, #3
 80009f0:	fa00 f303 	lsl.w	r3, r0, r3
 80009f4:	461d      	mov	r5, r3
				              	  	  	  	  	  	((uint32)(0x03 <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))))));
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2468      	movs	r4, #104	; 0x68
 80009fe:	fb04 f303 	mul.w	r3, r4, r3
 8000a02:	4418      	add	r0, r3
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4403      	add	r3, r0
 8000a0a:	88db      	ldrh	r3, [r3, #6]
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	2003      	movs	r0, #3
 8000a14:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000a18:	432b      	orrs	r3, r5
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	400b      	ands	r3, r1
 8000a1e:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	2168      	movs	r1, #104	; 0x68
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	2068      	movs	r0, #104	; 0x68
 8000a38:	fb00 f303 	mul.w	r3, r0, r3
 8000a3c:	440b      	add	r3, r1
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6859      	ldr	r1, [r3, #4]
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2468      	movs	r4, #104	; 0x68
 8000a4a:	fb04 f303 	mul.w	r3, r4, r3
 8000a4e:	4418      	add	r0, r3
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	3310      	adds	r3, #16
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4403      	add	r3, r0
 8000a58:	88db      	ldrh	r3, [r3, #6]
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	2468      	movs	r4, #104	; 0x68
 8000a64:	fb04 f303 	mul.w	r3, r4, r3
 8000a68:	4418      	add	r0, r3
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4403      	add	r3, r0
 8000a70:	88db      	ldrh	r3, [r3, #6]
 8000a72:	3b08      	subs	r3, #8
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa05 f303 	lsl.w	r3, r5, r3
 8000a7a:	461d      	mov	r5, r3
							  	  	  	  	  	    ((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))));
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	2468      	movs	r4, #104	; 0x68
 8000a84:	fb04 f303 	mul.w	r3, r4, r3
 8000a88:	4418      	add	r0, r3
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	3320      	adds	r3, #32
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4403      	add	r3, r0
 8000a92:	88db      	ldrh	r3, [r3, #6]
 8000a94:	461e      	mov	r6, r3
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2468      	movs	r4, #104	; 0x68
 8000a9e:	fb04 f303 	mul.w	r3, r4, r3
 8000aa2:	4418      	add	r0, r3
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4403      	add	r3, r0
 8000aaa:	88db      	ldrh	r3, [r3, #6]
 8000aac:	3b08      	subs	r3, #8
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000ab6:	432b      	orrs	r3, r5
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6053      	str	r3, [r2, #4]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 8000abc:	88bb      	ldrh	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	80bb      	strh	r3, [r7, #4]
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <GPIO_Driver_Init+0x28c>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	2168      	movs	r1, #104	; 0x68
 8000aca:	fb01 f303 	mul.w	r3, r1, r3
 8000ace:	4413      	add	r3, r2
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	88ba      	ldrh	r2, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f4ff aedc 	bcc.w	8000892 <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	3301      	adds	r3, #1
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f43f aed2 	beq.w	800088c <GPIO_Driver_Init+0x20>
			}
		}
	}
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bcf0      	pop	{r4, r5, r6, r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000
 8000af8:	20000074 	.word	0x20000074

08000afc <NVIC_Driver_SetInterrupt>:
 */

#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	460b      	mov	r3, r1
 8000b08:	71bb      	strb	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 8000b16:	230f      	movs	r3, #15
 8000b18:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <NVIC_Driver_SetInterrupt+0xb8>)
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 8000b36:	7b7a      	ldrb	r2, [r7, #13]
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	fa42 f303 	asr.w	r3, r2, r3
 8000b3e:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f1c3 0304 	rsb	r3, r3, #4
 8000b46:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 8000b48:	79ba      	ldrb	r2, [r7, #6]
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 8000b52:	797a      	ldrb	r2, [r7, #5]
 8000b54:	7b7b      	ldrb	r3, [r7, #13]
 8000b56:	4013      	ands	r3, r2
 8000b58:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 8000b5a:	7b3a      	ldrb	r2, [r7, #12]
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da08      	bge.n	8000b80 <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <NVIC_Driver_SetInterrupt+0xb8>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	7aba      	ldrb	r2, [r7, #10]
 8000b7c:	761a      	strb	r2, [r3, #24]
 8000b7e:	e006      	b.n	8000b8e <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <NVIC_Driver_SetInterrupt+0xbc>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	4413      	add	r3, r2
 8000b88:	7aba      	ldrb	r2, [r7, #10]
 8000b8a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <NVIC_Driver_SetInterrupt+0xbc>)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	115b      	asrs	r3, r3, #5
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 8000ba6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_Driver_Set_SYSTICK_Interrupt>:
	}
#endif

#if (NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE == OK)
	void NVIC_Driver_Set_SYSTICK_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
		/*Enable the Systick interrupt */
		SysTick->CTRL|=(0x01<<0x01);
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	6013      	str	r3, [r2, #0]
		NVIC_Driver_SetInterrupt(SysTick_IRQn,Preemption_priority,Sub_priority);
 8000c24:	79ba      	ldrb	r2, [r7, #6]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2e:	f7ff ff65 	bl	8000afc <NVIC_Driver_SetInterrupt>
	}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SysTick_Handler+0x20>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Handler+0x20>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <SysTick_Handler+0x20>)
 8000c54:	6013      	str	r3, [r2, #0]
	}
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	2000009c 	.word	0x2000009c

08000c64 <SYSTICK_Driver_Init>:

void SYSTICK_Driver_Init()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	/*Set the processor clock as the clock source */
	SysTick->CTRL|=(0x01<<0x02);
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SYSTICK_Driver_Init+0x30>)
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SYSTICK_Driver_Init+0x30>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6013      	str	r3, [r2, #0]
	#if(SYSTICK_DRIVER_ENABLE_INTERRUPT == OK)
		/*Set the timer interrupt and its priority and sub-priority*/
		NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f7ff ffa1 	bl	8000bbc <NVIC_Driver_PriorityGroupConfig>
		NVIC_Driver_Set_SYSTICK_Interrupt(0x0F,0x00);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	200f      	movs	r0, #15
 8000c7e:	f7ff ffc3 	bl	8000c08 <NVIC_Driver_Set_SYSTICK_Interrupt>
	#endif
	/*Init the Systick current value register*/
	SysTick->VAL = 0x00;
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SYSTICK_Driver_Init+0x30>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
	/*Set the load register with the configured value*/
	SysTick->LOAD = ((SYSTICK_DRIVER_LOAD & 0xFFFFFFUL)-1);
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <SYSTICK_Driver_Init+0x30>)
 8000c8a:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <SYSTICK_Driver_Init+0x34>)
 8000c8c:	605a      	str	r2, [r3, #4]
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010
 8000c98:	0001193f 	.word	0x0001193f

08000c9c <SYSTICK_Driver_Start>:

void SYSTICK_Driver_Start()
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	/*Enable the systick timer*/
	SysTick->CTRL|=0x01;
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <SYSTICK_Driver_Start+0x18>)
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SYSTICK_Driver_Start+0x18>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <SYSTICK_Driver_Delay_ms>:
}

#if (SYSTICK_DRIVER_LOAD == ((SYSTICK_DRIVER_WORKING_FREQUENCY)/1000))

void SYSTICK_Driver_Delay_ms(uint32 DelayInterval)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	Tick_Counter = DelayInterval;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <SYSTICK_Driver_Delay_ms+0x24>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
	while(Tick_Counter!=0x00){}
 8000cc6:	bf00      	nop
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SYSTICK_Driver_Delay_ms+0x24>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1fb      	bne.n	8000cc8 <SYSTICK_Driver_Delay_ms+0x10>
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000009c 	.word	0x2000009c

08000ce0 <main>:
CAN_Driver_Message TestPayload;
CAN_Driver_Message TestRxPayload;
uint8 tx_payload[] = {0xFF,0x12,0xBA};

int main()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	SYSTICK_Driver_Init();
 8000ce4:	f7ff ffbe 	bl	8000c64 <SYSTICK_Driver_Init>
	SYSTICK_Driver_Start();
 8000ce8:	f7ff ffd8 	bl	8000c9c <SYSTICK_Driver_Start>

	GPIO_Driver_Init();
 8000cec:	f7ff fdbe 	bl	800086c <GPIO_Driver_Init>

	CAN_Driver_Init();
 8000cf0:	f7ff fa84 	bl	80001fc <CAN_Driver_Init>
	CAN_Driver_SetFilter(0x01);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff fc9d 	bl	8000634 <CAN_Driver_SetFilter>
	CAN_Driver_InitBuffer(&TestPayload);
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <main+0x74>)
 8000cfc:	f7ff fad6 	bl	80002ac <CAN_Driver_InitBuffer>
	CAN_Driver_InitBuffer(&TestRxPayload);
 8000d00:	4815      	ldr	r0, [pc, #84]	; (8000d58 <main+0x78>)
 8000d02:	f7ff fad3 	bl	80002ac <CAN_Driver_InitBuffer>
	CAN_Driver_Start();
 8000d06:	f7ff fd25 	bl	8000754 <CAN_Driver_Start>

	TestPayload.ID = 0x01;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <main+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
	TestPayload.Format = CAN_DRIVER_ID_STANDARD;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <main+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	739a      	strb	r2, [r3, #14]
	TestPayload.Payload_Type = CAN_DRIVER_DATA_FRAME;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	735a      	strb	r2, [r3, #13]
	CAN_Driver_SetBuffer(&TestPayload,3,tx_payload);
 8000d1c:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <main+0x7c>)
 8000d1e:	2103      	movs	r1, #3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <main+0x74>)
 8000d22:	f7ff fadc 	bl	80002de <CAN_Driver_SetBuffer>

	while (1)
	{
		CAN_Driver_Wait_for_Ready();
 8000d26:	f7ff fd91 	bl	800084c <CAN_Driver_Wait_for_Ready>

		CAN_Driver_SendMessage(&TestPayload,CAN_Driver_MailBox_0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <main+0x74>)
 8000d2e:	f7ff fbc3 	bl	80004b8 <CAN_Driver_SendMessage>

		while (CAN_Driver_Check_Message_Pending(CAN_Driver_FIFO_0) == FAILED)
 8000d32:	bf00      	nop
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fd59 	bl	80007ec <CAN_Driver_Check_Message_Pending>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d0f9      	beq.n	8000d34 <main+0x54>
		{
			/*Do nothing*/
		}

		CAN_Driver_ReceiveMessage(&TestRxPayload,CAN_Driver_MailBox_0,CAN_Driver_FIFO_0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <main+0x78>)
 8000d46:	f7ff fb21 	bl	800038c <CAN_Driver_ReceiveMessage>

		SYSTICK_Driver_Delay_ms(200);
 8000d4a:	20c8      	movs	r0, #200	; 0xc8
 8000d4c:	f7ff ffb4 	bl	8000cb8 <SYSTICK_Driver_Delay_ms>
		CAN_Driver_Wait_for_Ready();
 8000d50:	e7e9      	b.n	8000d26 <main+0x46>
 8000d52:	bf00      	nop
 8000d54:	200000a0 	.word	0x200000a0
 8000d58:	200000b0 	.word	0x200000b0
 8000d5c:	20000078 	.word	0x20000078

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d66:	e003      	b.n	8000d70 <LoopCopyDataInit>

08000d68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000d6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d6e:	3104      	adds	r1, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000d74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d78:	d3f6      	bcc.n	8000d68 <CopyDataInit>
	ldr	r2, =_sbss
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000d7c:	e002      	b.n	8000d84 <LoopFillZerobss>

08000d7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d80:	f842 3b04 	str.w	r3, [r2], #4

08000d84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000d86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d88:	d3f9      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d8a:	f000 f813 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f000 f8cb 	bl	8000f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff ffa5 	bl	8000ce0 <main>
	bx	lr
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d98:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000d9c:	08000f90 	.word	0x08000f90
	ldr	r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da4:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000da8:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000dac:	200000c0 	.word	0x200000c0

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>
	...

08000db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000db8:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <SystemInit+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <SystemInit+0x5c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000dc4:	4912      	ldr	r1, [pc, #72]	; (8000e10 <SystemInit+0x5c>)
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <SystemInit+0x5c>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <SystemInit+0x60>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <SystemInit+0x5c>)
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <SystemInit+0x5c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <SystemInit+0x5c>)
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <SystemInit+0x5c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <SystemInit+0x5c>)
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x5c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000df6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SystemInit+0x5c>)
 8000dfa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000dfe:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000e00:	f000 f80c 	bl	8000e1c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SystemInit+0x64>)
 8000e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	f8ff0000 	.word	0xf8ff0000
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000e20:	f000 f802 	bl	8000e28 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e36:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <SetSysClockTo72+0x38>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e5e:	d1f0      	bne.n	8000e42 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	e001      	b.n	8000e76 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d14b      	bne.n	8000f14 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 0303 	bic.w	r3, r3, #3
 8000e92:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000e94:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <SetSysClockTo72+0xfc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000ec6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000ed2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ede:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ee0:	bf00      	nop
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f9      	beq.n	8000ee2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f023 0303 	bic.w	r3, r3, #3
 8000ef8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f06:	bf00      	nop
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SetSysClockTo72+0xf8>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d1f9      	bne.n	8000f08 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40022000 	.word	0x40022000

08000f28 <__libc_init_array>:
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	4e0c      	ldr	r6, [pc, #48]	; (8000f60 <__libc_init_array+0x38>)
 8000f2e:	4c0d      	ldr	r4, [pc, #52]	; (8000f64 <__libc_init_array+0x3c>)
 8000f30:	1ba4      	subs	r4, r4, r6
 8000f32:	10a4      	asrs	r4, r4, #2
 8000f34:	42a5      	cmp	r5, r4
 8000f36:	d109      	bne.n	8000f4c <__libc_init_array+0x24>
 8000f38:	f000 f81a 	bl	8000f70 <_init>
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	4e0a      	ldr	r6, [pc, #40]	; (8000f68 <__libc_init_array+0x40>)
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <__libc_init_array+0x44>)
 8000f42:	1ba4      	subs	r4, r4, r6
 8000f44:	10a4      	asrs	r4, r4, #2
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d105      	bne.n	8000f56 <__libc_init_array+0x2e>
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f50:	4798      	blx	r3
 8000f52:	3501      	adds	r5, #1
 8000f54:	e7ee      	b.n	8000f34 <__libc_init_array+0xc>
 8000f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5a:	4798      	blx	r3
 8000f5c:	3501      	adds	r5, #1
 8000f5e:	e7f2      	b.n	8000f46 <__libc_init_array+0x1e>
 8000f60:	08000f88 	.word	0x08000f88
 8000f64:	08000f88 	.word	0x08000f88
 8000f68:	08000f88 	.word	0x08000f88
 8000f6c:	08000f8c 	.word	0x08000f8c

08000f70 <_init>:
 8000f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f72:	bf00      	nop
 8000f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f76:	bc08      	pop	{r3}
 8000f78:	469e      	mov	lr, r3
 8000f7a:	4770      	bx	lr

08000f7c <_fini>:
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7e:	bf00      	nop
 8000f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f82:	bc08      	pop	{r3}
 8000f84:	469e      	mov	lr, r3
 8000f86:	4770      	bx	lr
