
103_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e8c  08000e8c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a8  20000000  08000e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  200000a8  08000f3c  000200a8  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000cc  08000f3c  000200cc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001e73  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000009a2  00000000  00000000  00021f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001e0  00000000  00000000  000228e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00022ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000011f1  00000000  00000000  00022c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000d49  00000000  00000000  00023e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024b52  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000524  00000000  00000000  00024bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08000e74 	.word	0x08000e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08000e74 	.word	0x08000e74

0800014c <ADC_Driver_Init>:
 */

#include "ADC_Driver_Cfg.h"

void ADC_Driver_Init()
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	80bb      	strh	r3, [r7, #4]

	#if ADC_DRIVER_ADC1 == OK
		RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 800015a:	4a88      	ldr	r2, [pc, #544]	; (800037c <ADC_Driver_Init+0x230>)
 800015c:	4b87      	ldr	r3, [pc, #540]	; (800037c <ADC_Driver_Init+0x230>)
 800015e:	699b      	ldr	r3, [r3, #24]
 8000160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000164:	6193      	str	r3, [r2, #24]
	#if ADC_DRIVER_ADC2 == OK
		RCC->APB2ENR|=RCC_APB2ENR_ADC2EN;
	#endif

	/*Stop all ADCs in case of initialization*/
	ADC1->CR2 &= ADC_DRIVER_OFF;
 8000166:	4a86      	ldr	r2, [pc, #536]	; (8000380 <ADC_Driver_Init+0x234>)
 8000168:	4b85      	ldr	r3, [pc, #532]	; (8000380 <ADC_Driver_Init+0x234>)
 800016a:	689b      	ldr	r3, [r3, #8]
 800016c:	f023 0301 	bic.w	r3, r3, #1
 8000170:	6093      	str	r3, [r2, #8]
	ADC2->CR2 &= ADC_DRIVER_OFF;
 8000172:	4a84      	ldr	r2, [pc, #528]	; (8000384 <ADC_Driver_Init+0x238>)
 8000174:	4b83      	ldr	r3, [pc, #524]	; (8000384 <ADC_Driver_Init+0x238>)
 8000176:	689b      	ldr	r3, [r3, #8]
 8000178:	f023 0301 	bic.w	r3, r3, #1
 800017c:	6093      	str	r3, [r2, #8]

	ADC_Driver_Set_Prescale_Value();
 800017e:	f000 fb21 	bl	80007c4 <ADC_Driver_Set_Prescale_Value>

	for(index=0x00;index<ADC_DRIVER_INSTANCE_NUM;index++)
 8000182:	2300      	movs	r3, #0
 8000184:	80fb      	strh	r3, [r7, #6]
 8000186:	e28e      	b.n	80006a6 <ADC_Driver_Init+0x55a>
	{
		/*Enable SWSTART as external trigger*/
		ADC_SETUP[index].ADC_Instance->CR2 |=ADC_DRIVER_EXTERNAL_TRIGGER_ENABLE|ADC_DRIVER_EXTERNAL_TRIGGER_SWSTART;
 8000188:	4b7f      	ldr	r3, [pc, #508]	; (8000388 <ADC_Driver_Init+0x23c>)
 800018a:	6819      	ldr	r1, [r3, #0]
 800018c:	88fa      	ldrh	r2, [r7, #6]
 800018e:	4613      	mov	r3, r2
 8000190:	00db      	lsls	r3, r3, #3
 8000192:	1a9b      	subs	r3, r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	440b      	add	r3, r1
 8000198:	6819      	ldr	r1, [r3, #0]
 800019a:	4b7b      	ldr	r3, [pc, #492]	; (8000388 <ADC_Driver_Init+0x23c>)
 800019c:	6818      	ldr	r0, [r3, #0]
 800019e:	88fa      	ldrh	r2, [r7, #6]
 80001a0:	4613      	mov	r3, r2
 80001a2:	00db      	lsls	r3, r3, #3
 80001a4:	1a9b      	subs	r3, r3, r2
 80001a6:	00db      	lsls	r3, r3, #3
 80001a8:	4403      	add	r3, r0
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	689b      	ldr	r3, [r3, #8]
 80001ae:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 80001b2:	608b      	str	r3, [r1, #8]

		if (ADC_SETUP[index].ADC_Single_Conversion == OK)
 80001b4:	4b74      	ldr	r3, [pc, #464]	; (8000388 <ADC_Driver_Init+0x23c>)
 80001b6:	6819      	ldr	r1, [r3, #0]
 80001b8:	88fa      	ldrh	r2, [r7, #6]
 80001ba:	4613      	mov	r3, r2
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	1a9b      	subs	r3, r3, r2
 80001c0:	00db      	lsls	r3, r3, #3
 80001c2:	440b      	add	r3, r1
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d116      	bne.n	80001f8 <ADC_Driver_Init+0xac>
		{
			/*In Single conversion mode the ADC does one conversion. This mode is started either by
			 setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
			 trigger (for a regular or injected channel), while the CONT bit is 0.*/

			ADC_SETUP[index].ADC_Instance->CR2 &= (~ADC_DRIVER_CONTINUOUS_CONVERSION);
 80001ca:	4b6f      	ldr	r3, [pc, #444]	; (8000388 <ADC_Driver_Init+0x23c>)
 80001cc:	6819      	ldr	r1, [r3, #0]
 80001ce:	88fa      	ldrh	r2, [r7, #6]
 80001d0:	4613      	mov	r3, r2
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	1a9b      	subs	r3, r3, r2
 80001d6:	00db      	lsls	r3, r3, #3
 80001d8:	440b      	add	r3, r1
 80001da:	6819      	ldr	r1, [r3, #0]
 80001dc:	4b6a      	ldr	r3, [pc, #424]	; (8000388 <ADC_Driver_Init+0x23c>)
 80001de:	6818      	ldr	r0, [r3, #0]
 80001e0:	88fa      	ldrh	r2, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	1a9b      	subs	r3, r3, r2
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	4403      	add	r3, r0
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	f023 0302 	bic.w	r3, r3, #2
 80001f4:	608b      	str	r3, [r1, #8]
 80001f6:	e020      	b.n	800023a <ADC_Driver_Init+0xee>

		}
		else if (ADC_SETUP[index].ADC_Single_Conversion == NOK)
 80001f8:	4b63      	ldr	r3, [pc, #396]	; (8000388 <ADC_Driver_Init+0x23c>)
 80001fa:	6819      	ldr	r1, [r3, #0]
 80001fc:	88fa      	ldrh	r2, [r7, #6]
 80001fe:	4613      	mov	r3, r2
 8000200:	00db      	lsls	r3, r3, #3
 8000202:	1a9b      	subs	r3, r3, r2
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	440b      	add	r3, r1
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d115      	bne.n	800023a <ADC_Driver_Init+0xee>
		{
			ADC_SETUP[index].ADC_Instance->CR2 |= ADC_DRIVER_CONTINUOUS_CONVERSION;
 800020e:	4b5e      	ldr	r3, [pc, #376]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000210:	6819      	ldr	r1, [r3, #0]
 8000212:	88fa      	ldrh	r2, [r7, #6]
 8000214:	4613      	mov	r3, r2
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	1a9b      	subs	r3, r3, r2
 800021a:	00db      	lsls	r3, r3, #3
 800021c:	440b      	add	r3, r1
 800021e:	6819      	ldr	r1, [r3, #0]
 8000220:	4b59      	ldr	r3, [pc, #356]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000222:	6818      	ldr	r0, [r3, #0]
 8000224:	88fa      	ldrh	r2, [r7, #6]
 8000226:	4613      	mov	r3, r2
 8000228:	00db      	lsls	r3, r3, #3
 800022a:	1a9b      	subs	r3, r3, r2
 800022c:	00db      	lsls	r3, r3, #3
 800022e:	4403      	add	r3, r0
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	608b      	str	r3, [r1, #8]
			/*Nothing to do*/
		}

		/*Set the alignment*/

		ADC_SETUP[index].ADC_Instance->CR2|=ADC_SETUP[index].ADC_Alignment;
 800023a:	4b53      	ldr	r3, [pc, #332]	; (8000388 <ADC_Driver_Init+0x23c>)
 800023c:	6819      	ldr	r1, [r3, #0]
 800023e:	88fa      	ldrh	r2, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	1a9b      	subs	r3, r3, r2
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	440b      	add	r3, r1
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	4b4e      	ldr	r3, [pc, #312]	; (8000388 <ADC_Driver_Init+0x23c>)
 800024e:	6818      	ldr	r0, [r3, #0]
 8000250:	88fa      	ldrh	r2, [r7, #6]
 8000252:	4613      	mov	r3, r2
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	1a9b      	subs	r3, r3, r2
 8000258:	00db      	lsls	r3, r3, #3
 800025a:	4403      	add	r3, r0
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6898      	ldr	r0, [r3, #8]
 8000260:	4b49      	ldr	r3, [pc, #292]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000262:	681c      	ldr	r4, [r3, #0]
 8000264:	88fa      	ldrh	r2, [r7, #6]
 8000266:	4613      	mov	r3, r2
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	1a9b      	subs	r3, r3, r2
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	4423      	add	r3, r4
 8000270:	691b      	ldr	r3, [r3, #16]
 8000272:	4303      	orrs	r3, r0
 8000274:	608b      	str	r3, [r1, #8]

		if (ADC_SETUP[index].ADC_Discontinuous_Mode == OK)
 8000276:	4b44      	ldr	r3, [pc, #272]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000278:	6819      	ldr	r1, [r3, #0]
 800027a:	88fa      	ldrh	r2, [r7, #6]
 800027c:	4613      	mov	r3, r2
 800027e:	00db      	lsls	r3, r3, #3
 8000280:	1a9b      	subs	r3, r3, r2
 8000282:	00db      	lsls	r3, r3, #3
 8000284:	440b      	add	r3, r1
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d115      	bne.n	80002b8 <ADC_Driver_Init+0x16c>
	  		  sequentially one by one after the order given in SQRx.
	  		  If DISCNUM=0x00, only one channel will be read at once,
	  		  otherwise (DISCNUM=n) n reads will be made.
			 */

			ADC_SETUP[index].ADC_Instance->CR1|=ADC_DRIVER_DISCONTINUOUS_MODE_ENABLE;
 800028c:	4b3e      	ldr	r3, [pc, #248]	; (8000388 <ADC_Driver_Init+0x23c>)
 800028e:	6819      	ldr	r1, [r3, #0]
 8000290:	88fa      	ldrh	r2, [r7, #6]
 8000292:	4613      	mov	r3, r2
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	1a9b      	subs	r3, r3, r2
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	440b      	add	r3, r1
 800029c:	6819      	ldr	r1, [r3, #0]
 800029e:	4b3a      	ldr	r3, [pc, #232]	; (8000388 <ADC_Driver_Init+0x23c>)
 80002a0:	6818      	ldr	r0, [r3, #0]
 80002a2:	88fa      	ldrh	r2, [r7, #6]
 80002a4:	4613      	mov	r3, r2
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	1a9b      	subs	r3, r3, r2
 80002aa:	00db      	lsls	r3, r3, #3
 80002ac:	4403      	add	r3, r0
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002b6:	604b      	str	r3, [r1, #4]

		}

		/*Set the regular channel sequence length*/
		ADC_SETUP[index].ADC_Instance->SQR1|=ADC_SETUP[index].ADC_Sequence_Length ;
 80002b8:	4b33      	ldr	r3, [pc, #204]	; (8000388 <ADC_Driver_Init+0x23c>)
 80002ba:	6819      	ldr	r1, [r3, #0]
 80002bc:	88fa      	ldrh	r2, [r7, #6]
 80002be:	4613      	mov	r3, r2
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	440b      	add	r3, r1
 80002c8:	6819      	ldr	r1, [r3, #0]
 80002ca:	4b2f      	ldr	r3, [pc, #188]	; (8000388 <ADC_Driver_Init+0x23c>)
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	88fa      	ldrh	r2, [r7, #6]
 80002d0:	4613      	mov	r3, r2
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	1a9b      	subs	r3, r3, r2
 80002d6:	00db      	lsls	r3, r3, #3
 80002d8:	4403      	add	r3, r0
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80002de:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <ADC_Driver_Init+0x23c>)
 80002e0:	681c      	ldr	r4, [r3, #0]
 80002e2:	88fa      	ldrh	r2, [r7, #6]
 80002e4:	4613      	mov	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	1a9b      	subs	r3, r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	4423      	add	r3, r4
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4303      	orrs	r3, r0
 80002f2:	62cb      	str	r3, [r1, #44]	; 0x2c
			The default is 1.5 cycles
		 */

		/*Check the selected ADC instance channel numbers, assign the sampling times and the sequences according to the data sheet. */

		for(index1=0x00;index1<ADC_SETUP[index].ADC_Channel_nr;index1++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	80bb      	strh	r3, [r7, #4]
 80002f8:	e175      	b.n	80005e6 <ADC_Driver_Init+0x49a>
		{
			if(ADC_SETUP[index].ADC_Channels[index1] < 0x0A)
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <ADC_Driver_Init+0x23c>)
 80002fc:	6819      	ldr	r1, [r3, #0]
 80002fe:	88fa      	ldrh	r2, [r7, #6]
 8000300:	4613      	mov	r3, r2
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	1a9b      	subs	r3, r3, r2
 8000306:	00db      	lsls	r3, r3, #3
 8000308:	18ca      	adds	r2, r1, r3
 800030a:	88bb      	ldrh	r3, [r7, #4]
 800030c:	4413      	add	r3, r2
 800030e:	7e5b      	ldrb	r3, [r3, #25]
 8000310:	2b09      	cmp	r3, #9
 8000312:	d83b      	bhi.n	800038c <ADC_Driver_Init+0x240>
			{
				ADC_SETUP[index].ADC_Instance->SMPR2|=((uint32_t)(ADC_SETUP[index].ADC_Channel_SampligTime[index1]<<(3*ADC_SETUP[index].ADC_Channels[index1])));
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	88fa      	ldrh	r2, [r7, #6]
 800031a:	4613      	mov	r3, r2
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	440b      	add	r3, r1
 8000324:	6819      	ldr	r1, [r3, #0]
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000328:	6818      	ldr	r0, [r3, #0]
 800032a:	88fa      	ldrh	r2, [r7, #6]
 800032c:	4613      	mov	r3, r2
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	1a9b      	subs	r3, r3, r2
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	4403      	add	r3, r0
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6918      	ldr	r0, [r3, #16]
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <ADC_Driver_Init+0x23c>)
 800033c:	681c      	ldr	r4, [r3, #0]
 800033e:	88fa      	ldrh	r2, [r7, #6]
 8000340:	4613      	mov	r3, r2
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	18e2      	adds	r2, r4, r3
 800034a:	88bb      	ldrh	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000352:	461d      	mov	r5, r3
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <ADC_Driver_Init+0x23c>)
 8000356:	681c      	ldr	r4, [r3, #0]
 8000358:	88fa      	ldrh	r2, [r7, #6]
 800035a:	4613      	mov	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	18e2      	adds	r2, r4, r3
 8000364:	88bb      	ldrh	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	7e5b      	ldrb	r3, [r3, #25]
 800036a:	461a      	mov	r2, r3
 800036c:	4613      	mov	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	4413      	add	r3, r2
 8000372:	fa05 f303 	lsl.w	r3, r5, r3
 8000376:	4303      	orrs	r3, r0
 8000378:	610b      	str	r3, [r1, #16]
 800037a:	e03b      	b.n	80003f4 <ADC_Driver_Init+0x2a8>
 800037c:	40021000 	.word	0x40021000
 8000380:	40012400 	.word	0x40012400
 8000384:	40012800 	.word	0x40012800
 8000388:	20000038 	.word	0x20000038
			}else
			{
				ADC_SETUP[index].ADC_Instance->SMPR1|=((uint32_t)(ADC_SETUP[index].ADC_Channel_SampligTime[index1]<<(3*(ADC_SETUP[index].ADC_Channels[index1]-0x0A))));
 800038c:	4b83      	ldr	r3, [pc, #524]	; (800059c <ADC_Driver_Init+0x450>)
 800038e:	6819      	ldr	r1, [r3, #0]
 8000390:	88fa      	ldrh	r2, [r7, #6]
 8000392:	4613      	mov	r3, r2
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	00db      	lsls	r3, r3, #3
 800039a:	440b      	add	r3, r1
 800039c:	6819      	ldr	r1, [r3, #0]
 800039e:	4b7f      	ldr	r3, [pc, #508]	; (800059c <ADC_Driver_Init+0x450>)
 80003a0:	6818      	ldr	r0, [r3, #0]
 80003a2:	88fa      	ldrh	r2, [r7, #6]
 80003a4:	4613      	mov	r3, r2
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	00db      	lsls	r3, r3, #3
 80003ac:	4403      	add	r3, r0
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	68d8      	ldr	r0, [r3, #12]
 80003b2:	4b7a      	ldr	r3, [pc, #488]	; (800059c <ADC_Driver_Init+0x450>)
 80003b4:	681c      	ldr	r4, [r3, #0]
 80003b6:	88fa      	ldrh	r2, [r7, #6]
 80003b8:	4613      	mov	r3, r2
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	00db      	lsls	r3, r3, #3
 80003c0:	18e2      	adds	r2, r4, r3
 80003c2:	88bb      	ldrh	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80003ca:	461d      	mov	r5, r3
 80003cc:	4b73      	ldr	r3, [pc, #460]	; (800059c <ADC_Driver_Init+0x450>)
 80003ce:	681c      	ldr	r4, [r3, #0]
 80003d0:	88fa      	ldrh	r2, [r7, #6]
 80003d2:	4613      	mov	r3, r2
 80003d4:	00db      	lsls	r3, r3, #3
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	18e2      	adds	r2, r4, r3
 80003dc:	88bb      	ldrh	r3, [r7, #4]
 80003de:	4413      	add	r3, r2
 80003e0:	7e5b      	ldrb	r3, [r3, #25]
 80003e2:	f1a3 020a 	sub.w	r2, r3, #10
 80003e6:	4613      	mov	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	4413      	add	r3, r2
 80003ec:	fa05 f303 	lsl.w	r3, r5, r3
 80003f0:	4303      	orrs	r3, r0
 80003f2:	60cb      	str	r3, [r1, #12]
			}

			if(ADC_SETUP[index].ADC_Sequence_Length > ADC_DRIVER_SEQUENCE_1_CONVERSION)
 80003f4:	4b69      	ldr	r3, [pc, #420]	; (800059c <ADC_Driver_Init+0x450>)
 80003f6:	6819      	ldr	r1, [r3, #0]
 80003f8:	88fa      	ldrh	r2, [r7, #6]
 80003fa:	4613      	mov	r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	00db      	lsls	r3, r3, #3
 8000402:	440b      	add	r3, r1
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	2b00      	cmp	r3, #0
 8000408:	f000 80ca 	beq.w	80005a0 <ADC_Driver_Init+0x454>
			{

				if(ADC_SETUP[index].ADC_Channel_Position[index1]<=ADC_DRIVER_SEQUENCE_POSITION_6)
 800040c:	4b63      	ldr	r3, [pc, #396]	; (800059c <ADC_Driver_Init+0x450>)
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	88fa      	ldrh	r2, [r7, #6]
 8000412:	4613      	mov	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	1a9b      	subs	r3, r3, r2
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	18ca      	adds	r2, r1, r3
 800041c:	88bb      	ldrh	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000424:	2b05      	cmp	r3, #5
 8000426:	d833      	bhi.n	8000490 <ADC_Driver_Init+0x344>
				{
					ADC_SETUP[index].ADC_Instance->SQR3|=((ADC_SETUP[index].ADC_Channels[index1])<<(5*ADC_SETUP[index].ADC_Channel_Position[index1]));
 8000428:	4b5c      	ldr	r3, [pc, #368]	; (800059c <ADC_Driver_Init+0x450>)
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	88fa      	ldrh	r2, [r7, #6]
 800042e:	4613      	mov	r3, r2
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	440b      	add	r3, r1
 8000438:	6819      	ldr	r1, [r3, #0]
 800043a:	4b58      	ldr	r3, [pc, #352]	; (800059c <ADC_Driver_Init+0x450>)
 800043c:	6818      	ldr	r0, [r3, #0]
 800043e:	88fa      	ldrh	r2, [r7, #6]
 8000440:	4613      	mov	r3, r2
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	4403      	add	r3, r0
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800044e:	4b53      	ldr	r3, [pc, #332]	; (800059c <ADC_Driver_Init+0x450>)
 8000450:	681c      	ldr	r4, [r3, #0]
 8000452:	88fa      	ldrh	r2, [r7, #6]
 8000454:	4613      	mov	r3, r2
 8000456:	00db      	lsls	r3, r3, #3
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	18e2      	adds	r2, r4, r3
 800045e:	88bb      	ldrh	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	7e5b      	ldrb	r3, [r3, #25]
 8000464:	461d      	mov	r5, r3
 8000466:	4b4d      	ldr	r3, [pc, #308]	; (800059c <ADC_Driver_Init+0x450>)
 8000468:	681c      	ldr	r4, [r3, #0]
 800046a:	88fa      	ldrh	r2, [r7, #6]
 800046c:	4613      	mov	r3, r2
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	1a9b      	subs	r3, r3, r2
 8000472:	00db      	lsls	r3, r3, #3
 8000474:	18e2      	adds	r2, r4, r3
 8000476:	88bb      	ldrh	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800047e:	461a      	mov	r2, r3
 8000480:	4613      	mov	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	fa05 f303 	lsl.w	r3, r5, r3
 800048a:	4303      	orrs	r3, r0
 800048c:	634b      	str	r3, [r1, #52]	; 0x34
 800048e:	e0a7      	b.n	80005e0 <ADC_Driver_Init+0x494>
				}
				else if((ADC_SETUP[index].ADC_Channel_Position[index1]>ADC_DRIVER_SEQUENCE_POSITION_6) && (ADC_SETUP[index].ADC_Channel_Position[index1]<=ADC_DRIVER_SEQUENCE_POSITION_12))
 8000490:	4b42      	ldr	r3, [pc, #264]	; (800059c <ADC_Driver_Init+0x450>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	88fa      	ldrh	r2, [r7, #6]
 8000496:	4613      	mov	r3, r2
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	18ca      	adds	r2, r1, r3
 80004a0:	88bb      	ldrh	r3, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	d941      	bls.n	8000530 <ADC_Driver_Init+0x3e4>
 80004ac:	4b3b      	ldr	r3, [pc, #236]	; (800059c <ADC_Driver_Init+0x450>)
 80004ae:	6819      	ldr	r1, [r3, #0]
 80004b0:	88fa      	ldrh	r2, [r7, #6]
 80004b2:	4613      	mov	r3, r2
 80004b4:	00db      	lsls	r3, r3, #3
 80004b6:	1a9b      	subs	r3, r3, r2
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	18ca      	adds	r2, r1, r3
 80004bc:	88bb      	ldrh	r3, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80004c4:	2b0b      	cmp	r3, #11
 80004c6:	d833      	bhi.n	8000530 <ADC_Driver_Init+0x3e4>
				{
					ADC_SETUP[index].ADC_Instance->SQR2|=((ADC_SETUP[index].ADC_Channels[index1])<<(5*(ADC_SETUP[index].ADC_Channel_Position[index1]-0x06)));
 80004c8:	4b34      	ldr	r3, [pc, #208]	; (800059c <ADC_Driver_Init+0x450>)
 80004ca:	6819      	ldr	r1, [r3, #0]
 80004cc:	88fa      	ldrh	r2, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	00db      	lsls	r3, r3, #3
 80004d2:	1a9b      	subs	r3, r3, r2
 80004d4:	00db      	lsls	r3, r3, #3
 80004d6:	440b      	add	r3, r1
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <ADC_Driver_Init+0x450>)
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	88fa      	ldrh	r2, [r7, #6]
 80004e0:	4613      	mov	r3, r2
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	00db      	lsls	r3, r3, #3
 80004e8:	4403      	add	r3, r0
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <ADC_Driver_Init+0x450>)
 80004f0:	681c      	ldr	r4, [r3, #0]
 80004f2:	88fa      	ldrh	r2, [r7, #6]
 80004f4:	4613      	mov	r3, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	00db      	lsls	r3, r3, #3
 80004fc:	18e2      	adds	r2, r4, r3
 80004fe:	88bb      	ldrh	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	7e5b      	ldrb	r3, [r3, #25]
 8000504:	461d      	mov	r5, r3
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <ADC_Driver_Init+0x450>)
 8000508:	681c      	ldr	r4, [r3, #0]
 800050a:	88fa      	ldrh	r2, [r7, #6]
 800050c:	4613      	mov	r3, r2
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	18e2      	adds	r2, r4, r3
 8000516:	88bb      	ldrh	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800051e:	1f9a      	subs	r2, r3, #6
 8000520:	4613      	mov	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	fa05 f303 	lsl.w	r3, r5, r3
 800052a:	4303      	orrs	r3, r0
 800052c:	630b      	str	r3, [r1, #48]	; 0x30
 800052e:	e057      	b.n	80005e0 <ADC_Driver_Init+0x494>
				}
				else
				{
					ADC_SETUP[index].ADC_Instance->SQR1|=((ADC_SETUP[index].ADC_Channels[index1])<<(5*(ADC_SETUP[index].ADC_Channel_Position[index1]-0x0C)));
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <ADC_Driver_Init+0x450>)
 8000532:	6819      	ldr	r1, [r3, #0]
 8000534:	88fa      	ldrh	r2, [r7, #6]
 8000536:	4613      	mov	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	1a9b      	subs	r3, r3, r2
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	440b      	add	r3, r1
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <ADC_Driver_Init+0x450>)
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	88fa      	ldrh	r2, [r7, #6]
 8000548:	4613      	mov	r3, r2
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4403      	add	r3, r0
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <ADC_Driver_Init+0x450>)
 8000558:	681c      	ldr	r4, [r3, #0]
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	18e2      	adds	r2, r4, r3
 8000566:	88bb      	ldrh	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	7e5b      	ldrb	r3, [r3, #25]
 800056c:	461d      	mov	r5, r3
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <ADC_Driver_Init+0x450>)
 8000570:	681c      	ldr	r4, [r3, #0]
 8000572:	88fa      	ldrh	r2, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	1a9b      	subs	r3, r3, r2
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	18e2      	adds	r2, r4, r3
 800057e:	88bb      	ldrh	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000586:	f1a3 020c 	sub.w	r2, r3, #12
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	fa05 f303 	lsl.w	r3, r5, r3
 8000594:	4303      	orrs	r3, r0
 8000596:	62cb      	str	r3, [r1, #44]	; 0x2c
 8000598:	e022      	b.n	80005e0 <ADC_Driver_Init+0x494>
 800059a:	bf00      	nop
 800059c:	20000038 	.word	0x20000038
				}
			}else
			{
				ADC_SETUP[index].ADC_Instance->SQR3|= ADC_SETUP[index].ADC_Channels[index1];
 80005a0:	4b45      	ldr	r3, [pc, #276]	; (80006b8 <ADC_Driver_Init+0x56c>)
 80005a2:	6819      	ldr	r1, [r3, #0]
 80005a4:	88fa      	ldrh	r2, [r7, #6]
 80005a6:	4613      	mov	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	440b      	add	r3, r1
 80005b0:	6819      	ldr	r1, [r3, #0]
 80005b2:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <ADC_Driver_Init+0x56c>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	88fa      	ldrh	r2, [r7, #6]
 80005b8:	4613      	mov	r3, r2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4403      	add	r3, r0
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80005c6:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <ADC_Driver_Init+0x56c>)
 80005c8:	681c      	ldr	r4, [r3, #0]
 80005ca:	88fa      	ldrh	r2, [r7, #6]
 80005cc:	4613      	mov	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	18e2      	adds	r2, r4, r3
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	7e5b      	ldrb	r3, [r3, #25]
 80005dc:	4303      	orrs	r3, r0
 80005de:	634b      	str	r3, [r1, #52]	; 0x34
		for(index1=0x00;index1<ADC_SETUP[index].ADC_Channel_nr;index1++)
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	80bb      	strh	r3, [r7, #4]
 80005e6:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <ADC_Driver_Init+0x56c>)
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	88fa      	ldrh	r2, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	440b      	add	r3, r1
 80005f6:	7e1b      	ldrb	r3, [r3, #24]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	88ba      	ldrh	r2, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	f4ff ae7c 	bcc.w	80002fa <ADC_Driver_Init+0x1ae>
			}
		}

		/*Start the ADC*/
		ADC_Driver_On(index);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f898 	bl	800073c <ADC_Driver_On>

		/*Reset calibration*/
		ADC_SETUP[index].ADC_Instance->CR2|=ADC_DRIVER_RESET_CALLIBRATION;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <ADC_Driver_Init+0x56c>)
 800060e:	6819      	ldr	r1, [r3, #0]
 8000610:	88fa      	ldrh	r2, [r7, #6]
 8000612:	4613      	mov	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	440b      	add	r3, r1
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <ADC_Driver_Init+0x56c>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	88fa      	ldrh	r2, [r7, #6]
 8000624:	4613      	mov	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	4403      	add	r3, r0
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	608b      	str	r3, [r1, #8]
		while(((ADC_SETUP[index].ADC_Instance->CR2) & ADC_DRIVER_RESET_CALLIBRATION )!=0x00){}
 8000638:	bf00      	nop
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <ADC_Driver_Init+0x56c>)
 800063c:	6819      	ldr	r1, [r3, #0]
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f1      	bne.n	800063a <ADC_Driver_Init+0x4ee>

		/*Calibration*/
		ADC_SETUP[index].ADC_Instance->CR2|=ADC_DRIVER_CALLIBRATION;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <ADC_Driver_Init+0x56c>)
 8000658:	6819      	ldr	r1, [r3, #0]
 800065a:	88fa      	ldrh	r2, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	440b      	add	r3, r1
 8000666:	6819      	ldr	r1, [r3, #0]
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <ADC_Driver_Init+0x56c>)
 800066a:	6818      	ldr	r0, [r3, #0]
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	4613      	mov	r3, r2
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4403      	add	r3, r0
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	608b      	str	r3, [r1, #8]
		while(((ADC_SETUP[index].ADC_Instance->CR2) & ADC_DRIVER_CALLIBRATION)!=0x00){}
 8000682:	bf00      	nop
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <ADC_Driver_Init+0x56c>)
 8000686:	6819      	ldr	r1, [r3, #0]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	440b      	add	r3, r1
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f1      	bne.n	8000684 <ADC_Driver_Init+0x538>
	for(index=0x00;index<ADC_DRIVER_INSTANCE_NUM;index++)
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	3301      	adds	r3, #1
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f43f ad6d 	beq.w	8000188 <ADC_Driver_Init+0x3c>
	}

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000038 	.word	0x20000038

080006bc <ADC_Driver_GetSample>:

uint16 ADC_Driver_GetSample(uint8 ADC_Instance_Number)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	uint16 data=0x00;
 80006c6:	2300      	movs	r3, #0
 80006c8:	81fb      	strh	r3, [r7, #14]
	data = ((uint16)(ADC_SETUP[ADC_Instance_Number].ADC_Instance->DR));
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <ADC_Driver_GetSample+0x30>)
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	440b      	add	r3, r1
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	81fb      	strh	r3, [r7, #14]
	return data;
 80006e0:	89fb      	ldrh	r3, [r7, #14]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000038 	.word	0x20000038

080006f0 <ADC_Driver_GetStatus>:

uint8 ADC_Driver_GetStatus(uint8 ADC_Instance_Number,uint8 Event)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	uint8 ResultCode = 0x00;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]

	if((ADC_SETUP[ADC_Instance_Number].ADC_Instance->SR & Event)!=FALSE)
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <ADC_Driver_GetStatus+0x48>)
 8000706:	6819      	ldr	r1, [r3, #0]
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4613      	mov	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	440b      	add	r3, r1
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	4013      	ands	r3, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <ADC_Driver_GetStatus+0x36>
	{
		ResultCode = SUCCES;
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e001      	b.n	800072a <ADC_Driver_GetStatus+0x3a>
	}
	else
	{
		ResultCode = FAILED;
 8000726:	2301      	movs	r3, #1
 8000728:	73fb      	strb	r3, [r7, #15]
	}

	return ResultCode;
 800072a:	7bfb      	ldrb	r3, [r7, #15]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000038 	.word	0x20000038

0800073c <ADC_Driver_On>:
{
	ADC_SETUP[ADC_Instance_Number].ADC_Instance->CR2 &= ADC_DRIVER_OFF;
}

void ADC_Driver_On(uint8 ADC_Instance_Number)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	ADC_SETUP[ADC_Instance_Number].ADC_Instance->CR2|=ADC_DRIVER_ON;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <ADC_Driver_On+0x40>)
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	440b      	add	r3, r1
 8000756:	6819      	ldr	r1, [r3, #0]
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <ADC_Driver_On+0x40>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	79fa      	ldrb	r2, [r7, #7]
 800075e:	4613      	mov	r3, r2
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	4403      	add	r3, r0
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	608b      	str	r3, [r1, #8]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000038 	.word	0x20000038

08000780 <ADC_Driver_StartSampling>:

void ADC_Driver_StartSampling(uint8 ADC_Instance_Number)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	ADC_SETUP[ADC_Instance_Number].ADC_Instance->CR2|=ADC_DRIVER_REGULAR_START;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <ADC_Driver_StartSampling+0x40>)
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	1a9b      	subs	r3, r3, r2
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	440b      	add	r3, r1
 800079a:	6819      	ldr	r1, [r3, #0]
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <ADC_Driver_StartSampling+0x40>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	4613      	mov	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4403      	add	r3, r0
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b4:	608b      	str	r3, [r1, #8]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000038 	.word	0x20000038

080007c4 <ADC_Driver_Set_Prescale_Value>:

void ADC_Driver_Set_Prescale_Value()
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	/*Select the frequency of the clock to the ADCs*/
	RCC->CFGR |= ADC_DRIVER_PRESCALE;
 80007c8:	4a03      	ldr	r2, [pc, #12]	; (80007d8 <ADC_Driver_Set_Prescale_Value+0x14>)
 80007ca:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <ADC_Driver_Set_Prescale_Value+0x14>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	6053      	str	r3, [r2, #4]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000

080007dc <GPIO_Driver_Init>:
#include "GPIO_Driver_Cfg.h"


/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 80007dc:	b4f0      	push	{r4, r5, r6, r7}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80007ea:	4a9e      	ldr	r2, [pc, #632]	; (8000a64 <GPIO_Driver_Init+0x288>)
 80007ec:	4b9d      	ldr	r3, [pc, #628]	; (8000a64 <GPIO_Driver_Init+0x288>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6193      	str	r3, [r2, #24]
	#endif
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	80fb      	strh	r3, [r7, #6]
 80007fa:	e129      	b.n	8000a50 <GPIO_Driver_Init+0x274>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	80bb      	strh	r3, [r7, #4]
 8000800:	e117      	b.n	8000a32 <GPIO_Driver_Init+0x256>
		{
			if((GPIO_SETUP[index].GPIO_Pins[index1])<0x08)
 8000802:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	2168      	movs	r1, #104	; 0x68
 800080a:	fb01 f303 	mul.w	r3, r1, r3
 800080e:	441a      	add	r2, r3
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	88db      	ldrh	r3, [r3, #6]
 8000818:	2b07      	cmp	r3, #7
 800081a:	f200 8082 	bhi.w	8000922 <GPIO_Driver_Init+0x146>
			{
				/*The first step is to clear the default setting*/
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 800081e:	4b92      	ldr	r3, [pc, #584]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	2168      	movs	r1, #104	; 0x68
 8000826:	fb01 f303 	mul.w	r3, r1, r3
 800082a:	4413      	add	r3, r2
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b8e      	ldr	r3, [pc, #568]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2068      	movs	r0, #104	; 0x68
 8000836:	fb00 f303 	mul.w	r3, r0, r3
 800083a:	440b      	add	r3, r1
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	4b89      	ldr	r3, [pc, #548]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	2468      	movs	r4, #104	; 0x68
 8000848:	fb04 f303 	mul.w	r3, r4, r3
 800084c:	4418      	add	r0, r3
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4403      	add	r3, r0
 8000854:	88db      	ldrh	r3, [r3, #6]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	2003      	movs	r0, #3
 800085a:	fa00 f303 	lsl.w	r3, r0, r3
 800085e:	461d      	mov	r5, r3
							  	  	  	  	  	  	  ((uint32)(0x03 <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))))));
 8000860:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	2468      	movs	r4, #104	; 0x68
 8000868:	fb04 f303 	mul.w	r3, r4, r3
 800086c:	4418      	add	r0, r3
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4403      	add	r3, r0
 8000874:	88db      	ldrh	r3, [r3, #6]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	3302      	adds	r3, #2
 800087a:	2003      	movs	r0, #3
 800087c:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000880:	432b      	orrs	r3, r5
 8000882:	43db      	mvns	r3, r3
 8000884:	400b      	ands	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
				/*Set the GPIO configuration*/
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000888:	4b77      	ldr	r3, [pc, #476]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	2168      	movs	r1, #104	; 0x68
 8000890:	fb01 f303 	mul.w	r3, r1, r3
 8000894:	4413      	add	r3, r2
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 800089a:	6819      	ldr	r1, [r3, #0]
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	2068      	movs	r0, #104	; 0x68
 80008a0:	fb00 f303 	mul.w	r3, r0, r3
 80008a4:	440b      	add	r3, r1
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6819      	ldr	r1, [r3, #0]
 80008aa:	4b6f      	ldr	r3, [pc, #444]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	2468      	movs	r4, #104	; 0x68
 80008b2:	fb04 f303 	mul.w	r3, r4, r3
 80008b6:	4418      	add	r0, r3
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	3310      	adds	r3, #16
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4403      	add	r3, r0
 80008c0:	88db      	ldrh	r3, [r3, #6]
 80008c2:	461d      	mov	r5, r3
 80008c4:	4b68      	ldr	r3, [pc, #416]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	2468      	movs	r4, #104	; 0x68
 80008cc:	fb04 f303 	mul.w	r3, r4, r3
 80008d0:	4418      	add	r0, r3
 80008d2:	88bb      	ldrh	r3, [r7, #4]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4403      	add	r3, r0
 80008d8:	88db      	ldrh	r3, [r3, #6]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	fa05 f303 	lsl.w	r3, r5, r3
 80008e0:	461d      	mov	r5, r3
													((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))));
 80008e2:	4b61      	ldr	r3, [pc, #388]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	2468      	movs	r4, #104	; 0x68
 80008ea:	fb04 f303 	mul.w	r3, r4, r3
 80008ee:	4418      	add	r0, r3
 80008f0:	88bb      	ldrh	r3, [r7, #4]
 80008f2:	3320      	adds	r3, #32
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4403      	add	r3, r0
 80008f8:	88db      	ldrh	r3, [r3, #6]
 80008fa:	461e      	mov	r6, r3
 80008fc:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	2468      	movs	r4, #104	; 0x68
 8000904:	fb04 f303 	mul.w	r3, r4, r3
 8000908:	4418      	add	r0, r3
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4403      	add	r3, r0
 8000910:	88db      	ldrh	r3, [r3, #6]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 800091a:	432b      	orrs	r3, r5
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e084      	b.n	8000a2c <GPIO_Driver_Init+0x250>
			}
			else
			{
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000922:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	2168      	movs	r1, #104	; 0x68
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	4413      	add	r3, r2
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000934:	6819      	ldr	r1, [r3, #0]
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	2068      	movs	r0, #104	; 0x68
 800093a:	fb00 f303 	mul.w	r3, r0, r3
 800093e:	440b      	add	r3, r1
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6859      	ldr	r1, [r3, #4]
 8000944:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	2468      	movs	r4, #104	; 0x68
 800094c:	fb04 f303 	mul.w	r3, r4, r3
 8000950:	4418      	add	r0, r3
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4403      	add	r3, r0
 8000958:	88db      	ldrh	r3, [r3, #6]
 800095a:	3b08      	subs	r3, #8
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	2003      	movs	r0, #3
 8000960:	fa00 f303 	lsl.w	r3, r0, r3
 8000964:	461d      	mov	r5, r3
				              	  	  	  	  	  	((uint32)(0x03 <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))))));
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2468      	movs	r4, #104	; 0x68
 800096e:	fb04 f303 	mul.w	r3, r4, r3
 8000972:	4418      	add	r0, r3
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4403      	add	r3, r0
 800097a:	88db      	ldrh	r3, [r3, #6]
 800097c:	3b08      	subs	r3, #8
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	3302      	adds	r3, #2
 8000982:	2003      	movs	r0, #3
 8000984:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000988:	432b      	orrs	r3, r5
 800098a:	43db      	mvns	r3, r3
 800098c:	400b      	ands	r3, r1
 800098e:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000990:	4b35      	ldr	r3, [pc, #212]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	2168      	movs	r1, #104	; 0x68
 8000998:	fb01 f303 	mul.w	r3, r1, r3
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	2068      	movs	r0, #104	; 0x68
 80009a8:	fb00 f303 	mul.w	r3, r0, r3
 80009ac:	440b      	add	r3, r1
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6859      	ldr	r1, [r3, #4]
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	2468      	movs	r4, #104	; 0x68
 80009ba:	fb04 f303 	mul.w	r3, r4, r3
 80009be:	4418      	add	r0, r3
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	3310      	adds	r3, #16
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4403      	add	r3, r0
 80009c8:	88db      	ldrh	r3, [r3, #6]
 80009ca:	461d      	mov	r5, r3
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	2468      	movs	r4, #104	; 0x68
 80009d4:	fb04 f303 	mul.w	r3, r4, r3
 80009d8:	4418      	add	r0, r3
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4403      	add	r3, r0
 80009e0:	88db      	ldrh	r3, [r3, #6]
 80009e2:	3b08      	subs	r3, #8
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	fa05 f303 	lsl.w	r3, r5, r3
 80009ea:	461d      	mov	r5, r3
							  	  	  	  	  	    ((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))));
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	2468      	movs	r4, #104	; 0x68
 80009f4:	fb04 f303 	mul.w	r3, r4, r3
 80009f8:	4418      	add	r0, r3
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	3320      	adds	r3, #32
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4403      	add	r3, r0
 8000a02:	88db      	ldrh	r3, [r3, #6]
 8000a04:	461e      	mov	r6, r3
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	2468      	movs	r4, #104	; 0x68
 8000a0e:	fb04 f303 	mul.w	r3, r4, r3
 8000a12:	4418      	add	r0, r3
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4403      	add	r3, r0
 8000a1a:	88db      	ldrh	r3, [r3, #6]
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000a26:	432b      	orrs	r3, r5
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	6053      	str	r3, [r2, #4]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <GPIO_Driver_Init+0x28c>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	2168      	movs	r1, #104	; 0x68
 8000a3a:	fb01 f303 	mul.w	r3, r1, r3
 8000a3e:	4413      	add	r3, r2
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	88ba      	ldrh	r2, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f4ff aedc 	bcc.w	8000802 <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f43f aed2 	beq.w	80007fc <GPIO_Driver_Init+0x20>
			}
		}
	}
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	200000a4 	.word	0x200000a4

08000a6c <NVIC_Driver_SetInterrupt>:
 */

#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 8000a86:	230f      	movs	r3, #15
 8000a88:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <NVIC_Driver_SetInterrupt+0xb8>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 8000aa6:	7b7a      	ldrb	r2, [r7, #13]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	fa42 f303 	asr.w	r3, r2, r3
 8000aae:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f1c3 0304 	rsb	r3, r3, #4
 8000ab6:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 8000ac2:	797a      	ldrb	r2, [r7, #5]
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 8000aca:	7b3a      	ldrb	r2, [r7, #12]
 8000acc:	7afb      	ldrb	r3, [r7, #11]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da08      	bge.n	8000af0 <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 8000ade:	4a11      	ldr	r2, [pc, #68]	; (8000b24 <NVIC_Driver_SetInterrupt+0xb8>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	4413      	add	r3, r2
 8000aea:	7aba      	ldrb	r2, [r7, #10]
 8000aec:	761a      	strb	r2, [r3, #24]
 8000aee:	e006      	b.n	8000afe <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <NVIC_Driver_SetInterrupt+0xbc>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	4413      	add	r3, r2
 8000af8:	7aba      	ldrb	r2, [r7, #10]
 8000afa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <NVIC_Driver_SetInterrupt+0xbc>)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	115b      	asrs	r3, r3, #5
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 031f 	and.w	r3, r3, #31
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 8000b16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_Driver_Set_SYSTICK_Interrupt>:
	}
#endif

#if (NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE == OK)
	void NVIC_Driver_Set_SYSTICK_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
		/*Enable the Systick interrupt */
		SysTick->CTRL|=(0x01<<0x01);
 8000b88:	4a08      	ldr	r2, [pc, #32]	; (8000bac <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	6013      	str	r3, [r2, #0]
		NVIC_Driver_SetInterrupt(SysTick_IRQn,Preemption_priority,Sub_priority);
 8000b94:	79ba      	ldrb	r2, [r7, #6]
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	f7ff ff65 	bl	8000a6c <NVIC_Driver_SetInterrupt>
	}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SysTick_Handler+0x20>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d004      	beq.n	8000bc6 <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <SysTick_Handler+0x20>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <SysTick_Handler+0x20>)
 8000bc4:	6013      	str	r3, [r2, #0]
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000c4 	.word	0x200000c4

08000bd4 <SYSTICK_Driver_Init>:

void SYSTICK_Driver_Init()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	/*Set the processor clock as the clock source */
	SysTick->CTRL|=(0x01<<0x02);
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SYSTICK_Driver_Init+0x30>)
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <SYSTICK_Driver_Init+0x30>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6013      	str	r3, [r2, #0]
	#if(SYSTICK_DRIVER_ENABLE_INTERRUPT == OK)
		/*Set the timer interrupt and its priority and sub-priority*/
		NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f7ff ffa1 	bl	8000b2c <NVIC_Driver_PriorityGroupConfig>
		NVIC_Driver_Set_SYSTICK_Interrupt(0x0F,0x00);
 8000bea:	2100      	movs	r1, #0
 8000bec:	200f      	movs	r0, #15
 8000bee:	f7ff ffc3 	bl	8000b78 <NVIC_Driver_Set_SYSTICK_Interrupt>
	#endif
	/*Init the Systick current value register*/
	SysTick->VAL = 0x00;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SYSTICK_Driver_Init+0x30>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
	/*Set the load register with the configured value*/
	SysTick->LOAD = ((SYSTICK_DRIVER_LOAD & 0xFFFFFFUL)-1);
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <SYSTICK_Driver_Init+0x30>)
 8000bfa:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <SYSTICK_Driver_Init+0x34>)
 8000bfc:	605a      	str	r2, [r3, #4]
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010
 8000c08:	0001193f 	.word	0x0001193f

08000c0c <SYSTICK_Driver_Start>:

void SYSTICK_Driver_Start()
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	/*Enable the systick timer*/
	SysTick->CTRL|=0x01;
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <SYSTICK_Driver_Start+0x18>)
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SYSTICK_Driver_Start+0x18>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <main>:
#include "ADC_Driver_Cfg.h"

uint16 ADC_Sample = 0x00;

int main()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	SYSTICK_Driver_Init();
 8000c2c:	f7ff ffd2 	bl	8000bd4 <SYSTICK_Driver_Init>
	SYSTICK_Driver_Start();
 8000c30:	f7ff ffec 	bl	8000c0c <SYSTICK_Driver_Start>

	GPIO_Driver_Init();
 8000c34:	f7ff fdd2 	bl	80007dc <GPIO_Driver_Init>
	ADC_Driver_Init();
 8000c38:	f7ff fa88 	bl	800014c <ADC_Driver_Init>

	while (1)
	{
		ADC_Driver_StartSampling(ADC_DRIVER_1);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fd9f 	bl	8000780 <ADC_Driver_StartSampling>
		if((ADC_Driver_GetStatus(ADC_DRIVER_1,ADC_DRIVER_REGULAR_CHANNEL_END_OF_CONVERSION_FLAG))==SUCCES)
 8000c42:	2102      	movs	r1, #2
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff fd53 	bl	80006f0 <ADC_Driver_GetStatus>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f5      	bne.n	8000c3c <main+0x14>
		{
			ADC_Sample = ADC_Driver_GetSample(ADC_DRIVER_1);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fd33 	bl	80006bc <ADC_Driver_GetSample>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <main+0x38>)
 8000c5c:	801a      	strh	r2, [r3, #0]
		ADC_Driver_StartSampling(ADC_DRIVER_1);
 8000c5e:	e7ed      	b.n	8000c3c <main+0x14>
 8000c60:	200000c8 	.word	0x200000c8

08000c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
	ldr	r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000c8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8e:	f000 f813 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f000 f8cb 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c96:	f7ff ffc7 	bl	8000c28 <main>
	bx	lr
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c9c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000ca0:	08000e94 	.word	0x08000e94
	ldr	r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ca8:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8000cac:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8000cb0:	200000cc 	.word	0x200000cc

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <SystemInit+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <SystemInit+0x5c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000cc8:	4912      	ldr	r1, [pc, #72]	; (8000d14 <SystemInit+0x5c>)
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <SystemInit+0x5c>)
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <SystemInit+0x60>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <SystemInit+0x5c>)
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <SystemInit+0x5c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <SystemInit+0x5c>)
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <SystemInit+0x5c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000cf0:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <SystemInit+0x5c>)
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <SystemInit+0x5c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SystemInit+0x5c>)
 8000cfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d02:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000d04:	f000 f80c 	bl	8000d20 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <SystemInit+0x64>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	f8ff0000 	.word	0xf8ff0000
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000d24:	f000 f802 	bl	8000d2c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d3a:	4a3a      	ldr	r2, [pc, #232]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000d3c:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3301      	adds	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <SetSysClockTo72+0x38>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d62:	d1f0      	bne.n	8000d46 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d70:	2301      	movs	r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	e001      	b.n	8000d7a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d14b      	bne.n	8000e18 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f023 0303 	bic.w	r3, r3, #3
 8000d96:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d98:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <SetSysClockTo72+0xfc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000dc0:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000dca:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000dd6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000de2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000de4:	bf00      	nop
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f9      	beq.n	8000de6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000df2:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f023 0303 	bic.w	r3, r3, #3
 8000dfc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000e0a:	bf00      	nop
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SetSysClockTo72+0xf8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d1f9      	bne.n	8000e0c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40022000 	.word	0x40022000

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	2500      	movs	r5, #0
 8000e30:	4e0c      	ldr	r6, [pc, #48]	; (8000e64 <__libc_init_array+0x38>)
 8000e32:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e34:	1ba4      	subs	r4, r4, r6
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	f000 f81a 	bl	8000e74 <_init>
 8000e40:	2500      	movs	r5, #0
 8000e42:	4e0a      	ldr	r6, [pc, #40]	; (8000e6c <__libc_init_array+0x40>)
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <__libc_init_array+0x44>)
 8000e46:	1ba4      	subs	r4, r4, r6
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000e8c 	.word	0x08000e8c
 8000e68:	08000e8c 	.word	0x08000e8c
 8000e6c:	08000e8c 	.word	0x08000e8c
 8000e70:	08000e90 	.word	0x08000e90

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
