
103_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c8  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004c4  080004c4  000104c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000000  080004c8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  080004c8  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a3d  00000000  00000000  000104f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000444  00000000  00000000  00010f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000118  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00011490  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000008e7  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000050e  00000000  00000000  00011e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00012355  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002d8  00000000  00000000  000123d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080004a8 	.word	0x080004a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080004a8 	.word	0x080004a8

0800014c <FLASH_Driver_Lock>:

#include "FLASH_Driver_Cfg.h"

/*Lock the Flash memory, to protect it from unwanted modifications*/
void FLASH_Driver_Lock()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	/*Write 1 to the Lock bit to block the access to the flash memory*/
	FLASH->CR|=FLASH_DRIVER_LOCK;
 8000150:	4a04      	ldr	r2, [pc, #16]	; (8000164 <FLASH_Driver_Lock+0x18>)
 8000152:	4b04      	ldr	r3, [pc, #16]	; (8000164 <FLASH_Driver_Lock+0x18>)
 8000154:	691b      	ldr	r3, [r3, #16]
 8000156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800015a:	6113      	str	r3, [r2, #16]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40022000 	.word	0x40022000

08000168 <FLASH_Driver_UnLock>:

/*Unlock the flash memory in order to perform operations on it */
void FLASH_Driver_UnLock()
{
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
	/*Write the first key to the key register*/
	FLASH->KEYR = FLASH_DRIVER_KEY1;
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <FLASH_Driver_UnLock+0x18>)
 800016e:	4a05      	ldr	r2, [pc, #20]	; (8000184 <FLASH_Driver_UnLock+0x1c>)
 8000170:	605a      	str	r2, [r3, #4]
	/*Write the second key to the key register*/
	FLASH->KEYR = FLASH_DRIVER_KEY2;
 8000172:	4b03      	ldr	r3, [pc, #12]	; (8000180 <FLASH_Driver_UnLock+0x18>)
 8000174:	4a04      	ldr	r2, [pc, #16]	; (8000188 <FLASH_Driver_UnLock+0x20>)
 8000176:	605a      	str	r2, [r3, #4]
}
 8000178:	bf00      	nop
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	40022000 	.word	0x40022000
 8000184:	45670123 	.word	0x45670123
 8000188:	cdef89ab 	.word	0xcdef89ab

0800018c <FLASH_Driver_Program>:

/*Program a byte length payload to the given address, in the selected sector  */
void FLASH_Driver_Program(uint32 Address,uint16 Payload)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	460b      	mov	r3, r1
 8000196:	807b      	strh	r3, [r7, #2]
	/*Erase the page before writing*/
	FLASH_Driver_Erease_Page(Address);
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f000 f823 	bl	80001e4 <FLASH_Driver_Erease_Page>

	/*Wait for the last operation*/
	while((FLASH->SR & (FLASH_DRIVER_BUSY_FLAG))!=0x00)
 800019e:	bf00      	nop
 80001a0:	4b0f      	ldr	r3, [pc, #60]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	f003 0301 	and.w	r3, r3, #1
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d1f9      	bne.n	80001a0 <FLASH_Driver_Program+0x14>
	{/*No operation, wait until the busy bit is set*/}

	/*Set the program operation*/
	FLASH->CR |= FLASH_DRIVER_PROGRAM_OP;
 80001ac:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001ae:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001b0:	691b      	ldr	r3, [r3, #16]
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6113      	str	r3, [r2, #16]

	/*Perform program operation to the desired address*/
	*(volatile uint16*)Address = Payload;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	887a      	ldrh	r2, [r7, #2]
 80001bc:	801a      	strh	r2, [r3, #0]

	/*Wait for the last operation*/
	while((FLASH->SR & (FLASH_DRIVER_BUSY_FLAG))!=0x00)
 80001be:	bf00      	nop
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	f003 0301 	and.w	r3, r3, #1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d1f9      	bne.n	80001c0 <FLASH_Driver_Program+0x34>
	{/*No operation, wait until the busy bit is set*/}

	/*Clear the program operation*/
	FLASH->CR &= (~FLASH_DRIVER_PROGRAM_OP);
 80001cc:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <FLASH_Driver_Program+0x54>)
 80001d0:	691b      	ldr	r3, [r3, #16]
 80001d2:	f023 0301 	bic.w	r3, r3, #1
 80001d6:	6113      	str	r3, [r2, #16]
}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	40022000 	.word	0x40022000

080001e4 <FLASH_Driver_Erease_Page>:

/*Erase the selected sector */
void FLASH_Driver_Erease_Page(uint32 PageNumber)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	while((FLASH->SR & (FLASH_DRIVER_BUSY_FLAG))!=0x00)
 80001ec:	bf00      	nop
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d1f9      	bne.n	80001ee <FLASH_Driver_Erease_Page+0xa>
	{/*No operation, wait until the busy bit is set*/}

	/*Set the sector erase operation*/
	FLASH->CR |= FLASH_DRIVER_PAGE_ERASE_OP;
 80001fa:	4a12      	ldr	r2, [pc, #72]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 80001fc:	4b11      	ldr	r3, [pc, #68]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6113      	str	r3, [r2, #16]
	/*Set new page*/
	FLASH->AR = PageNumber;
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	6153      	str	r3, [r2, #20]
	/*Start the sector erase operation*/
	FLASH->CR |= FLASH_DRIVER_START_OP;
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000216:	6113      	str	r3, [r2, #16]

	/*Wait for the last operation*/
	while((FLASH->SR & (FLASH_DRIVER_BUSY_FLAG))!=0x00)
 8000218:	bf00      	nop
 800021a:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1f9      	bne.n	800021a <FLASH_Driver_Erease_Page+0x36>
	{/*No operation, wait until the busy bit is set*/}

	/* If the erase operation is completed, disable the SER Bit */
	FLASH->CR &= (~FLASH_DRIVER_PAGE_ERASE_OP);
 8000226:	4a07      	ldr	r2, [pc, #28]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	f023 0302 	bic.w	r3, r3, #2
 8000230:	6113      	str	r3, [r2, #16]
	/*Clear the address selection*/
	FLASH->AR = 0x00;
 8000232:	4b04      	ldr	r3, [pc, #16]	; (8000244 <FLASH_Driver_Erease_Page+0x60>)
 8000234:	2200      	movs	r2, #0
 8000236:	615a      	str	r2, [r3, #20]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40022000 	.word	0x40022000

08000248 <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <SysTick_Handler+0x20>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d004      	beq.n	800025e <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <SysTick_Handler+0x20>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3b01      	subs	r3, #1
 800025a:	4a03      	ldr	r2, [pc, #12]	; (8000268 <SysTick_Handler+0x20>)
 800025c:	6013      	str	r3, [r2, #0]
	}
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	2000001c 	.word	0x2000001c

0800026c <main>:

uint32 test = 0x00;


int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	FLASH_Driver_UnLock();
 8000270:	f7ff ff7a 	bl	8000168 <FLASH_Driver_UnLock>
	FLASH_Driver_Program(TEST_ADDRESS,0xBEEF);
 8000274:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x24>)
 800027a:	f7ff ff87 	bl	800018c <FLASH_Driver_Program>
	FLASH_Driver_Lock();
 800027e:	f7ff ff65 	bl	800014c <FLASH_Driver_Lock>

	while (1)
	{
		/*Do nothing*/
		test++;
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <main+0x28>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3301      	adds	r3, #1
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <main+0x28>)
 800028a:	6013      	str	r3, [r2, #0]
 800028c:	e7f9      	b.n	8000282 <main+0x16>
 800028e:	bf00      	nop
 8000290:	08019000 	.word	0x08019000
 8000294:	20000020 	.word	0x20000020

08000298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800029c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800029e:	e003      	b.n	80002a8 <LoopCopyDataInit>

080002a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80002a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002a6:	3104      	adds	r1, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80002ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002b0:	d3f6      	bcc.n	80002a0 <CopyDataInit>
	ldr	r2, =_sbss
 80002b2:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80002b4:	e002      	b.n	80002bc <LoopFillZerobss>

080002b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80002b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80002b8:	f842 3b04 	str.w	r3, [r2], #4

080002bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80002be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80002c0:	d3f9      	bcc.n	80002b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002c2:	f000 f813 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002c6:	f000 f8cb 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002ca:	f7ff ffcf 	bl	800026c <main>
	bx	lr
 80002ce:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002d0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80002d4:	080004c8 	.word	0x080004c8
	ldr	r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80002dc:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80002e4:	20000024 	.word	0x20000024

080002e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC1_2_IRQHandler>
	...

080002ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002f0:	4a15      	ldr	r2, [pc, #84]	; (8000348 <SystemInit+0x5c>)
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <SystemInit+0x5c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002fc:	4912      	ldr	r1, [pc, #72]	; (8000348 <SystemInit+0x5c>)
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <SystemInit+0x5c>)
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <SystemInit+0x60>)
 8000304:	4013      	ands	r3, r2
 8000306:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000308:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <SystemInit+0x5c>)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <SystemInit+0x5c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000316:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000318:	4a0b      	ldr	r2, [pc, #44]	; (8000348 <SystemInit+0x5c>)
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <SystemInit+0x5c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000322:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000324:	4a08      	ldr	r2, [pc, #32]	; (8000348 <SystemInit+0x5c>)
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <SystemInit+0x5c>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800032e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SystemInit+0x5c>)
 8000332:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000336:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000338:	f000 f80c 	bl	8000354 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <SystemInit+0x64>)
 800033e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000342:	609a      	str	r2, [r3, #8]
#endif 
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	f8ff0000 	.word	0xf8ff0000
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000358:	f000 f802 	bl	8000360 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}

08000360 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	2300      	movs	r3, #0
 800036c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800036e:	4a3a      	ldr	r2, [pc, #232]	; (8000458 <SetSysClockTo72+0xf8>)
 8000370:	4b39      	ldr	r3, [pc, #228]	; (8000458 <SetSysClockTo72+0xf8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000378:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800037a:	4b37      	ldr	r3, [pc, #220]	; (8000458 <SetSysClockTo72+0xf8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000382:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d103      	bne.n	8000398 <SetSysClockTo72+0x38>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000396:	d1f0      	bne.n	800037a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000398:	4b2f      	ldr	r3, [pc, #188]	; (8000458 <SetSysClockTo72+0xf8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80003a4:	2301      	movs	r3, #1
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	e001      	b.n	80003ae <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003aa:	2300      	movs	r3, #0
 80003ac:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d14b      	bne.n	800044c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <SetSysClockTo72+0xfc>)
 80003b6:	4b29      	ldr	r3, [pc, #164]	; (800045c <SetSysClockTo72+0xfc>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80003c0:	4a26      	ldr	r2, [pc, #152]	; (800045c <SetSysClockTo72+0xfc>)
 80003c2:	4b26      	ldr	r3, [pc, #152]	; (800045c <SetSysClockTo72+0xfc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <SetSysClockTo72+0xfc>)
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <SetSysClockTo72+0xfc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003d8:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <SetSysClockTo72+0xf8>)
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <SetSysClockTo72+0xf8>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <SetSysClockTo72+0xf8>)
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <SetSysClockTo72+0xf8>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <SetSysClockTo72+0xf8>)
 80003ea:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <SetSysClockTo72+0xf8>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80003f4:	4a18      	ldr	r2, [pc, #96]	; (8000458 <SetSysClockTo72+0xf8>)
 80003f6:	4b18      	ldr	r3, [pc, #96]	; (8000458 <SetSysClockTo72+0xf8>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80003fe:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000400:	4a15      	ldr	r2, [pc, #84]	; (8000458 <SetSysClockTo72+0xf8>)
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <SetSysClockTo72+0xf8>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800040a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800040c:	4a12      	ldr	r2, [pc, #72]	; (8000458 <SetSysClockTo72+0xf8>)
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <SetSysClockTo72+0xf8>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000416:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000418:	bf00      	nop
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <SetSysClockTo72+0xf8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000426:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <SetSysClockTo72+0xf8>)
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <SetSysClockTo72+0xf8>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	f023 0303 	bic.w	r3, r3, #3
 8000430:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000432:	4a09      	ldr	r2, [pc, #36]	; (8000458 <SetSysClockTo72+0xf8>)
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <SetSysClockTo72+0xf8>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800043e:	bf00      	nop
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <SetSysClockTo72+0xf8>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f003 030c 	and.w	r3, r3, #12
 8000448:	2b08      	cmp	r3, #8
 800044a:	d1f9      	bne.n	8000440 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	40022000 	.word	0x40022000

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	2500      	movs	r5, #0
 8000464:	4e0c      	ldr	r6, [pc, #48]	; (8000498 <__libc_init_array+0x38>)
 8000466:	4c0d      	ldr	r4, [pc, #52]	; (800049c <__libc_init_array+0x3c>)
 8000468:	1ba4      	subs	r4, r4, r6
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	42a5      	cmp	r5, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	f000 f81a 	bl	80004a8 <_init>
 8000474:	2500      	movs	r5, #0
 8000476:	4e0a      	ldr	r6, [pc, #40]	; (80004a0 <__libc_init_array+0x40>)
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <__libc_init_array+0x44>)
 800047a:	1ba4      	subs	r4, r4, r6
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	42a5      	cmp	r5, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000488:	4798      	blx	r3
 800048a:	3501      	adds	r5, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000492:	4798      	blx	r3
 8000494:	3501      	adds	r5, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c0 	.word	0x080004c0
 80004a4:	080004c4 	.word	0x080004c4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
