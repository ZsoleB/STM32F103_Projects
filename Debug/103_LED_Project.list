
103_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000950  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a5c  08000a5c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000a5c  08000a5c  00010a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a60  08000a60  00010a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  08000a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000006c  08000ad0  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000090  08000ad0  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000018ca  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000853  00000000  00000000  0002195f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001d0  00000000  00000000  000221b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00022388  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000fa2  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c93  00000000  00000000  00023482  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00024115  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000053c  00000000  00000000  00024194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000a44 	.word	0x08000a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08000a44 	.word	0x08000a44

0800014c <EXTI_Driver_Init>:
 */

#include "EXTI_Driver_Cfg.h"

void EXTI_Driver_Init(uint8 InterruptPinNumber, uint8 InterruptPortNumber, uint8 Action_Section)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	71bb      	strb	r3, [r7, #6]
 800015a:	4613      	mov	r3, r2
 800015c:	717b      	strb	r3, [r7, #5]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800015e:	4a59      	ldr	r2, [pc, #356]	; (80002c4 <EXTI_Driver_Init+0x178>)
 8000160:	4b58      	ldr	r3, [pc, #352]	; (80002c4 <EXTI_Driver_Init+0x178>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	f043 0301 	orr.w	r3, r3, #1
 8000168:	6193      	str	r3, [r2, #24]

	if (InterruptPinNumber < 0x04)
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	2b03      	cmp	r3, #3
 800016e:	d823      	bhi.n	80001b8 <EXTI_Driver_Init+0x6c>
	{
		AFIO->EXTICR[0] |= (InterruptPortNumber << (4 * InterruptPinNumber));
 8000170:	4855      	ldr	r0, [pc, #340]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 8000172:	4b55      	ldr	r3, [pc, #340]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	79b9      	ldrb	r1, [r7, #6]
 8000178:	79fa      	ldrb	r2, [r7, #7]
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	fa01 f202 	lsl.w	r2, r1, r2
 8000180:	4313      	orrs	r3, r2
 8000182:	6083      	str	r3, [r0, #8]
		if (Action_Section == EXTI_DRIVER_INTERRUPT_ACTION)
 8000184:	797b      	ldrb	r3, [r7, #5]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d109      	bne.n	800019e <EXTI_Driver_Init+0x52>
		{
			EXTI->IMR |= ((0x01) << InterruptPinNumber);
 800018a:	4950      	ldr	r1, [pc, #320]	; (80002cc <EXTI_Driver_Init+0x180>)
 800018c:	4b4f      	ldr	r3, [pc, #316]	; (80002cc <EXTI_Driver_Init+0x180>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	79fa      	ldrb	r2, [r7, #7]
 8000192:	2001      	movs	r0, #1
 8000194:	fa00 f202 	lsl.w	r2, r0, r2
 8000198:	4313      	orrs	r3, r2
 800019a:	600b      	str	r3, [r1, #0]
 800019c:	e036      	b.n	800020c <EXTI_Driver_Init+0xc0>
		}

		else if (Action_Section == EXTI_DRIVER_EVENT_ACTION)
 800019e:	797b      	ldrb	r3, [r7, #5]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d133      	bne.n	800020c <EXTI_Driver_Init+0xc0>
		{
			EXTI->EMR |= ((0x01) << InterruptPinNumber);
 80001a4:	4949      	ldr	r1, [pc, #292]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001a6:	4b49      	ldr	r3, [pc, #292]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	79fa      	ldrb	r2, [r7, #7]
 80001ac:	2001      	movs	r0, #1
 80001ae:	fa00 f202 	lsl.w	r2, r0, r2
 80001b2:	4313      	orrs	r3, r2
 80001b4:	604b      	str	r3, [r1, #4]
 80001b6:	e029      	b.n	800020c <EXTI_Driver_Init+0xc0>
		{
			/*Nothing to do*/
		}
	}

	else if ((InterruptPinNumber < 0x08) && (InterruptPinNumber >= 0x04))
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	2b07      	cmp	r3, #7
 80001bc:	d826      	bhi.n	800020c <EXTI_Driver_Init+0xc0>
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	2b03      	cmp	r3, #3
 80001c2:	d923      	bls.n	800020c <EXTI_Driver_Init+0xc0>
	{
		AFIO->EXTICR[1] |= (InterruptPortNumber << (4 * (InterruptPinNumber - 0x04)));
 80001c4:	4840      	ldr	r0, [pc, #256]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 80001c6:	4b40      	ldr	r3, [pc, #256]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 80001c8:	68db      	ldr	r3, [r3, #12]
 80001ca:	79b9      	ldrb	r1, [r7, #6]
 80001cc:	79fa      	ldrb	r2, [r7, #7]
 80001ce:	3a04      	subs	r2, #4
 80001d0:	0092      	lsls	r2, r2, #2
 80001d2:	fa01 f202 	lsl.w	r2, r1, r2
 80001d6:	4313      	orrs	r3, r2
 80001d8:	60c3      	str	r3, [r0, #12]
		if (Action_Section == EXTI_DRIVER_INTERRUPT_ACTION)
 80001da:	797b      	ldrb	r3, [r7, #5]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d109      	bne.n	80001f4 <EXTI_Driver_Init+0xa8>
		{
			EXTI->IMR |= ((0x01) << InterruptPinNumber);
 80001e0:	493a      	ldr	r1, [pc, #232]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001e2:	4b3a      	ldr	r3, [pc, #232]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	79fa      	ldrb	r2, [r7, #7]
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	e00b      	b.n	800020c <EXTI_Driver_Init+0xc0>
		}

		else if (Action_Section == EXTI_DRIVER_EVENT_ACTION)
 80001f4:	797b      	ldrb	r3, [r7, #5]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d108      	bne.n	800020c <EXTI_Driver_Init+0xc0>
		{
			EXTI->EMR |= ((0x01) << InterruptPinNumber);
 80001fa:	4934      	ldr	r1, [pc, #208]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <EXTI_Driver_Init+0x180>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	79fa      	ldrb	r2, [r7, #7]
 8000202:	2001      	movs	r0, #1
 8000204:	fa00 f202 	lsl.w	r2, r0, r2
 8000208:	4313      	orrs	r3, r2
 800020a:	604b      	str	r3, [r1, #4]
		{
			/*Nothing to do*/
		}
	}

	if ((InterruptPinNumber < 0x0C) && (InterruptPinNumber >= 0x08))
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b0b      	cmp	r3, #11
 8000210:	d826      	bhi.n	8000260 <EXTI_Driver_Init+0x114>
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2b07      	cmp	r3, #7
 8000216:	d923      	bls.n	8000260 <EXTI_Driver_Init+0x114>
	{
		AFIO->EXTICR[2] |= (InterruptPortNumber << (4 * (InterruptPinNumber - 0x08)));
 8000218:	482b      	ldr	r0, [pc, #172]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 800021a:	4b2b      	ldr	r3, [pc, #172]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	79b9      	ldrb	r1, [r7, #6]
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	3a08      	subs	r2, #8
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4313      	orrs	r3, r2
 800022c:	6103      	str	r3, [r0, #16]
		if (Action_Section == EXTI_DRIVER_INTERRUPT_ACTION)
 800022e:	797b      	ldrb	r3, [r7, #5]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d109      	bne.n	8000248 <EXTI_Driver_Init+0xfc>
		{
			EXTI->IMR |= ((0x01) << InterruptPinNumber);
 8000234:	4925      	ldr	r1, [pc, #148]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000236:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	79fa      	ldrb	r2, [r7, #7]
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	4313      	orrs	r3, r2
 8000244:	600b      	str	r3, [r1, #0]
 8000246:	e00b      	b.n	8000260 <EXTI_Driver_Init+0x114>
		}

		else if (Action_Section == EXTI_DRIVER_EVENT_ACTION)
 8000248:	797b      	ldrb	r3, [r7, #5]
 800024a:	2b01      	cmp	r3, #1
 800024c:	d108      	bne.n	8000260 <EXTI_Driver_Init+0x114>
		{
			EXTI->EMR |= ((0x01) << InterruptPinNumber);
 800024e:	491f      	ldr	r1, [pc, #124]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	2001      	movs	r0, #1
 8000258:	fa00 f202 	lsl.w	r2, r0, r2
 800025c:	4313      	orrs	r3, r2
 800025e:	604b      	str	r3, [r1, #4]
		{
			/*Nothing to do*/
		}
	}

	if (InterruptPinNumber >= 0x0C)
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b0b      	cmp	r3, #11
 8000264:	d923      	bls.n	80002ae <EXTI_Driver_Init+0x162>
	{
		AFIO->EXTICR[3] |= (InterruptPortNumber << (4 * (InterruptPinNumber - 0x0C)));
 8000266:	4818      	ldr	r0, [pc, #96]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <EXTI_Driver_Init+0x17c>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	79b9      	ldrb	r1, [r7, #6]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	3a0c      	subs	r2, #12
 8000272:	0092      	lsls	r2, r2, #2
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	4313      	orrs	r3, r2
 800027a:	6143      	str	r3, [r0, #20]
		if (Action_Section == EXTI_DRIVER_INTERRUPT_ACTION)
 800027c:	797b      	ldrb	r3, [r7, #5]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d109      	bne.n	8000296 <EXTI_Driver_Init+0x14a>
		{
			EXTI->IMR |= ((0x01) << InterruptPinNumber);
 8000282:	4912      	ldr	r1, [pc, #72]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <EXTI_Driver_Init+0x180>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	79fa      	ldrb	r2, [r7, #7]
 800028a:	2001      	movs	r0, #1
 800028c:	fa00 f202 	lsl.w	r2, r0, r2
 8000290:	4313      	orrs	r3, r2
 8000292:	600b      	str	r3, [r1, #0]
 8000294:	e00b      	b.n	80002ae <EXTI_Driver_Init+0x162>
		}

		else if (Action_Section == EXTI_DRIVER_EVENT_ACTION)
 8000296:	797b      	ldrb	r3, [r7, #5]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d108      	bne.n	80002ae <EXTI_Driver_Init+0x162>
		{
			EXTI->EMR |= ((0x01) << InterruptPinNumber);
 800029c:	490b      	ldr	r1, [pc, #44]	; (80002cc <EXTI_Driver_Init+0x180>)
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <EXTI_Driver_Init+0x180>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	79fa      	ldrb	r2, [r7, #7]
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	4313      	orrs	r3, r2
 80002ac:	604b      	str	r3, [r1, #4]
			/*Nothing to do*/
		}
	}

#if(EXTI_DRIVER_INTERRUPT_MODE==OK)
	NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_3);
 80002ae:	2004      	movs	r0, #4
 80002b0:	f000 fa00 	bl	80006b4 <NVIC_Driver_PriorityGroupConfig>
	NVIC_Driver_Set_EXTI_Interrupt(((uint8) 0x01), ((uint8) 0x01));
 80002b4:	2101      	movs	r1, #1
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fa22 	bl	8000700 <NVIC_Driver_Set_EXTI_Interrupt>
#endif
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000
 80002cc:	40010400 	.word	0x40010400

080002d0 <EXTI_Driver_Rising_Trigger_Select>:

void EXTI_Driver_Rising_Trigger_Select(uint8 InterruptNumber)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	EXTI->RTSR|=((0x01)<<InterruptNumber);
 80002da:	4907      	ldr	r1, [pc, #28]	; (80002f8 <EXTI_Driver_Rising_Trigger_Select+0x28>)
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <EXTI_Driver_Rising_Trigger_Select+0x28>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	79fa      	ldrb	r2, [r7, #7]
 80002e2:	2001      	movs	r0, #1
 80002e4:	fa00 f202 	lsl.w	r2, r0, r2
 80002e8:	4313      	orrs	r3, r2
 80002ea:	608b      	str	r3, [r1, #8]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400

080002fc <EXTI_Driver_Generate_SWInterrupt>:
void EXTI_Driver_Falling_Trigger_Clear(uint8 InterruptNumber)
{
	EXTI->FTSR &= ~(((0x01)<<InterruptNumber));
}
void EXTI_Driver_Generate_SWInterrupt(uint8 InterruptNumber)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	/*If the interrupt is enabled on this line in the EXTI_IMR, writing a '1' to this bit when it is set to
	'0' sets the corresponding pending bit in EXTI_PR resulting in an interrupt request
	generation.*/
	if((EXTI->IMR & (0x01<<InterruptNumber))!=0x00)
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <EXTI_Driver_Generate_SWInterrupt+0x38>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	79fa      	ldrb	r2, [r7, #7]
 800030c:	2101      	movs	r1, #1
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	4013      	ands	r3, r2
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI_Driver_Generate_SWInterrupt+0x2e>
	{
		EXTI->SWIER|=((0x01)<<InterruptNumber);
 8000318:	4906      	ldr	r1, [pc, #24]	; (8000334 <EXTI_Driver_Generate_SWInterrupt+0x38>)
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <EXTI_Driver_Generate_SWInterrupt+0x38>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	79fa      	ldrb	r2, [r7, #7]
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	4313      	orrs	r3, r2
 8000328:	610b      	str	r3, [r1, #16]
	}
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40010400 	.word	0x40010400

08000338 <EXTI_Driver_Clear_PendingInterrupt>:

void EXTI_Driver_Clear_PendingInterrupt(uint8 InterruptNumber)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	EXTI->PR|=((0x01)<<InterruptNumber);
 8000342:	4907      	ldr	r1, [pc, #28]	; (8000360 <EXTI_Driver_Clear_PendingInterrupt+0x28>)
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <EXTI_Driver_Clear_PendingInterrupt+0x28>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	79fa      	ldrb	r2, [r7, #7]
 800034a:	2001      	movs	r0, #1
 800034c:	fa00 f202 	lsl.w	r2, r0, r2
 8000350:	4313      	orrs	r3, r2
 8000352:	614b      	str	r3, [r1, #20]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400

08000364 <GPIO_Driver_Init>:
#include "GPIO_Driver_Cfg.h"


/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 8000364:	b4f0      	push	{r4, r5, r6, r7}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 800036a:	2300      	movs	r3, #0
 800036c:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 800036e:	2300      	movs	r3, #0
 8000370:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 8000372:	4a9e      	ldr	r2, [pc, #632]	; (80005ec <GPIO_Driver_Init+0x288>)
 8000374:	4b9d      	ldr	r3, [pc, #628]	; (80005ec <GPIO_Driver_Init+0x288>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6193      	str	r3, [r2, #24]
	#endif
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 800037e:	2300      	movs	r3, #0
 8000380:	80fb      	strh	r3, [r7, #6]
 8000382:	e129      	b.n	80005d8 <GPIO_Driver_Init+0x274>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 8000384:	2300      	movs	r3, #0
 8000386:	80bb      	strh	r3, [r7, #4]
 8000388:	e117      	b.n	80005ba <GPIO_Driver_Init+0x256>
		{
			if((GPIO_SETUP[index].GPIO_Pins[index1])<0x08)
 800038a:	4b99      	ldr	r3, [pc, #612]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	2168      	movs	r1, #104	; 0x68
 8000392:	fb01 f303 	mul.w	r3, r1, r3
 8000396:	441a      	add	r2, r3
 8000398:	88bb      	ldrh	r3, [r7, #4]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	88db      	ldrh	r3, [r3, #6]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	f200 8082 	bhi.w	80004aa <GPIO_Driver_Init+0x146>
			{
				/*The first step is to clear the default setting*/
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80003a6:	4b92      	ldr	r3, [pc, #584]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	88fb      	ldrh	r3, [r7, #6]
 80003ac:	2168      	movs	r1, #104	; 0x68
 80003ae:	fb01 f303 	mul.w	r3, r1, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b8e      	ldr	r3, [pc, #568]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	2068      	movs	r0, #104	; 0x68
 80003be:	fb00 f303 	mul.w	r3, r0, r3
 80003c2:	440b      	add	r3, r1
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6819      	ldr	r1, [r3, #0]
 80003c8:	4b89      	ldr	r3, [pc, #548]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80003ca:	6818      	ldr	r0, [r3, #0]
 80003cc:	88fb      	ldrh	r3, [r7, #6]
 80003ce:	2468      	movs	r4, #104	; 0x68
 80003d0:	fb04 f303 	mul.w	r3, r4, r3
 80003d4:	4418      	add	r0, r3
 80003d6:	88bb      	ldrh	r3, [r7, #4]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4403      	add	r3, r0
 80003dc:	88db      	ldrh	r3, [r3, #6]
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	2003      	movs	r0, #3
 80003e2:	fa00 f303 	lsl.w	r3, r0, r3
 80003e6:	461d      	mov	r5, r3
							  	  	  	  	  	  	  ((uint32)(0x03 <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))))));
 80003e8:	4b81      	ldr	r3, [pc, #516]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80003ea:	6818      	ldr	r0, [r3, #0]
 80003ec:	88fb      	ldrh	r3, [r7, #6]
 80003ee:	2468      	movs	r4, #104	; 0x68
 80003f0:	fb04 f303 	mul.w	r3, r4, r3
 80003f4:	4418      	add	r0, r3
 80003f6:	88bb      	ldrh	r3, [r7, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	4403      	add	r3, r0
 80003fc:	88db      	ldrh	r3, [r3, #6]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	3302      	adds	r3, #2
 8000402:	2003      	movs	r0, #3
 8000404:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000408:	432b      	orrs	r3, r5
 800040a:	43db      	mvns	r3, r3
 800040c:	400b      	ands	r3, r1
 800040e:	6013      	str	r3, [r2, #0]
				/*Set the GPIO configuration*/
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000410:	4b77      	ldr	r3, [pc, #476]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	88fb      	ldrh	r3, [r7, #6]
 8000416:	2168      	movs	r1, #104	; 0x68
 8000418:	fb01 f303 	mul.w	r3, r1, r3
 800041c:	4413      	add	r3, r2
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b73      	ldr	r3, [pc, #460]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000422:	6819      	ldr	r1, [r3, #0]
 8000424:	88fb      	ldrh	r3, [r7, #6]
 8000426:	2068      	movs	r0, #104	; 0x68
 8000428:	fb00 f303 	mul.w	r3, r0, r3
 800042c:	440b      	add	r3, r1
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	4b6f      	ldr	r3, [pc, #444]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000434:	6818      	ldr	r0, [r3, #0]
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	2468      	movs	r4, #104	; 0x68
 800043a:	fb04 f303 	mul.w	r3, r4, r3
 800043e:	4418      	add	r0, r3
 8000440:	88bb      	ldrh	r3, [r7, #4]
 8000442:	3310      	adds	r3, #16
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4403      	add	r3, r0
 8000448:	88db      	ldrh	r3, [r3, #6]
 800044a:	461d      	mov	r5, r3
 800044c:	4b68      	ldr	r3, [pc, #416]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	88fb      	ldrh	r3, [r7, #6]
 8000452:	2468      	movs	r4, #104	; 0x68
 8000454:	fb04 f303 	mul.w	r3, r4, r3
 8000458:	4418      	add	r0, r3
 800045a:	88bb      	ldrh	r3, [r7, #4]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	4403      	add	r3, r0
 8000460:	88db      	ldrh	r3, [r3, #6]
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	fa05 f303 	lsl.w	r3, r5, r3
 8000468:	461d      	mov	r5, r3
													((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))));
 800046a:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800046c:	6818      	ldr	r0, [r3, #0]
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	2468      	movs	r4, #104	; 0x68
 8000472:	fb04 f303 	mul.w	r3, r4, r3
 8000476:	4418      	add	r0, r3
 8000478:	88bb      	ldrh	r3, [r7, #4]
 800047a:	3320      	adds	r3, #32
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4403      	add	r3, r0
 8000480:	88db      	ldrh	r3, [r3, #6]
 8000482:	461e      	mov	r6, r3
 8000484:	4b5a      	ldr	r3, [pc, #360]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	2468      	movs	r4, #104	; 0x68
 800048c:	fb04 f303 	mul.w	r3, r4, r3
 8000490:	4418      	add	r0, r3
 8000492:	88bb      	ldrh	r3, [r7, #4]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	4403      	add	r3, r0
 8000498:	88db      	ldrh	r3, [r3, #6]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	3302      	adds	r3, #2
 800049e:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80004a2:	432b      	orrs	r3, r5
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6013      	str	r3, [r2, #0]
 80004a8:	e084      	b.n	80005b4 <GPIO_Driver_Init+0x250>
			}
			else
			{
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80004aa:	4b51      	ldr	r3, [pc, #324]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	2168      	movs	r1, #104	; 0x68
 80004b2:	fb01 f303 	mul.w	r3, r1, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b4d      	ldr	r3, [pc, #308]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80004bc:	6819      	ldr	r1, [r3, #0]
 80004be:	88fb      	ldrh	r3, [r7, #6]
 80004c0:	2068      	movs	r0, #104	; 0x68
 80004c2:	fb00 f303 	mul.w	r3, r0, r3
 80004c6:	440b      	add	r3, r1
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6859      	ldr	r1, [r3, #4]
 80004cc:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	88fb      	ldrh	r3, [r7, #6]
 80004d2:	2468      	movs	r4, #104	; 0x68
 80004d4:	fb04 f303 	mul.w	r3, r4, r3
 80004d8:	4418      	add	r0, r3
 80004da:	88bb      	ldrh	r3, [r7, #4]
 80004dc:	005b      	lsls	r3, r3, #1
 80004de:	4403      	add	r3, r0
 80004e0:	88db      	ldrh	r3, [r3, #6]
 80004e2:	3b08      	subs	r3, #8
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	2003      	movs	r0, #3
 80004e8:	fa00 f303 	lsl.w	r3, r0, r3
 80004ec:	461d      	mov	r5, r3
				              	  	  	  	  	  	((uint32)(0x03 <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))))));
 80004ee:	4b40      	ldr	r3, [pc, #256]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	2468      	movs	r4, #104	; 0x68
 80004f6:	fb04 f303 	mul.w	r3, r4, r3
 80004fa:	4418      	add	r0, r3
 80004fc:	88bb      	ldrh	r3, [r7, #4]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4403      	add	r3, r0
 8000502:	88db      	ldrh	r3, [r3, #6]
 8000504:	3b08      	subs	r3, #8
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	3302      	adds	r3, #2
 800050a:	2003      	movs	r0, #3
 800050c:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000510:	432b      	orrs	r3, r5
 8000512:	43db      	mvns	r3, r3
 8000514:	400b      	ands	r3, r1
 8000516:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	2168      	movs	r1, #104	; 0x68
 8000520:	fb01 f303 	mul.w	r3, r1, r3
 8000524:	4413      	add	r3, r2
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b31      	ldr	r3, [pc, #196]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	2068      	movs	r0, #104	; 0x68
 8000530:	fb00 f303 	mul.w	r3, r0, r3
 8000534:	440b      	add	r3, r1
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6859      	ldr	r1, [r3, #4]
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2468      	movs	r4, #104	; 0x68
 8000542:	fb04 f303 	mul.w	r3, r4, r3
 8000546:	4418      	add	r0, r3
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	3310      	adds	r3, #16
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4403      	add	r3, r0
 8000550:	88db      	ldrh	r3, [r3, #6]
 8000552:	461d      	mov	r5, r3
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	2468      	movs	r4, #104	; 0x68
 800055c:	fb04 f303 	mul.w	r3, r4, r3
 8000560:	4418      	add	r0, r3
 8000562:	88bb      	ldrh	r3, [r7, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4403      	add	r3, r0
 8000568:	88db      	ldrh	r3, [r3, #6]
 800056a:	3b08      	subs	r3, #8
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	fa05 f303 	lsl.w	r3, r5, r3
 8000572:	461d      	mov	r5, r3
							  	  	  	  	  	    ((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))));
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	2468      	movs	r4, #104	; 0x68
 800057c:	fb04 f303 	mul.w	r3, r4, r3
 8000580:	4418      	add	r0, r3
 8000582:	88bb      	ldrh	r3, [r7, #4]
 8000584:	3320      	adds	r3, #32
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	4403      	add	r3, r0
 800058a:	88db      	ldrh	r3, [r3, #6]
 800058c:	461e      	mov	r6, r3
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	2468      	movs	r4, #104	; 0x68
 8000596:	fb04 f303 	mul.w	r3, r4, r3
 800059a:	4418      	add	r0, r3
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4403      	add	r3, r0
 80005a2:	88db      	ldrh	r3, [r3, #6]
 80005a4:	3b08      	subs	r3, #8
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	3302      	adds	r3, #2
 80005aa:	fa06 f303 	lsl.w	r3, r6, r3
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80005ae:	432b      	orrs	r3, r5
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6053      	str	r3, [r2, #4]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	80bb      	strh	r3, [r7, #4]
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <GPIO_Driver_Init+0x28c>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	2168      	movs	r1, #104	; 0x68
 80005c2:	fb01 f303 	mul.w	r3, r1, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	88ba      	ldrh	r2, [r7, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	f4ff aedc 	bcc.w	800038a <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	3301      	adds	r3, #1
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f43f aed2 	beq.w	8000384 <GPIO_Driver_Init+0x20>
			}
		}
	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	20000068 	.word	0x20000068

080005f4 <NVIC_Driver_SetInterrupt>:
 */

#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	460b      	mov	r3, r1
 8000600:	71bb      	strb	r3, [r7, #6]
 8000602:	4613      	mov	r3, r2
 8000604:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 800060e:	230f      	movs	r3, #15
 8000610:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 8000616:	230f      	movs	r3, #15
 8000618:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <NVIC_Driver_SetInterrupt+0xb8>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	43db      	mvns	r3, r3
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0307 	and.w	r3, r3, #7
 800062c:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 800062e:	7b7a      	ldrb	r2, [r7, #13]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	fa42 f303 	asr.w	r3, r2, r3
 8000636:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	f1c3 0304 	rsb	r3, r3, #4
 800063e:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 8000640:	79ba      	ldrb	r2, [r7, #6]
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 800064a:	797a      	ldrb	r2, [r7, #5]
 800064c:	7b7b      	ldrb	r3, [r7, #13]
 800064e:	4013      	ands	r3, r2
 8000650:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 8000652:	7b3a      	ldrb	r2, [r7, #12]
 8000654:	7afb      	ldrb	r3, [r7, #11]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	da08      	bge.n	8000678 <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <NVIC_Driver_SetInterrupt+0xb8>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	3b04      	subs	r3, #4
 8000670:	4413      	add	r3, r2
 8000672:	7aba      	ldrb	r2, [r7, #10]
 8000674:	761a      	strb	r2, [r3, #24]
 8000676:	e006      	b.n	8000686 <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <NVIC_Driver_SetInterrupt+0xbc>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	4413      	add	r3, r2
 8000680:	7aba      	ldrb	r2, [r7, #10]
 8000682:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <NVIC_Driver_SetInterrupt+0xbc>)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	115b      	asrs	r3, r3, #5
 800068e:	b25b      	sxtb	r3, r3
 8000690:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 031f 	and.w	r3, r3, #31
 8000698:	2101      	movs	r1, #1
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 800069e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000e100 	.word	0xe000e100

080006b4 <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <NVIC_Driver_PriorityGroupConfig+0x48>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d2:	4013      	ands	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4313      	orrs	r3, r2
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <NVIC_Driver_PriorityGroupConfig+0x48>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_Driver_Set_EXTI_Interrupt>:

#endif

#if (NVIC_DRIVER_EXTI_INTERRUPT_ENABLE	== OK)
	void NVIC_Driver_Set_EXTI_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
	#ifdef NVIC_DRIVER_EXTI_0_FLAG
				NVIC_Driver_SetInterrupt(EXTI0_IRQn,Preemption_priority,Sub_priority);
	#endif

	#ifdef NVIC_DRIVER_EXTI_1_FLAG
				NVIC_Driver_SetInterrupt(EXTI1_IRQn,Preemption_priority,Sub_priority);
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4619      	mov	r1, r3
 8000716:	2007      	movs	r0, #7
 8000718:	f7ff ff6c 	bl	80005f4 <NVIC_Driver_SetInterrupt>
	#endif

	#ifdef NVIC_DRIVER_EXTI_15_FLAG
			NVIC_Driver_SetInterrupt(EXTI15_10_IRQn,Preemption_priority,Sub_priority);
	#endif
	}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <NVIC_Driver_Set_SYSTICK_Interrupt>:
#endif

#if (NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE == OK)
	void NVIC_Driver_Set_SYSTICK_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
		/*Enable the Systick interrupt */
		SysTick->CTRL|=(0x01<<0x01);
 8000734:	4a08      	ldr	r2, [pc, #32]	; (8000758 <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6013      	str	r3, [r2, #0]
		NVIC_Driver_SetInterrupt(SysTick_IRQn,Preemption_priority,Sub_priority);
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4619      	mov	r1, r3
 8000746:	f04f 30ff 	mov.w	r0, #4294967295
 800074a:	f7ff ff53 	bl	80005f4 <NVIC_Driver_SetInterrupt>
	}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SysTick_Handler+0x20>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d004      	beq.n	8000772 <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Handler+0x20>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a03      	ldr	r2, [pc, #12]	; (800077c <SysTick_Handler+0x20>)
 8000770:	6013      	str	r3, [r2, #0]
	}
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000088 	.word	0x20000088

08000780 <SYSTICK_Driver_Init>:

void SYSTICK_Driver_Init()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	/*Set the processor clock as the clock source */
	SysTick->CTRL|=(0x01<<0x02);
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SYSTICK_Driver_Init+0x30>)
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <SYSTICK_Driver_Init+0x30>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6013      	str	r3, [r2, #0]
	#if(SYSTICK_DRIVER_ENABLE_INTERRUPT == OK)
		/*Set the timer interrupt and its priority and sub-priority*/
		NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f7ff ff8f 	bl	80006b4 <NVIC_Driver_PriorityGroupConfig>
		NVIC_Driver_Set_SYSTICK_Interrupt(0x0F,0x00);
 8000796:	2100      	movs	r1, #0
 8000798:	200f      	movs	r0, #15
 800079a:	f7ff ffc3 	bl	8000724 <NVIC_Driver_Set_SYSTICK_Interrupt>
	#endif
	/*Init the Systick current value register*/
	SysTick->VAL = 0x00;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SYSTICK_Driver_Init+0x30>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	/*Set the load register with the configured value*/
	SysTick->LOAD = ((SYSTICK_DRIVER_LOAD & 0xFFFFFFUL)-1);
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <SYSTICK_Driver_Init+0x30>)
 80007a6:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <SYSTICK_Driver_Init+0x34>)
 80007a8:	605a      	str	r2, [r3, #4]
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010
 80007b4:	0001193f 	.word	0x0001193f

080007b8 <SYSTICK_Driver_Start>:

void SYSTICK_Driver_Start()
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
	/*Enable the systick timer*/
	SysTick->CTRL|=0x01;
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <SYSTICK_Driver_Start+0x18>)
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SYSTICK_Driver_Start+0x18>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <EXTI1_IRQHandler>:
#include "EXTI_Driver_Cfg.h"

uint8 daCounter = 0x00;

void EXTI1_IRQHandler()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	daCounter++;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <EXTI1_IRQHandler+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <EXTI1_IRQHandler+0x1c>)
 80007e2:	701a      	strb	r2, [r3, #0]
	EXTI_Driver_Clear_PendingInterrupt(EXTI_DRIVER_INTERRUPT_PIN_1);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff fda7 	bl	8000338 <EXTI_Driver_Clear_PendingInterrupt>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000008c 	.word	0x2000008c

080007f4 <main>:

int main()
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	SYSTICK_Driver_Init();
 80007f8:	f7ff ffc2 	bl	8000780 <SYSTICK_Driver_Init>
	SYSTICK_Driver_Start();
 80007fc:	f7ff ffdc 	bl	80007b8 <SYSTICK_Driver_Start>

	GPIO_Driver_Init();
 8000800:	f7ff fdb0 	bl	8000364 <GPIO_Driver_Init>
	EXTI_Driver_Init(EXTI_DRIVER_INTERRUPT_PIN_1,EXTI_DRIVER_INTERRUPT_PORT_A,EXTI_DRIVER_INTERRUPT_ACTION);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff fc9f 	bl	800014c <EXTI_Driver_Init>
	EXTI_Driver_Rising_Trigger_Select(EXTI_DRIVER_INTERRUPT_PIN_1);
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fd5e 	bl	80002d0 <EXTI_Driver_Rising_Trigger_Select>

	while (1)
	{
		daCounter++;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <main+0x3c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <main+0x3c>)
 800081e:	701a      	strb	r2, [r3, #0]
		if(daCounter==0x07)
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <main+0x3c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d1f5      	bne.n	8000814 <main+0x20>
		{
			EXTI_Driver_Generate_SWInterrupt(EXTI_DRIVER_INTERRUPT_PIN_1);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff fd67 	bl	80002fc <EXTI_Driver_Generate_SWInterrupt>
		daCounter++;
 800082e:	e7f1      	b.n	8000814 <main+0x20>
 8000830:	2000008c 	.word	0x2000008c

08000834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800086c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000838:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800083a:	e003      	b.n	8000844 <LoopCopyDataInit>

0800083c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800083e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000840:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000842:	3104      	adds	r1, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000848:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800084a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800084c:	d3f6      	bcc.n	800083c <CopyDataInit>
	ldr	r2, =_sbss
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000850:	e002      	b.n	8000858 <LoopFillZerobss>

08000852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000852:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000854:	f842 3b04 	str.w	r3, [r2], #4

08000858 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800085a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800085c:	d3f9      	bcc.n	8000852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800085e:	f000 f813 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f000 f8cb 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000866:	f7ff ffc5 	bl	80007f4 <main>
	bx	lr
 800086a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800086c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000870:	08000a64 	.word	0x08000a64
	ldr	r0, =_sdata
 8000874:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000878:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 800087c:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8000880:	20000090 	.word	0x20000090

08000884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_2_IRQHandler>
	...

08000888 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <SystemInit+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <SystemInit+0x5c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000898:	4912      	ldr	r1, [pc, #72]	; (80008e4 <SystemInit+0x5c>)
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <SystemInit+0x5c>)
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <SystemInit+0x60>)
 80008a0:	4013      	ands	r3, r2
 80008a2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008a4:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <SystemInit+0x5c>)
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <SystemInit+0x5c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <SystemInit+0x5c>)
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <SystemInit+0x5c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <SystemInit+0x5c>)
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <SystemInit+0x5c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008ca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SystemInit+0x5c>)
 80008ce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008d2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80008d4:	f000 f80c 	bl	80008f0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SystemInit+0x64>)
 80008da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008de:	609a      	str	r2, [r3, #8]
#endif 
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000
 80008e8:	f8ff0000 	.word	0xf8ff0000
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80008f4:	f000 f802 	bl	80008fc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800090a:	4a3a      	ldr	r2, [pc, #232]	; (80009f4 <SetSysClockTo72+0xf8>)
 800090c:	4b39      	ldr	r3, [pc, #228]	; (80009f4 <SetSysClockTo72+0xf8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000914:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000916:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d103      	bne.n	8000934 <SetSysClockTo72+0x38>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000932:	d1f0      	bne.n	8000916 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000940:	2301      	movs	r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	e001      	b.n	800094a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d14b      	bne.n	80009e8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000950:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <SetSysClockTo72+0xfc>)
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SetSysClockTo72+0xfc>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800095c:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <SetSysClockTo72+0xfc>)
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <SetSysClockTo72+0xfc>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 0303 	bic.w	r3, r3, #3
 8000966:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000968:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <SetSysClockTo72+0xfc>)
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <SetSysClockTo72+0xfc>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000974:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <SetSysClockTo72+0xf8>)
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000986:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <SetSysClockTo72+0xf8>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800099a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800099c:	4a15      	ldr	r2, [pc, #84]	; (80009f4 <SetSysClockTo72+0xf8>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80009a6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009b2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009b4:	bf00      	nop
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f9      	beq.n	80009b6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f023 0303 	bic.w	r3, r3, #3
 80009cc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80009da:	bf00      	nop
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SetSysClockTo72+0xf8>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 030c 	and.w	r3, r3, #12
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d1f9      	bne.n	80009dc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40022000 	.word	0x40022000

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	2500      	movs	r5, #0
 8000a00:	4e0c      	ldr	r6, [pc, #48]	; (8000a34 <__libc_init_array+0x38>)
 8000a02:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a04:	1ba4      	subs	r4, r4, r6
 8000a06:	10a4      	asrs	r4, r4, #2
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	f000 f81a 	bl	8000a44 <_init>
 8000a10:	2500      	movs	r5, #0
 8000a12:	4e0a      	ldr	r6, [pc, #40]	; (8000a3c <__libc_init_array+0x40>)
 8000a14:	4c0a      	ldr	r4, [pc, #40]	; (8000a40 <__libc_init_array+0x44>)
 8000a16:	1ba4      	subs	r4, r4, r6
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	42a5      	cmp	r5, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a24:	4798      	blx	r3
 8000a26:	3501      	adds	r5, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a2e:	4798      	blx	r3
 8000a30:	3501      	adds	r5, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a5c 	.word	0x08000a5c
 8000a38:	08000a5c 	.word	0x08000a5c
 8000a3c:	08000a5c 	.word	0x08000a5c
 8000a40:	08000a60 	.word	0x08000a60

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	bf00      	nop
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	bf00      	nop
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
