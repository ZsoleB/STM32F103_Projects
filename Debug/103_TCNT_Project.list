
103_TCNT_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ec  080005ec  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005f0  080005f0  000105f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080005f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000004  080005f8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000028  080005f8  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001350  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000438  00000000  00000000  0002137d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000f0  00000000  00000000  000217b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000218a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000701  00000000  00000000  00021960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000089e  00000000  00000000  00022061  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000228ff  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002ac  00000000  00000000  0002297c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005d4 	.word	0x080005d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005d4 	.word	0x080005d4

0800014c <TCNT_Driver_Init>:

#include "TCNT_Driver.h"
#include "TCNT_Driver_Cfg.h"

void TCNT_Driver_Init(TIM_TypeDef* TIMx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
#if ((TCNT_DRIVER_TIMER_3)==OK)
	RCC->APB1ENR|=RCC_APB1ENR_TIM3EN;
#endif

#if ((TCNT_DRIVER_TIMER_2)==OK)
	RCC->APB1ENR|=RCC_APB1ENR_TIM2EN;
 8000154:	4a0b      	ldr	r2, [pc, #44]	; (8000184 <TCNT_Driver_Init+0x38>)
 8000156:	4b0b      	ldr	r3, [pc, #44]	; (8000184 <TCNT_Driver_Init+0x38>)
 8000158:	69db      	ldr	r3, [r3, #28]
 800015a:	f043 0301 	orr.w	r3, r3, #1
 800015e:	61d3      	str	r3, [r2, #28]

#if ((TCNT_DRIVER_TIMER_1)==OK)
	RCC->APB2ENR|=RCC_APB2ENR_TIM1EN;
#endif

	TIMx->CR1|= TCNT_DRIVER_DIRECTION;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	881b      	ldrh	r3, [r3, #0]
 8000164:	b29a      	uxth	r2, r3
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	801a      	strh	r2, [r3, #0]
	TIMx->EGR|= TCNT_DRIVER_UPDATE_GENERATION;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	8a9b      	ldrh	r3, [r3, #20]
 800016e:	b29b      	uxth	r3, r3
 8000170:	f043 0301 	orr.w	r3, r3, #1
 8000174:	b29a      	uxth	r2, r3
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	829a      	strh	r2, [r3, #20]
}
 800017a:	bf00      	nop
 800017c:	370c      	adds	r7, #12
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr
 8000184:	40021000 	.word	0x40021000

08000188 <TCNT_Driver_SetPeriod>:

void TCNT_Driver_SetPeriod(TIM_TypeDef* TIMx,uint32 PeriodValue)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	6039      	str	r1, [r7, #0]
	TIMx->ARR = PeriodValue;
 8000192:	683b      	ldr	r3, [r7, #0]
 8000194:	b29a      	uxth	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <TCNT_Driver_SetPrescale>:

void TCNT_Driver_SetPrescale(TIM_TypeDef* TIMx,uint32 PrescaleValue)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	6039      	str	r1, [r7, #0]
	TIMx->PSC = PrescaleValue;
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <TCNT_Driver_Start>:

void TCNT_Driver_Start(TIM_TypeDef* TIMx)
{
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	TIMx->CR1|=TCNT_DRIVER_COUNTER_ENABLE;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	f043 0301 	orr.w	r3, r3, #1
 80001d2:	b29a      	uxth	r2, r3
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	801a      	strh	r2, [r3, #0]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <TCNT_Driver_ClearStatus>:

void TCNT_Driver_ClearStatus(TIM_TypeDef* TIMx)
{
 80001e2:	b480      	push	{r7}
 80001e4:	b083      	sub	sp, #12
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
	TIMx->SR = ((uint16)(0x00));
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	821a      	strh	r2, [r3, #16]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr

080001fa <TCNT_Driver_GetStatus>:

uint8 TCNT_Driver_GetStatus(TIM_TypeDef* TIMx,uint8 Event)
{
 80001fa:	b480      	push	{r7}
 80001fc:	b083      	sub	sp, #12
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
 8000202:	460b      	mov	r3, r1
 8000204:	70fb      	strb	r3, [r7, #3]
	if(((TIMx->SR) & Event)==TRUE)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	8a1b      	ldrh	r3, [r3, #16]
 800020a:	b29b      	uxth	r3, r3
 800020c:	461a      	mov	r2, r3
 800020e:	78fb      	ldrb	r3, [r7, #3]
 8000210:	4013      	ands	r3, r2
 8000212:	2b01      	cmp	r3, #1
 8000214:	d101      	bne.n	800021a <TCNT_Driver_GetStatus+0x20>
	{
		return SUCCES;
 8000216:	2300      	movs	r3, #0
 8000218:	e000      	b.n	800021c <TCNT_Driver_GetStatus+0x22>
	}
	else
	{
		return FAILED;
 800021a:	2301      	movs	r3, #1
	}
}
 800021c:	4618      	mov	r0, r3
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
	...

08000228 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	da0b      	bge.n	8000254 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800023c:	490d      	ldr	r1, [pc, #52]	; (8000274 <NVIC_SetPriority+0x4c>)
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 030f 	and.w	r3, r3, #15
 8000244:	3b04      	subs	r3, #4
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000252:	e009      	b.n	8000268 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000254:	4908      	ldr	r1, [pc, #32]	; (8000278 <NVIC_SetPriority+0x50>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000ed00 	.word	0xe000ed00
 8000278:	e000e100 	.word	0xe000e100

0800027c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800028a:	d301      	bcc.n	8000290 <SysTick_Config+0x14>
 800028c:	2301      	movs	r3, #1
 800028e:	e011      	b.n	80002b4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000290:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <SysTick_Config+0x40>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000298:	3b01      	subs	r3, #1
 800029a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800029c:	210f      	movs	r1, #15
 800029e:	f04f 30ff 	mov.w	r0, #4294967295
 80002a2:	f7ff ffc1 	bl	8000228 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <SysTick_Config+0x40>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <SysTick_Config+0x40>)
 80002ae:	2207      	movs	r2, #7
 80002b0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80002b2:	2300      	movs	r3, #0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	e000e010 	.word	0xe000e010

080002c0 <Temp_GPIO_Driver_Init>:
 the function below must be removed and the project
 the has to be updated accordingly
 */

void Temp_GPIO_Driver_Init(GPIO_TypeDef* GPIOx)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPCEN;
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <Temp_GPIO_Driver_Init+0x38>)
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <Temp_GPIO_Driver_Init+0x38>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
	/*LED setup*/
	GPIOx->CRH &=(~(0x03<<0x16)|(0x03<<0x14));
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	605a      	str	r2, [r3, #4]
	GPIOx->CRH |=(0x03<<0x14);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	f443 1240 	orr.w	r2, r3, #3145728	; 0x300000
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	605a      	str	r2, [r3, #4]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <SysTick_Handler>:

void SysTick_Handler()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	if(TickCounter!=0x00)
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <SysTick_Handler+0x20>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d004      	beq.n	8000312 <SysTick_Handler+0x16>
	{
		TickCounter--;
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <SysTick_Handler+0x20>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3b01      	subs	r3, #1
 800030e:	4a03      	ldr	r2, [pc, #12]	; (800031c <SysTick_Handler+0x20>)
 8000310:	6013      	str	r3, [r2, #0]
	}
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000020 	.word	0x20000020

08000320 <main>:
	TickCounter = DelayInterval;
	while(TickCounter!=0x00);
}

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock/1000);
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <main+0x94>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a23      	ldr	r2, [pc, #140]	; (80003b8 <main+0x98>)
 800032a:	fba2 2303 	umull	r2, r3, r2, r3
 800032e:	099b      	lsrs	r3, r3, #6
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ffa3 	bl	800027c <SysTick_Config>
	Temp_GPIO_Driver_Init(GPIOC);
 8000336:	4821      	ldr	r0, [pc, #132]	; (80003bc <main+0x9c>)
 8000338:	f7ff ffc2 	bl	80002c0 <Temp_GPIO_Driver_Init>

	TCNT_Driver_Init(TIM2);
 800033c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000340:	f7ff ff04 	bl	800014c <TCNT_Driver_Init>
	TCNT_Driver_SetPrescale(TIM2,(720));/*Reduce Clock frequency from 72Mhz to 1Mhz*/
 8000344:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000348:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800034c:	f7ff ff2a 	bl	80001a4 <TCNT_Driver_SetPrescale>
	TCNT_Driver_SetPeriod(TIM2,(50000));/*Upscale timer from 1us to TCNT_DELAY_INTERVAL ms*/
 8000350:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000354:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000358:	f7ff ff16 	bl	8000188 <TCNT_Driver_SetPeriod>
	TCNT_Driver_Start(TIM2);
 800035c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000360:	f7ff ff2e 	bl	80001c0 <TCNT_Driver_Start>

	while (1)
	{
		if(TCNT_Driver_GetStatus(TIM2,TCNT_DRIVER_UPDATE_INTERRUPT_FLAG)==SUCCES)
 8000364:	2101      	movs	r1, #1
 8000366:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800036a:	f7ff ff46 	bl	80001fa <TCNT_Driver_GetStatus>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d10d      	bne.n	8000390 <main+0x70>
		{
			Led_Status = !Led_Status;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <main+0xa0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	bf0c      	ite	eq
 800037c:	2301      	moveq	r3, #1
 800037e:	2300      	movne	r3, #0
 8000380:	b2db      	uxtb	r3, r3
 8000382:	461a      	mov	r2, r3
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <main+0xa0>)
 8000386:	701a      	strb	r2, [r3, #0]
			TCNT_Driver_ClearStatus(TIM2);
 8000388:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800038c:	f7ff ff29 	bl	80001e2 <TCNT_Driver_ClearStatus>
		}
		if(Led_Status == 0x00)
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <main+0xa0>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d106      	bne.n	80003a6 <main+0x86>
		{
			GPIOC->BSRR|=(0x01<<0x0D);
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <main+0x9c>)
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <main+0x9c>)
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003a2:	6113      	str	r3, [r2, #16]
 80003a4:	e7de      	b.n	8000364 <main+0x44>
		}
		else
		{
			GPIOC->BSRR|=(0x01<<0x1D);
 80003a6:	4a05      	ldr	r2, [pc, #20]	; (80003bc <main+0x9c>)
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <main+0x9c>)
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80003b0:	6113      	str	r3, [r2, #16]
		if(TCNT_Driver_GetStatus(TIM2,TCNT_DRIVER_UPDATE_INTERRUPT_FLAG)==SUCCES)
 80003b2:	e7d7      	b.n	8000364 <main+0x44>
 80003b4:	20000000 	.word	0x20000000
 80003b8:	10624dd3 	.word	0x10624dd3
 80003bc:	40011000 	.word	0x40011000
 80003c0:	20000024 	.word	0x20000024

080003c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003ca:	e003      	b.n	80003d4 <LoopCopyDataInit>

080003cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80003ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003d2:	3104      	adds	r1, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80003d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003dc:	d3f6      	bcc.n	80003cc <CopyDataInit>
	ldr	r2, =_sbss
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80003e0:	e002      	b.n	80003e8 <LoopFillZerobss>

080003e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003e4:	f842 3b04 	str.w	r3, [r2], #4

080003e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80003ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003ec:	d3f9      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ee:	f000 f813 	bl	8000418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003f2:	f000 f8cb 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003f6:	f7ff ff93 	bl	8000320 <main>
	bx	lr
 80003fa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003fc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000400:	080005f4 	.word	0x080005f4
	ldr	r0, =_sdata
 8000404:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000408:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800040c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000410:	20000028 	.word	0x20000028

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800041c:	4a15      	ldr	r2, [pc, #84]	; (8000474 <SystemInit+0x5c>)
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <SystemInit+0x5c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000428:	4912      	ldr	r1, [pc, #72]	; (8000474 <SystemInit+0x5c>)
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <SystemInit+0x5c>)
 800042c:	685a      	ldr	r2, [r3, #4]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <SystemInit+0x60>)
 8000430:	4013      	ands	r3, r2
 8000432:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <SystemInit+0x5c>)
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <SystemInit+0x5c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800043e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000442:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <SystemInit+0x5c>)
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <SystemInit+0x5c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000450:	4a08      	ldr	r2, [pc, #32]	; (8000474 <SystemInit+0x5c>)
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <SystemInit+0x5c>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800045a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <SystemInit+0x5c>)
 800045e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000462:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000464:	f000 f80c 	bl	8000480 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <SystemInit+0x64>)
 800046a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	f8ff0000 	.word	0xf8ff0000
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000484:	f000 f802 	bl	800048c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}

0800048c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
 8000496:	2300      	movs	r3, #0
 8000498:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800049a:	4a3a      	ldr	r2, [pc, #232]	; (8000584 <SetSysClockTo72+0xf8>)
 800049c:	4b39      	ldr	r3, [pc, #228]	; (8000584 <SetSysClockTo72+0xf8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004a6:	4b37      	ldr	r3, [pc, #220]	; (8000584 <SetSysClockTo72+0xf8>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3301      	adds	r3, #1
 80004b4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <SetSysClockTo72+0x38>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004c2:	d1f0      	bne.n	80004a6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <SetSysClockTo72+0xf8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d002      	beq.n	80004d6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004d0:	2301      	movs	r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	e001      	b.n	80004da <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d14b      	bne.n	8000578 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80004e0:	4a29      	ldr	r2, [pc, #164]	; (8000588 <SetSysClockTo72+0xfc>)
 80004e2:	4b29      	ldr	r3, [pc, #164]	; (8000588 <SetSysClockTo72+0xfc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80004ec:	4a26      	ldr	r2, [pc, #152]	; (8000588 <SetSysClockTo72+0xfc>)
 80004ee:	4b26      	ldr	r3, [pc, #152]	; (8000588 <SetSysClockTo72+0xfc>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f023 0303 	bic.w	r3, r3, #3
 80004f6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80004f8:	4a23      	ldr	r2, [pc, #140]	; (8000588 <SetSysClockTo72+0xfc>)
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <SetSysClockTo72+0xfc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000504:	4a1f      	ldr	r2, [pc, #124]	; (8000584 <SetSysClockTo72+0xf8>)
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <SetSysClockTo72+0xf8>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800050c:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <SetSysClockTo72+0xf8>)
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <SetSysClockTo72+0xf8>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000514:	4a1b      	ldr	r2, [pc, #108]	; (8000584 <SetSysClockTo72+0xf8>)
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <SetSysClockTo72+0xf8>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000520:	4a18      	ldr	r2, [pc, #96]	; (8000584 <SetSysClockTo72+0xf8>)
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <SetSysClockTo72+0xf8>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800052a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <SetSysClockTo72+0xf8>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <SetSysClockTo72+0xf8>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000536:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <SetSysClockTo72+0xf8>)
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <SetSysClockTo72+0xf8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000542:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000544:	bf00      	nop
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <SetSysClockTo72+0xf8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <SetSysClockTo72+0xf8>)
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <SetSysClockTo72+0xf8>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	f023 0303 	bic.w	r3, r3, #3
 800055c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <SetSysClockTo72+0xf8>)
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SetSysClockTo72+0xf8>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800056a:	bf00      	nop
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <SetSysClockTo72+0xf8>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f003 030c 	and.w	r3, r3, #12
 8000574:	2b08      	cmp	r3, #8
 8000576:	d1f9      	bne.n	800056c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40022000 	.word	0x40022000

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	2500      	movs	r5, #0
 8000590:	4e0c      	ldr	r6, [pc, #48]	; (80005c4 <__libc_init_array+0x38>)
 8000592:	4c0d      	ldr	r4, [pc, #52]	; (80005c8 <__libc_init_array+0x3c>)
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	42a5      	cmp	r5, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	f000 f81a 	bl	80005d4 <_init>
 80005a0:	2500      	movs	r5, #0
 80005a2:	4e0a      	ldr	r6, [pc, #40]	; (80005cc <__libc_init_array+0x40>)
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <__libc_init_array+0x44>)
 80005a6:	1ba4      	subs	r4, r4, r6
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	42a5      	cmp	r5, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005b4:	4798      	blx	r3
 80005b6:	3501      	adds	r5, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005be:	4798      	blx	r3
 80005c0:	3501      	adds	r5, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080005ec 	.word	0x080005ec
 80005c8:	080005ec 	.word	0x080005ec
 80005cc:	080005ec 	.word	0x080005ec
 80005d0:	080005f0 	.word	0x080005f0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
