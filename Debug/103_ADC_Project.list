
103_ADC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000608  08000608  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000614  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000024  08000614  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000f6d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000004ab  00000000  00000000  00020f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000120  00000000  00000000  00021448  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00021568  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000919  00000000  00000000  00021640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000596  00000000  00000000  00021f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000224ef  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000033c  00000000  00000000  0002256c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080005f0 	.word	0x080005f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080005f0 	.word	0x080005f0

0800014c <ADC_Driver_GetSample>:
{
		ADC_DRIVER_CHANNEL_SAMPLING_TIME_55_5_CYCLES
};

uint16 ADC_Driver_GetSample(ADC_TypeDef* ADCx)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint16 data=0x00;
 8000154:	2300      	movs	r3, #0
 8000156:	81fb      	strh	r3, [r7, #14]
	data = ((uint16)(ADCx->DR));
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800015c:	81fb      	strh	r3, [r7, #14]
	return data;
 800015e:	89fb      	ldrh	r3, [r7, #14]
}
 8000160:	4618      	mov	r0, r3
 8000162:	3714      	adds	r7, #20
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <ADC_Driver_GetStatus>:

uint8 ADC_Driver_GetStatus(ADC_TypeDef* ADCx,uint8 Event)
{
 800016a:	b480      	push	{r7}
 800016c:	b083      	sub	sp, #12
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
 8000172:	460b      	mov	r3, r1
 8000174:	70fb      	strb	r3, [r7, #3]
	if((ADCx->SR & Event)!=FALSE)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	681a      	ldr	r2, [r3, #0]
 800017a:	78fb      	ldrb	r3, [r7, #3]
 800017c:	4013      	ands	r3, r2
 800017e:	2b00      	cmp	r3, #0
 8000180:	d001      	beq.n	8000186 <ADC_Driver_GetStatus+0x1c>
	{
		return SUCCES;
 8000182:	2300      	movs	r3, #0
 8000184:	e000      	b.n	8000188 <ADC_Driver_GetStatus+0x1e>
	}
	else
	{
		return FAILED;
 8000186:	2301      	movs	r3, #1
	}
}
 8000188:	4618      	mov	r0, r3
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
	...

08000194 <ADC_Driver_Init>:

void ADC_Driver_Init(ADC_TypeDef* ADCx)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	#if ADC_DRIVER_ADC1 == OK
		RCC->APB2ENR|=RCC_APB2ENR_ADC1EN;
 800019c:	4a20      	ldr	r2, [pc, #128]	; (8000220 <ADC_Driver_Init+0x8c>)
 800019e:	4b20      	ldr	r3, [pc, #128]	; (8000220 <ADC_Driver_Init+0x8c>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001a6:	6193      	str	r3, [r2, #24]
	#if ADC_DRIVER_ADC2 == OK
		RCC->APB2ENR|=RCC_APB2ENR_ADC2EN;
	#endif

	#if (ADC_DRIVER_SINGLE_CONVERSION == OK)
		ADCx->CR2|=(0x01<<0x14)|(0x07<<0x11);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	689b      	ldr	r3, [r3, #8]
 80001ac:	f443 12f0 	orr.w	r2, r3, #1966080	; 0x1e0000
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	609a      	str	r2, [r3, #8]
	#endif

		/*Set the alignment*/
		ADCx->CR2|=ADC_DRIVER_ALIGNMENT;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	689a      	ldr	r2, [r3, #8]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	609a      	str	r2, [r3, #8]

		/*Set the sampling time of the */
		ADC_Driver_SamplingTimeSelect(ADCx,SamplingTimes);
 80001bc:	4919      	ldr	r1, [pc, #100]	; (8000224 <ADC_Driver_Init+0x90>)
 80001be:	6878      	ldr	r0, [r7, #4]
 80001c0:	f000 f832 	bl	8000228 <ADC_Driver_SamplingTimeSelect>

		/*Set the regular channel sequence length*/
		ADCx->SQR1 |= ((ADC_DRIVER_SEQUENCE_LENGTH-1)<<20);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Select the respective position(s) in the sampling sequence of the desired channel(s)*/
		ADC_Driver_Configure_Sequence(ADCx,ADC_DRIVER_CHANNEL_2,ADC_DRIVER_SEQUENCE_POSITION_1);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2102      	movs	r1, #2
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 f85c 	bl	800028e <ADC_Driver_Configure_Sequence>

		/*Start the ADC*/
		ADCx->CR2|=ADC_DRIVER_ON;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	f043 0201 	orr.w	r2, r3, #1
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	609a      	str	r2, [r3, #8]

		/*Reset calibration*/
		ADCx->CR2|=(1<<3);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	689b      	ldr	r3, [r3, #8]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	609a      	str	r2, [r3, #8]
		while(((ADCx->CR2)&(1<<3))!=0x00){}
 80001ee:	bf00      	nop
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	f003 0308 	and.w	r3, r3, #8
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d1f9      	bne.n	80001f0 <ADC_Driver_Init+0x5c>
		/*Calibration*/
		ADCx->CR2|=(1<<2);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	f043 0204 	orr.w	r2, r3, #4
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	609a      	str	r2, [r3, #8]
		while(((ADCx->CR2)&(1<<2))!=0x00){}
 8000208:	bf00      	nop
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f9      	bne.n	800020a <ADC_Driver_Init+0x76>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40021000 	.word	0x40021000
 8000224:	20000000 	.word	0x20000000

08000228 <ADC_Driver_SamplingTimeSelect>:
{
	ADCx->CR2|=ADC_DRIVER_ON;
}

void ADC_Driver_SamplingTimeSelect(ADC_TypeDef* ADCx,uint8* SamplingTimes)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	uint8 index = 0x00;
 8000232:	2300      	movs	r3, #0
 8000234:	73fb      	strb	r3, [r7, #15]
	uint8 SamplingTimeIndex = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	73bb      	strb	r3, [r7, #14]
	 *
	 * */
	/*The default is 1.5 cycles*/

	#if((ADC_DRIVER_SELECTED_CHANNELS) < 0x400)
		for(index=0x00;index<0x12;index++)
 800023a:	2300      	movs	r3, #0
 800023c:	73fb      	strb	r3, [r7, #15]
 800023e:	e01e      	b.n	800027e <ADC_Driver_SamplingTimeSelect+0x56>
		{
			if((ADC_DRIVER_SELECTED_CHANNELS & (1<<index))!=0x00)
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	2204      	movs	r2, #4
 8000244:	fa42 f303 	asr.w	r3, r2, r3
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d013      	beq.n	8000278 <ADC_Driver_SamplingTimeSelect+0x50>
			{
				ADCx->SMPR2|=((uint32_t)(SamplingTimes[SamplingTimeIndex]<<(3*index)));
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	6919      	ldr	r1, [r3, #16]
 8000254:	7bbb      	ldrb	r3, [r7, #14]
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	4413      	add	r3, r2
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	7bfa      	ldrb	r2, [r7, #15]
 8000260:	4613      	mov	r3, r2
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	4413      	add	r3, r2
 8000266:	fa00 f303 	lsl.w	r3, r0, r3
 800026a:	ea41 0203 	orr.w	r2, r1, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	611a      	str	r2, [r3, #16]
				SamplingTimeIndex++;
 8000272:	7bbb      	ldrb	r3, [r7, #14]
 8000274:	3301      	adds	r3, #1
 8000276:	73bb      	strb	r3, [r7, #14]
		for(index=0x00;index<0x12;index++)
 8000278:	7bfb      	ldrb	r3, [r7, #15]
 800027a:	3301      	adds	r3, #1
 800027c:	73fb      	strb	r3, [r7, #15]
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	2b11      	cmp	r3, #17
 8000282:	d9dd      	bls.n	8000240 <ADC_Driver_SamplingTimeSelect+0x18>
			}
		}

	}
	#endif
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr

0800028e <ADC_Driver_Configure_Sequence>:
	/*===UNDER CONSTRUCTION===*/
}
#endif

void ADC_Driver_Configure_Sequence(ADC_TypeDef* ADCx,uint8 ChannelNr,uint8 Position_in_Sequnece)
{
 800028e:	b480      	push	{r7}
 8000290:	b083      	sub	sp, #12
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	460b      	mov	r3, r1
 8000298:	70fb      	strb	r3, [r7, #3]
 800029a:	4613      	mov	r3, r2
 800029c:	70bb      	strb	r3, [r7, #2]
	/*Configure the sampling sequence*/
	#if (ADC_DRIVER_SEQUENCE_LENGTH<=6)

		ADCx->SQR3|=((ChannelNr)<<(5*Position_in_Sequnece));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80002a2:	78f8      	ldrb	r0, [r7, #3]
 80002a4:	78ba      	ldrb	r2, [r7, #2]
 80002a6:	4613      	mov	r3, r2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	4413      	add	r3, r2
 80002ac:	fa00 f303 	lsl.w	r3, r0, r3
 80002b0:	ea41 0203 	orr.w	r2, r1, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	635a      	str	r2, [r3, #52]	; 0x34
		else
		{
			ADCx->SQR1|=((ChannelNr)<<(5*Position_in_Sequnece));
		}
	#endif
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr

080002c2 <ADC_Driver_StartSampling>:
void ADC_Driver_StartSampling(ADC_TypeDef* ADCx)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
	ADCx->CR2|=ADC_DRIVER_REGULAR_START;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	609a      	str	r2, [r3, #8]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <GPIO_Driver_Init>:
#include "GPIO_Driver.h"
#include "GPIO_Driver_Cfg.h"

/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init(GPIO_TypeDef* GPIOx)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80002e8:	4a2c      	ldr	r2, [pc, #176]	; (800039c <GPIO_Driver_Init+0xbc>)
 80002ea:	4b2c      	ldr	r3, [pc, #176]	; (800039c <GPIO_Driver_Init+0xbc>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	/*Variables used for various operations*/
	uint16 index = 0x00;
 80002f4:	2300      	movs	r3, #0
 80002f6:	81fb      	strh	r3, [r7, #14]
	uint16 position=0x00;
 80002f8:	2300      	movs	r3, #0
 80002fa:	81bb      	strh	r3, [r7, #12]
	uint16 setup_value=0x00;
 80002fc:	2300      	movs	r3, #0
 80002fe:	817b      	strh	r3, [r7, #10]

	/*Check all pins and configure only the ones*/
	for(index=0x00;index<16;index++)
 8000300:	2300      	movs	r3, #0
 8000302:	81fb      	strh	r3, [r7, #14]
 8000304:	e042      	b.n	800038c <GPIO_Driver_Init+0xac>
	{
		position = ((uint32)0x01)<<index;
 8000306:	89fb      	ldrh	r3, [r7, #14]
 8000308:	2201      	movs	r2, #1
 800030a:	fa02 f303 	lsl.w	r3, r2, r3
 800030e:	81bb      	strh	r3, [r7, #12]
		setup_value = GPIO_DRIVER_SELECTED_PINS & position;
 8000310:	89bb      	ldrh	r3, [r7, #12]
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	817b      	strh	r3, [r7, #10]

		if(setup_value!=0x00)
 8000318:	897b      	ldrh	r3, [r7, #10]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d033      	beq.n	8000386 <GPIO_Driver_Init+0xa6>
		{
			/*CRL is used for pins between 0-7 and CRH is for 8-15*/
			if(index<0x08)
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	2b07      	cmp	r3, #7
 8000322:	d817      	bhi.n	8000354 <GPIO_Driver_Init+0x74>
			{
				/*The first step is to clear the default setting*/
				GPIOx->CRL  &=(~(((uint32)(0x03 <<(4*index)))|
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	89fb      	ldrh	r3, [r7, #14]
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	2103      	movs	r1, #3
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	4618      	mov	r0, r3
								 ((uint32)(0x03 <<(2*((2*index)+1))))));
 8000334:	89fb      	ldrh	r3, [r7, #14]
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	3302      	adds	r3, #2
 800033a:	2103      	movs	r1, #3
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
				GPIOx->CRL  &=(~(((uint32)(0x03 <<(4*index)))|
 8000340:	4303      	orrs	r3, r0
 8000342:	43db      	mvns	r3, r3
 8000344:	401a      	ands	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
				/*Set the GPIO configuration*/
				GPIOx->CRL  |=((uint32)(GPIO_DRIVER_SELECTED_MODE <<(4*index)))|
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e018      	b.n	8000386 <GPIO_Driver_Init+0xa6>
							  ((uint32)(GPIO_DRIVER_SELECTED_CONFIGURATION <<(2*((2*index)+1))));
			}
			else
			{
				GPIOx->CRH  &=(~(((uint32)(0x03 <<(4*(index-8))))|
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	89fb      	ldrh	r3, [r7, #14]
 800035a:	3b08      	subs	r3, #8
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	2103      	movs	r1, #3
 8000360:	fa01 f303 	lsl.w	r3, r1, r3
 8000364:	4618      	mov	r0, r3
								 ((uint32)(0x03 <<(2*((2*(index-8))+1))))));
 8000366:	89fb      	ldrh	r3, [r7, #14]
 8000368:	3b08      	subs	r3, #8
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	3302      	adds	r3, #2
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
				GPIOx->CRH  &=(~(((uint32)(0x03 <<(4*(index-8))))|
 8000374:	4303      	orrs	r3, r0
 8000376:	43db      	mvns	r3, r3
 8000378:	401a      	ands	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	605a      	str	r2, [r3, #4]
				GPIOx->CRH  |=((uint32)(GPIO_DRIVER_SELECTED_MODE <<(4*(index-8))))|
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
	for(index=0x00;index<16;index++)
 8000386:	89fb      	ldrh	r3, [r7, #14]
 8000388:	3301      	adds	r3, #1
 800038a:	81fb      	strh	r3, [r7, #14]
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	2b0f      	cmp	r3, #15
 8000390:	d9b9      	bls.n	8000306 <GPIO_Driver_Init+0x26>
							  ((uint32)(GPIO_DRIVER_SELECTED_CONFIGURATION <<(2*((2*(index-8))+1))));
			}
		}
	}
}
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <main>:
/*Input data from ADC1 channel x*/

uint32 ADC_Sample = 0x00;

int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	GPIO_Driver_Init(GPIOA);
 80003a4:	480b      	ldr	r0, [pc, #44]	; (80003d4 <main+0x34>)
 80003a6:	f7ff ff9b 	bl	80002e0 <GPIO_Driver_Init>
	ADC_Driver_Init(ADC1);
 80003aa:	480b      	ldr	r0, [pc, #44]	; (80003d8 <main+0x38>)
 80003ac:	f7ff fef2 	bl	8000194 <ADC_Driver_Init>

  while (1)
  {
	  ADC_Driver_StartSampling(ADC1);
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <main+0x38>)
 80003b2:	f7ff ff86 	bl	80002c2 <ADC_Driver_StartSampling>

	  if((ADC_Driver_GetStatus(ADC1,ADC_DRIVER_REGULAR_CHANNEL_END_OF_CONVERSION_FLAG))==SUCCES)
 80003b6:	2102      	movs	r1, #2
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <main+0x38>)
 80003ba:	f7ff fed6 	bl	800016a <ADC_Driver_GetStatus>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1f5      	bne.n	80003b0 <main+0x10>
	  {
			  ADC_Sample = ADC_Driver_GetSample(ADC1);
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <main+0x38>)
 80003c6:	f7ff fec1 	bl	800014c <ADC_Driver_GetSample>
 80003ca:	4603      	mov	r3, r0
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b03      	ldr	r3, [pc, #12]	; (80003dc <main+0x3c>)
 80003d0:	601a      	str	r2, [r3, #0]
	  ADC_Driver_StartSampling(ADC1);
 80003d2:	e7ed      	b.n	80003b0 <main+0x10>
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40012400 	.word	0x40012400
 80003dc:	20000020 	.word	0x20000020

080003e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000418 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003e6:	e003      	b.n	80003f0 <LoopCopyDataInit>

080003e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80003ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003ee:	3104      	adds	r1, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80003f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003f8:	d3f6      	bcc.n	80003e8 <CopyDataInit>
	ldr	r2, =_sbss
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80003fc:	e002      	b.n	8000404 <LoopFillZerobss>

080003fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000400:	f842 3b04 	str.w	r3, [r2], #4

08000404 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000406:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000408:	d3f9      	bcc.n	80003fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800040a:	f000 f813 	bl	8000434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f8cb 	bl	80005a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000412:	f7ff ffc5 	bl	80003a0 <main>
	bx	lr
 8000416:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000418:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800041c:	08000610 	.word	0x08000610
	ldr	r0, =_sdata
 8000420:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000424:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000428:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 800042c:	20000024 	.word	0x20000024

08000430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC1_2_IRQHandler>
	...

08000434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000438:	4a15      	ldr	r2, [pc, #84]	; (8000490 <SystemInit+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <SystemInit+0x5c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000444:	4912      	ldr	r1, [pc, #72]	; (8000490 <SystemInit+0x5c>)
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <SystemInit+0x5c>)
 8000448:	685a      	ldr	r2, [r3, #4]
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x60>)
 800044c:	4013      	ands	r3, r2
 800044e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <SystemInit+0x5c>)
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <SystemInit+0x5c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800045a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800045e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <SystemInit+0x5c>)
 8000462:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <SystemInit+0x5c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800046c:	4a08      	ldr	r2, [pc, #32]	; (8000490 <SystemInit+0x5c>)
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <SystemInit+0x5c>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000476:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SystemInit+0x5c>)
 800047a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800047e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000480:	f000 f80c 	bl	800049c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <SystemInit+0x64>)
 8000486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800048a:	609a      	str	r2, [r3, #8]
#endif 
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	f8ff0000 	.word	0xf8ff0000
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80004a0:	f000 f802 	bl	80004a8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004b6:	4a3a      	ldr	r2, [pc, #232]	; (80005a0 <SetSysClockTo72+0xf8>)
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <SetSysClockTo72+0xf8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004c2:	4b37      	ldr	r3, [pc, #220]	; (80005a0 <SetSysClockTo72+0xf8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3301      	adds	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d103      	bne.n	80004e0 <SetSysClockTo72+0x38>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004de:	d1f0      	bne.n	80004c2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <SetSysClockTo72+0xf8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80004ec:	2301      	movs	r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	e001      	b.n	80004f6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d14b      	bne.n	8000594 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80004fc:	4a29      	ldr	r2, [pc, #164]	; (80005a4 <SetSysClockTo72+0xfc>)
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SetSysClockTo72+0xfc>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000508:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <SetSysClockTo72+0xfc>)
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <SetSysClockTo72+0xfc>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f023 0303 	bic.w	r3, r3, #3
 8000512:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <SetSysClockTo72+0xfc>)
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <SetSysClockTo72+0xfc>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <SetSysClockTo72+0xf8>)
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <SetSysClockTo72+0xf8>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800053c:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <SetSysClockTo72+0xf8>)
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000546:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <SetSysClockTo72+0xf8>)
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <SetSysClockTo72+0xf8>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000552:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000560:	bf00      	nop
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <SetSysClockTo72+0xf8>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f023 0303 	bic.w	r3, r3, #3
 8000578:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <SetSysClockTo72+0xf8>)
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <SetSysClockTo72+0xf8>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000586:	bf00      	nop
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SetSysClockTo72+0xf8>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b08      	cmp	r3, #8
 8000592:	d1f9      	bne.n	8000588 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40022000 	.word	0x40022000

080005a8 <__libc_init_array>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2500      	movs	r5, #0
 80005ac:	4e0c      	ldr	r6, [pc, #48]	; (80005e0 <__libc_init_array+0x38>)
 80005ae:	4c0d      	ldr	r4, [pc, #52]	; (80005e4 <__libc_init_array+0x3c>)
 80005b0:	1ba4      	subs	r4, r4, r6
 80005b2:	10a4      	asrs	r4, r4, #2
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	d109      	bne.n	80005cc <__libc_init_array+0x24>
 80005b8:	f000 f81a 	bl	80005f0 <_init>
 80005bc:	2500      	movs	r5, #0
 80005be:	4e0a      	ldr	r6, [pc, #40]	; (80005e8 <__libc_init_array+0x40>)
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <__libc_init_array+0x44>)
 80005c2:	1ba4      	subs	r4, r4, r6
 80005c4:	10a4      	asrs	r4, r4, #2
 80005c6:	42a5      	cmp	r5, r4
 80005c8:	d105      	bne.n	80005d6 <__libc_init_array+0x2e>
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005d0:	4798      	blx	r3
 80005d2:	3501      	adds	r5, #1
 80005d4:	e7ee      	b.n	80005b4 <__libc_init_array+0xc>
 80005d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005da:	4798      	blx	r3
 80005dc:	3501      	adds	r5, #1
 80005de:	e7f2      	b.n	80005c6 <__libc_init_array+0x1e>
 80005e0:	08000608 	.word	0x08000608
 80005e4:	08000608 	.word	0x08000608
 80005e8:	08000608 	.word	0x08000608
 80005ec:	0800060c 	.word	0x0800060c

080005f0 <_init>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	bf00      	nop
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr

080005fc <_fini>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	bf00      	nop
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr
