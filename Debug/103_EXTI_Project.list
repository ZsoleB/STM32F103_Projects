
103_EXTI_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008c0  080008c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080008c0  080008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080008c4  080008c4  000108c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080008c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000068  08000930  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000008c  08000930  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000171d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007bb  00000000  00000000  000217ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001c0  00000000  00000000  00021f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00022130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000f4d  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c33  00000000  00000000  000231bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00023df0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000004e8  00000000  00000000  00023e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080008a8 	.word	0x080008a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080008a8 	.word	0x080008a8

0800014c <EXTI_Driver_Init>:

#include "EXTI_Driver_Cfg.h"


void EXTI_Driver_Init(uint8 InterruptPinNumber,uint8 InterruptPortNumber)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]

	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800015c:	4a36      	ldr	r2, [pc, #216]	; (8000238 <EXTI_Driver_Init+0xec>)
 800015e:	4b36      	ldr	r3, [pc, #216]	; (8000238 <EXTI_Driver_Init+0xec>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6193      	str	r3, [r2, #24]

	if (InterruptPinNumber < 0x04)
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	2b03      	cmp	r3, #3
 800016c:	d813      	bhi.n	8000196 <EXTI_Driver_Init+0x4a>
	{
		AFIO->EXTICR[0] |=(InterruptPortNumber<<(4*InterruptPinNumber));
 800016e:	4833      	ldr	r0, [pc, #204]	; (800023c <EXTI_Driver_Init+0xf0>)
 8000170:	4b32      	ldr	r3, [pc, #200]	; (800023c <EXTI_Driver_Init+0xf0>)
 8000172:	689b      	ldr	r3, [r3, #8]
 8000174:	79b9      	ldrb	r1, [r7, #6]
 8000176:	79fa      	ldrb	r2, [r7, #7]
 8000178:	0092      	lsls	r2, r2, #2
 800017a:	fa01 f202 	lsl.w	r2, r1, r2
 800017e:	4313      	orrs	r3, r2
 8000180:	6083      	str	r3, [r0, #8]
		EXTI->IMR |= ((0x01)<<InterruptPinNumber);
 8000182:	492f      	ldr	r1, [pc, #188]	; (8000240 <EXTI_Driver_Init+0xf4>)
 8000184:	4b2e      	ldr	r3, [pc, #184]	; (8000240 <EXTI_Driver_Init+0xf4>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	2001      	movs	r0, #1
 800018c:	fa00 f202 	lsl.w	r2, r0, r2
 8000190:	4313      	orrs	r3, r2
 8000192:	600b      	str	r3, [r1, #0]
 8000194:	e019      	b.n	80001ca <EXTI_Driver_Init+0x7e>
	}

	else if ((InterruptPinNumber < 0x08)&&(InterruptPinNumber >= 0x04))
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	2b07      	cmp	r3, #7
 800019a:	d816      	bhi.n	80001ca <EXTI_Driver_Init+0x7e>
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	2b03      	cmp	r3, #3
 80001a0:	d913      	bls.n	80001ca <EXTI_Driver_Init+0x7e>
	{
		AFIO->EXTICR[1] |= (InterruptPortNumber<<(4*(InterruptPinNumber-0x04)));
 80001a2:	4826      	ldr	r0, [pc, #152]	; (800023c <EXTI_Driver_Init+0xf0>)
 80001a4:	4b25      	ldr	r3, [pc, #148]	; (800023c <EXTI_Driver_Init+0xf0>)
 80001a6:	68db      	ldr	r3, [r3, #12]
 80001a8:	79b9      	ldrb	r1, [r7, #6]
 80001aa:	79fa      	ldrb	r2, [r7, #7]
 80001ac:	3a04      	subs	r2, #4
 80001ae:	0092      	lsls	r2, r2, #2
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	4313      	orrs	r3, r2
 80001b6:	60c3      	str	r3, [r0, #12]
		EXTI->IMR |= ((0x01)<<InterruptPinNumber);
 80001b8:	4921      	ldr	r1, [pc, #132]	; (8000240 <EXTI_Driver_Init+0xf4>)
 80001ba:	4b21      	ldr	r3, [pc, #132]	; (8000240 <EXTI_Driver_Init+0xf4>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	79fa      	ldrb	r2, [r7, #7]
 80001c0:	2001      	movs	r0, #1
 80001c2:	fa00 f202 	lsl.w	r2, r0, r2
 80001c6:	4313      	orrs	r3, r2
 80001c8:	600b      	str	r3, [r1, #0]
	}

	if ((InterruptPinNumber < 0x0C) && (InterruptPinNumber >= 0x08))
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	2b0b      	cmp	r3, #11
 80001ce:	d816      	bhi.n	80001fe <EXTI_Driver_Init+0xb2>
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	2b07      	cmp	r3, #7
 80001d4:	d913      	bls.n	80001fe <EXTI_Driver_Init+0xb2>
	{
		AFIO->EXTICR[2] |= (InterruptPortNumber<<(4*(InterruptPinNumber-0x08)));
 80001d6:	4819      	ldr	r0, [pc, #100]	; (800023c <EXTI_Driver_Init+0xf0>)
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <EXTI_Driver_Init+0xf0>)
 80001da:	691b      	ldr	r3, [r3, #16]
 80001dc:	79b9      	ldrb	r1, [r7, #6]
 80001de:	79fa      	ldrb	r2, [r7, #7]
 80001e0:	3a08      	subs	r2, #8
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	4313      	orrs	r3, r2
 80001ea:	6103      	str	r3, [r0, #16]
		EXTI->IMR |= ((0x01)<<InterruptPinNumber);
 80001ec:	4914      	ldr	r1, [pc, #80]	; (8000240 <EXTI_Driver_Init+0xf4>)
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <EXTI_Driver_Init+0xf4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	4313      	orrs	r3, r2
 80001fc:	600b      	str	r3, [r1, #0]
	}

	if (InterruptPinNumber >= 0x0C)
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b0b      	cmp	r3, #11
 8000202:	d913      	bls.n	800022c <EXTI_Driver_Init+0xe0>
	{
		AFIO->EXTICR[3] |= (InterruptPortNumber<<(4*(InterruptPinNumber-0x0C)));
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <EXTI_Driver_Init+0xf0>)
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <EXTI_Driver_Init+0xf0>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	79b9      	ldrb	r1, [r7, #6]
 800020c:	79fa      	ldrb	r2, [r7, #7]
 800020e:	3a0c      	subs	r2, #12
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	4313      	orrs	r3, r2
 8000218:	6143      	str	r3, [r0, #20]
		EXTI->IMR |= ((0x01)<<InterruptPinNumber);
 800021a:	4909      	ldr	r1, [pc, #36]	; (8000240 <EXTI_Driver_Init+0xf4>)
 800021c:	4b08      	ldr	r3, [pc, #32]	; (8000240 <EXTI_Driver_Init+0xf4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	79fa      	ldrb	r2, [r7, #7]
 8000222:	2001      	movs	r0, #1
 8000224:	fa00 f202 	lsl.w	r2, r0, r2
 8000228:	4313      	orrs	r3, r2
 800022a:	600b      	str	r3, [r1, #0]
	}


}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	40010000 	.word	0x40010000
 8000240:	40010400 	.word	0x40010400

08000244 <EXTI_Driver_Rising_Trigger_Select>:

void EXTI_Driver_Rising_Trigger_Select(uint8 InterruptNumber)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
	EXTI->RTSR|=((0x01)<<InterruptNumber);
 800024e:	4907      	ldr	r1, [pc, #28]	; (800026c <EXTI_Driver_Rising_Trigger_Select+0x28>)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <EXTI_Driver_Rising_Trigger_Select+0x28>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	2001      	movs	r0, #1
 8000258:	fa00 f202 	lsl.w	r2, r0, r2
 800025c:	4313      	orrs	r3, r2
 800025e:	608b      	str	r3, [r1, #8]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40010400 	.word	0x40010400

08000270 <EXTI_Driver_Clear_PendingInterrupt>:
		EXTI->SWIER|=((0x01)<<InterruptNumber);
	}
}

void EXTI_Driver_Clear_PendingInterrupt(uint8 InterruptNumber)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	EXTI->PR|=((0x01)<<InterruptNumber);
 800027a:	4907      	ldr	r1, [pc, #28]	; (8000298 <EXTI_Driver_Clear_PendingInterrupt+0x28>)
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <EXTI_Driver_Clear_PendingInterrupt+0x28>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	79fa      	ldrb	r2, [r7, #7]
 8000282:	2001      	movs	r0, #1
 8000284:	fa00 f202 	lsl.w	r2, r0, r2
 8000288:	4313      	orrs	r3, r2
 800028a:	614b      	str	r3, [r1, #20]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40010400 	.word	0x40010400

0800029c <GPIO_Driver_Init>:

#include "GPIO_Driver_Cfg.h"

/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 80002a6:	2300      	movs	r3, #0
 80002a8:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80002aa:	4a92      	ldr	r2, [pc, #584]	; (80004f4 <GPIO_Driver_Init+0x258>)
 80002ac:	4b91      	ldr	r3, [pc, #580]	; (80004f4 <GPIO_Driver_Init+0x258>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f043 0304 	orr.w	r3, r3, #4
 80002b4:	6193      	str	r3, [r2, #24]
	#endif
	#if GPIO_DRIVER_GPIOE!=NOK
		RCC->APB2ENR|=RCC_APB2ENR_IOPEEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	80fb      	strh	r3, [r7, #6]
 80002ba:	e113      	b.n	80004e4 <GPIO_Driver_Init+0x248>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 80002bc:	2300      	movs	r3, #0
 80002be:	80bb      	strh	r3, [r7, #4]
 80002c0:	e101      	b.n	80004c6 <GPIO_Driver_Init+0x22a>
		{
			if((GPIO_SETUP[index].GPIO_Pins[index1])<0x08)
 80002c2:	88fa      	ldrh	r2, [r7, #6]
 80002c4:	88bb      	ldrh	r3, [r7, #4]
 80002c6:	498c      	ldr	r1, [pc, #560]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80002c8:	2034      	movs	r0, #52	; 0x34
 80002ca:	fb00 f202 	mul.w	r2, r0, r2
 80002ce:	4413      	add	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	440b      	add	r3, r1
 80002d4:	88db      	ldrh	r3, [r3, #6]
 80002d6:	2b07      	cmp	r3, #7
 80002d8:	d877      	bhi.n	80003ca <GPIO_Driver_Init+0x12e>
			{
				/*The first step is to clear the default setting*/
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80002da:	88fb      	ldrh	r3, [r7, #6]
 80002dc:	4a86      	ldr	r2, [pc, #536]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80002de:	2168      	movs	r1, #104	; 0x68
 80002e0:	fb01 f303 	mul.w	r3, r1, r3
 80002e4:	4413      	add	r3, r2
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	4983      	ldr	r1, [pc, #524]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80002ec:	2068      	movs	r0, #104	; 0x68
 80002ee:	fb00 f303 	mul.w	r3, r0, r3
 80002f2:	440b      	add	r3, r1
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	88f8      	ldrh	r0, [r7, #6]
 80002fa:	88bb      	ldrh	r3, [r7, #4]
 80002fc:	4c7e      	ldr	r4, [pc, #504]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80002fe:	2534      	movs	r5, #52	; 0x34
 8000300:	fb05 f000 	mul.w	r0, r5, r0
 8000304:	4403      	add	r3, r0
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	4423      	add	r3, r4
 800030a:	88db      	ldrh	r3, [r3, #6]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	2003      	movs	r0, #3
 8000310:	fa00 f303 	lsl.w	r3, r0, r3
 8000314:	461e      	mov	r6, r3
							  	  	  	  	  	  	  ((uint32)(0x03 <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))))));
 8000316:	88f8      	ldrh	r0, [r7, #6]
 8000318:	88bb      	ldrh	r3, [r7, #4]
 800031a:	4c77      	ldr	r4, [pc, #476]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 800031c:	2534      	movs	r5, #52	; 0x34
 800031e:	fb05 f000 	mul.w	r0, r5, r0
 8000322:	4403      	add	r3, r0
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	4423      	add	r3, r4
 8000328:	88db      	ldrh	r3, [r3, #6]
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	3302      	adds	r3, #2
 800032e:	2003      	movs	r0, #3
 8000330:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRL  &=(~(((uint32)(0x03 <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 8000334:	4333      	orrs	r3, r6
 8000336:	43db      	mvns	r3, r3
 8000338:	400b      	ands	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
				/*Set the GPIO configuration*/
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	4a6e      	ldr	r2, [pc, #440]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000340:	2168      	movs	r1, #104	; 0x68
 8000342:	fb01 f303 	mul.w	r3, r1, r3
 8000346:	4413      	add	r3, r2
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	496a      	ldr	r1, [pc, #424]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 800034e:	2068      	movs	r0, #104	; 0x68
 8000350:	fb00 f303 	mul.w	r3, r0, r3
 8000354:	440b      	add	r3, r1
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	88f8      	ldrh	r0, [r7, #6]
 800035c:	88bb      	ldrh	r3, [r7, #4]
 800035e:	4c66      	ldr	r4, [pc, #408]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000360:	2534      	movs	r5, #52	; 0x34
 8000362:	fb05 f000 	mul.w	r0, r5, r0
 8000366:	4403      	add	r3, r0
 8000368:	3310      	adds	r3, #16
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	4423      	add	r3, r4
 800036e:	88db      	ldrh	r3, [r3, #6]
 8000370:	461e      	mov	r6, r3
 8000372:	88f8      	ldrh	r0, [r7, #6]
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	4c60      	ldr	r4, [pc, #384]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000378:	2534      	movs	r5, #52	; 0x34
 800037a:	fb05 f000 	mul.w	r0, r5, r0
 800037e:	4403      	add	r3, r0
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	4423      	add	r3, r4
 8000384:	88db      	ldrh	r3, [r3, #6]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	fa06 f303 	lsl.w	r3, r6, r3
 800038c:	461e      	mov	r6, r3
													((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*(GPIO_SETUP[index].GPIO_Pins[index1]))+1))));
 800038e:	88f8      	ldrh	r0, [r7, #6]
 8000390:	88bb      	ldrh	r3, [r7, #4]
 8000392:	4c59      	ldr	r4, [pc, #356]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000394:	2534      	movs	r5, #52	; 0x34
 8000396:	fb05 f000 	mul.w	r0, r5, r0
 800039a:	4403      	add	r3, r0
 800039c:	3320      	adds	r3, #32
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	4423      	add	r3, r4
 80003a2:	88db      	ldrh	r3, [r3, #6]
 80003a4:	469e      	mov	lr, r3
 80003a6:	88f8      	ldrh	r0, [r7, #6]
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	4c53      	ldr	r4, [pc, #332]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80003ac:	2534      	movs	r5, #52	; 0x34
 80003ae:	fb05 f000 	mul.w	r0, r5, r0
 80003b2:	4403      	add	r3, r0
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4423      	add	r3, r4
 80003b8:	88db      	ldrh	r3, [r3, #6]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	3302      	adds	r3, #2
 80003be:	fa0e f303 	lsl.w	r3, lr, r3
				GPIO_SETUP[index].GPIO_Port->CRL  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1]<<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))))|
 80003c2:	4333      	orrs	r3, r6
 80003c4:	430b      	orrs	r3, r1
 80003c6:	6013      	str	r3, [r2, #0]
 80003c8:	e07a      	b.n	80004c0 <GPIO_Driver_Init+0x224>
			}
			else
			{
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	4a4a      	ldr	r2, [pc, #296]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80003ce:	2168      	movs	r1, #104	; 0x68
 80003d0:	fb01 f303 	mul.w	r3, r1, r3
 80003d4:	4413      	add	r3, r2
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	88fb      	ldrh	r3, [r7, #6]
 80003da:	4947      	ldr	r1, [pc, #284]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80003dc:	2068      	movs	r0, #104	; 0x68
 80003de:	fb00 f303 	mul.w	r3, r0, r3
 80003e2:	440b      	add	r3, r1
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	6859      	ldr	r1, [r3, #4]
 80003e8:	88f8      	ldrh	r0, [r7, #6]
 80003ea:	88bb      	ldrh	r3, [r7, #4]
 80003ec:	4c42      	ldr	r4, [pc, #264]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80003ee:	2534      	movs	r5, #52	; 0x34
 80003f0:	fb05 f000 	mul.w	r0, r5, r0
 80003f4:	4403      	add	r3, r0
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	4423      	add	r3, r4
 80003fa:	88db      	ldrh	r3, [r3, #6]
 80003fc:	3b08      	subs	r3, #8
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	2003      	movs	r0, #3
 8000402:	fa00 f303 	lsl.w	r3, r0, r3
 8000406:	461e      	mov	r6, r3
				              	  	  	  	  	  	((uint32)(0x03 <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))))));
 8000408:	88f8      	ldrh	r0, [r7, #6]
 800040a:	88bb      	ldrh	r3, [r7, #4]
 800040c:	4c3a      	ldr	r4, [pc, #232]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 800040e:	2534      	movs	r5, #52	; 0x34
 8000410:	fb05 f000 	mul.w	r0, r5, r0
 8000414:	4403      	add	r3, r0
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	4423      	add	r3, r4
 800041a:	88db      	ldrh	r3, [r3, #6]
 800041c:	3b08      	subs	r3, #8
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	3302      	adds	r3, #2
 8000422:	2003      	movs	r0, #3
 8000424:	fa00 f303 	lsl.w	r3, r0, r3
				GPIO_SETUP[index].GPIO_Port->CRH  &=(~(((uint32)(0x03 <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000428:	4333      	orrs	r3, r6
 800042a:	43db      	mvns	r3, r3
 800042c:	400b      	ands	r3, r1
 800042e:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 8000430:	88fb      	ldrh	r3, [r7, #6]
 8000432:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000434:	2168      	movs	r1, #104	; 0x68
 8000436:	fb01 f303 	mul.w	r3, r1, r3
 800043a:	4413      	add	r3, r2
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	88fb      	ldrh	r3, [r7, #6]
 8000440:	492d      	ldr	r1, [pc, #180]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000442:	2068      	movs	r0, #104	; 0x68
 8000444:	fb00 f303 	mul.w	r3, r0, r3
 8000448:	440b      	add	r3, r1
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	6859      	ldr	r1, [r3, #4]
 800044e:	88f8      	ldrh	r0, [r7, #6]
 8000450:	88bb      	ldrh	r3, [r7, #4]
 8000452:	4c29      	ldr	r4, [pc, #164]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 8000454:	2534      	movs	r5, #52	; 0x34
 8000456:	fb05 f000 	mul.w	r0, r5, r0
 800045a:	4403      	add	r3, r0
 800045c:	3310      	adds	r3, #16
 800045e:	005b      	lsls	r3, r3, #1
 8000460:	4423      	add	r3, r4
 8000462:	88db      	ldrh	r3, [r3, #6]
 8000464:	461e      	mov	r6, r3
 8000466:	88f8      	ldrh	r0, [r7, #6]
 8000468:	88bb      	ldrh	r3, [r7, #4]
 800046a:	4c23      	ldr	r4, [pc, #140]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 800046c:	2534      	movs	r5, #52	; 0x34
 800046e:	fb05 f000 	mul.w	r0, r5, r0
 8000472:	4403      	add	r3, r0
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	4423      	add	r3, r4
 8000478:	88db      	ldrh	r3, [r3, #6]
 800047a:	3b08      	subs	r3, #8
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	fa06 f303 	lsl.w	r3, r6, r3
 8000482:	461e      	mov	r6, r3
							  	  	  	  	  	    ((uint32)(GPIO_SETUP[index].GPIO_Pin_Cfg[index1] <<(2*((2*((GPIO_SETUP[index].GPIO_Pins[index1])-8))+1))));
 8000484:	88f8      	ldrh	r0, [r7, #6]
 8000486:	88bb      	ldrh	r3, [r7, #4]
 8000488:	4c1b      	ldr	r4, [pc, #108]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 800048a:	2534      	movs	r5, #52	; 0x34
 800048c:	fb05 f000 	mul.w	r0, r5, r0
 8000490:	4403      	add	r3, r0
 8000492:	3320      	adds	r3, #32
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	4423      	add	r3, r4
 8000498:	88db      	ldrh	r3, [r3, #6]
 800049a:	469e      	mov	lr, r3
 800049c:	88f8      	ldrh	r0, [r7, #6]
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	4c15      	ldr	r4, [pc, #84]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80004a2:	2534      	movs	r5, #52	; 0x34
 80004a4:	fb05 f000 	mul.w	r0, r5, r0
 80004a8:	4403      	add	r3, r0
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4423      	add	r3, r4
 80004ae:	88db      	ldrh	r3, [r3, #6]
 80004b0:	3b08      	subs	r3, #8
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	3302      	adds	r3, #2
 80004b6:	fa0e f303 	lsl.w	r3, lr, r3
				GPIO_SETUP[index].GPIO_Port->CRH  |=((uint32)(GPIO_SETUP[index].GPIO_Pin_Mode[index1] <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))))|
 80004ba:	4333      	orrs	r3, r6
 80004bc:	430b      	orrs	r3, r1
 80004be:	6053      	str	r3, [r2, #4]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 80004c0:	88bb      	ldrh	r3, [r7, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	80bb      	strh	r3, [r7, #4]
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <GPIO_Driver_Init+0x25c>)
 80004ca:	2168      	movs	r1, #104	; 0x68
 80004cc:	fb01 f303 	mul.w	r3, r1, r3
 80004d0:	4413      	add	r3, r2
 80004d2:	3304      	adds	r3, #4
 80004d4:	881b      	ldrh	r3, [r3, #0]
 80004d6:	88ba      	ldrh	r2, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	f4ff aef2 	bcc.w	80002c2 <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	3301      	adds	r3, #1
 80004e2:	80fb      	strh	r3, [r7, #6]
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f43f aee8 	beq.w	80002bc <GPIO_Driver_Init+0x20>
			}
		}
	}
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	20000000 	.word	0x20000000

080004fc <NVIC_Driver_SetInterrupt>:
 */
#include "NVIC_Driver.h"
#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	460b      	mov	r3, r1
 8000508:	71bb      	strb	r3, [r7, #6]
 800050a:	4613      	mov	r3, r2
 800050c:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 8000512:	2300      	movs	r3, #0
 8000514:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 8000516:	230f      	movs	r3, #15
 8000518:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 800051e:	230f      	movs	r3, #15
 8000520:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <NVIC_Driver_SetInterrupt+0xb8>)
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	43db      	mvns	r3, r3
 800052c:	0a1b      	lsrs	r3, r3, #8
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f003 0307 	and.w	r3, r3, #7
 8000534:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 8000536:	7b7a      	ldrb	r2, [r7, #13]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	fa42 f303 	asr.w	r3, r2, r3
 800053e:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	f1c3 0304 	rsb	r3, r3, #4
 8000546:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	fa02 f303 	lsl.w	r3, r2, r3
 8000550:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 8000552:	797a      	ldrb	r2, [r7, #5]
 8000554:	7b7b      	ldrb	r3, [r7, #13]
 8000556:	4013      	ands	r3, r2
 8000558:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 800055a:	7b3a      	ldrb	r2, [r7, #12]
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	4313      	orrs	r3, r2
 8000560:	b2db      	uxtb	r3, r3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	da08      	bge.n	8000580 <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 800056e:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <NVIC_Driver_SetInterrupt+0xb8>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f003 030f 	and.w	r3, r3, #15
 8000576:	3b04      	subs	r3, #4
 8000578:	4413      	add	r3, r2
 800057a:	7aba      	ldrb	r2, [r7, #10]
 800057c:	761a      	strb	r2, [r3, #24]
 800057e:	e006      	b.n	800058e <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <NVIC_Driver_SetInterrupt+0xbc>)
 8000582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000586:	4413      	add	r3, r2
 8000588:	7aba      	ldrb	r2, [r7, #10]
 800058a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <NVIC_Driver_SetInterrupt+0xbc>)
 8000590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000594:	115b      	asrs	r3, r3, #5
 8000596:	b25b      	sxtb	r3, r3
 8000598:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f003 031f 	and.w	r3, r3, #31
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 80005a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	e000e100 	.word	0xe000e100

080005bc <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <NVIC_Driver_PriorityGroupConfig+0x48>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	; (8000604 <NVIC_Driver_PriorityGroupConfig+0x48>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <NVIC_Driver_Set_EXTI_Interrupt>:

#endif

#if (NVIC_DRIVER_EXTI_INTERRUPT_ENABLE	== OK)
	void NVIC_Driver_Set_EXTI_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
	#ifdef NVIC_DRIVER_EXTI_0_FLAG
				NVIC_Driver_SetInterrupt(EXTI0_IRQn,Preemption_priority,Sub_priority);
	#endif

	#ifdef NVIC_DRIVER_EXTI_1_FLAG
				NVIC_Driver_SetInterrupt(EXTI1_IRQn,Preemption_priority,Sub_priority);
 8000618:	79ba      	ldrb	r2, [r7, #6]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4619      	mov	r1, r3
 800061e:	2007      	movs	r0, #7
 8000620:	f7ff ff6c 	bl	80004fc <NVIC_Driver_SetInterrupt>
	#endif

	#ifdef NVIC_DRIVER_EXTI_15_FLAG
			NVIC_Driver_SetInterrupt(EXTI15_10_IRQn,Preemption_priority,Sub_priority);
	#endif
	}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SysTick_Handler>:
#include "NVIC_Driver.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <SysTick_Handler+0x20>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d004      	beq.n	8000642 <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <SysTick_Handler+0x20>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a03      	ldr	r2, [pc, #12]	; (800064c <SysTick_Handler+0x20>)
 8000640:	6013      	str	r3, [r2, #0]
	}
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000084 	.word	0x20000084

08000650 <EXTI1_IRQHandler>:
#include "EXTI_Driver.h"

volatile uint8 Button_Pressed = 0x00;

void EXTI1_IRQHandler()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	Button_Pressed++;
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI1_IRQHandler+0x1c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b03      	ldr	r3, [pc, #12]	; (800066c <EXTI1_IRQHandler+0x1c>)
 8000660:	701a      	strb	r2, [r3, #0]
	EXTI_Driver_Clear_PendingInterrupt(EXTI_DRIVER_INTERRUPT_PIN_1);
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe04 	bl	8000270 <EXTI_Driver_Clear_PendingInterrupt>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000088 	.word	0x20000088

08000670 <main>:

int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	GPIO_Driver_Init();
 8000674:	f7ff fe12 	bl	800029c <GPIO_Driver_Init>

	EXTI_Driver_Init(EXTI_DRIVER_INTERRUPT_PIN_1,EXTI_DRIVER_INTERRUPT_PORT_A);
 8000678:	2100      	movs	r1, #0
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff fd66 	bl	800014c <EXTI_Driver_Init>
	EXTI_Driver_Rising_Trigger_Select(EXTI_DRIVER_INTERRUPT_PIN_1);
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff fddf 	bl	8000244 <EXTI_Driver_Rising_Trigger_Select>
	NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_3);
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ff98 	bl	80005bc <NVIC_Driver_PriorityGroupConfig>
	NVIC_Driver_Set_EXTI_Interrupt(((uint8)0x01),((uint8)0x01));
 800068c:	2101      	movs	r1, #1
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff ffba 	bl	8000608 <NVIC_Driver_Set_EXTI_Interrupt>

	while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x24>
	...

08000698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800069c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800069e:	e003      	b.n	80006a8 <LoopCopyDataInit>

080006a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80006a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006a6:	3104      	adds	r1, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80006ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006b0:	d3f6      	bcc.n	80006a0 <CopyDataInit>
	ldr	r2, =_sbss
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80006b4:	e002      	b.n	80006bc <LoopFillZerobss>

080006b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006b8:	f842 3b04 	str.w	r3, [r2], #4

080006bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80006be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006c0:	d3f9      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c2:	f000 f813 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c6:	f000 f8cb 	bl	8000860 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ca:	f7ff ffd1 	bl	8000670 <main>
	bx	lr
 80006ce:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80006d4:	080008c8 	.word	0x080008c8
	ldr	r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006dc:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80006e0:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80006e4:	2000008c 	.word	0x2000008c

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006f0:	4a15      	ldr	r2, [pc, #84]	; (8000748 <SystemInit+0x5c>)
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <SystemInit+0x5c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80006fc:	4912      	ldr	r1, [pc, #72]	; (8000748 <SystemInit+0x5c>)
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <SystemInit+0x5c>)
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <SystemInit+0x60>)
 8000704:	4013      	ands	r3, r2
 8000706:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <SystemInit+0x5c>)
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <SystemInit+0x5c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000716:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000718:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <SystemInit+0x5c>)
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <SystemInit+0x5c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <SystemInit+0x5c>)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <SystemInit+0x5c>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800072e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SystemInit+0x5c>)
 8000732:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000736:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000738:	f000 f80c 	bl	8000754 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SystemInit+0x64>)
 800073e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000742:	609a      	str	r2, [r3, #8]
#endif 
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	f8ff0000 	.word	0xf8ff0000
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000758:	f000 f802 	bl	8000760 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800076e:	4a3a      	ldr	r2, [pc, #232]	; (8000858 <SetSysClockTo72+0xf8>)
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <SetSysClockTo72+0xf8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000778:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <SetSysClockTo72+0xf8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000782:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d103      	bne.n	8000798 <SetSysClockTo72+0x38>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000796:	d1f0      	bne.n	800077a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <SetSysClockTo72+0xf8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007a4:	2301      	movs	r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	e001      	b.n	80007ae <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d14b      	bne.n	800084c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80007b4:	4a29      	ldr	r2, [pc, #164]	; (800085c <SetSysClockTo72+0xfc>)
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <SetSysClockTo72+0xfc>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <SetSysClockTo72+0xfc>)
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <SetSysClockTo72+0xfc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f023 0303 	bic.w	r3, r3, #3
 80007ca:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80007cc:	4a23      	ldr	r2, [pc, #140]	; (800085c <SetSysClockTo72+0xfc>)
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <SetSysClockTo72+0xfc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80007d8:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <SetSysClockTo72+0xf8>)
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <SetSysClockTo72+0xf8>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <SetSysClockTo72+0xf8>)
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <SetSysClockTo72+0xf8>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <SetSysClockTo72+0xf8>)
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <SetSysClockTo72+0xf8>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007f2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80007f4:	4a18      	ldr	r2, [pc, #96]	; (8000858 <SetSysClockTo72+0xf8>)
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <SetSysClockTo72+0xf8>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80007fe:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000800:	4a15      	ldr	r2, [pc, #84]	; (8000858 <SetSysClockTo72+0xf8>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <SetSysClockTo72+0xf8>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800080a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <SetSysClockTo72+0xf8>)
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <SetSysClockTo72+0xf8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000816:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000818:	bf00      	nop
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <SetSysClockTo72+0xf8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <SetSysClockTo72+0xf8>)
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <SetSysClockTo72+0xf8>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f023 0303 	bic.w	r3, r3, #3
 8000830:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <SetSysClockTo72+0xf8>)
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <SetSysClockTo72+0xf8>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800083e:	bf00      	nop
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SetSysClockTo72+0xf8>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 030c 	and.w	r3, r3, #12
 8000848:	2b08      	cmp	r3, #8
 800084a:	d1f9      	bne.n	8000840 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	40022000 	.word	0x40022000

08000860 <__libc_init_array>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	2500      	movs	r5, #0
 8000864:	4e0c      	ldr	r6, [pc, #48]	; (8000898 <__libc_init_array+0x38>)
 8000866:	4c0d      	ldr	r4, [pc, #52]	; (800089c <__libc_init_array+0x3c>)
 8000868:	1ba4      	subs	r4, r4, r6
 800086a:	10a4      	asrs	r4, r4, #2
 800086c:	42a5      	cmp	r5, r4
 800086e:	d109      	bne.n	8000884 <__libc_init_array+0x24>
 8000870:	f000 f81a 	bl	80008a8 <_init>
 8000874:	2500      	movs	r5, #0
 8000876:	4e0a      	ldr	r6, [pc, #40]	; (80008a0 <__libc_init_array+0x40>)
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <__libc_init_array+0x44>)
 800087a:	1ba4      	subs	r4, r4, r6
 800087c:	10a4      	asrs	r4, r4, #2
 800087e:	42a5      	cmp	r5, r4
 8000880:	d105      	bne.n	800088e <__libc_init_array+0x2e>
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000888:	4798      	blx	r3
 800088a:	3501      	adds	r5, #1
 800088c:	e7ee      	b.n	800086c <__libc_init_array+0xc>
 800088e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000892:	4798      	blx	r3
 8000894:	3501      	adds	r5, #1
 8000896:	e7f2      	b.n	800087e <__libc_init_array+0x1e>
 8000898:	080008c0 	.word	0x080008c0
 800089c:	080008c0 	.word	0x080008c0
 80008a0:	080008c0 	.word	0x080008c0
 80008a4:	080008c4 	.word	0x080008c4

080008a8 <_init>:
 80008a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008aa:	bf00      	nop
 80008ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ae:	bc08      	pop	{r3}
 80008b0:	469e      	mov	lr, r3
 80008b2:	4770      	bx	lr

080008b4 <_fini>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr
